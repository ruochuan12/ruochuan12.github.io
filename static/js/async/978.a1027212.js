"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["978"],{14716:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var a=r(52676),t=r(40453),s=r(20713);let i=r.p+"static/image/install-debugger.0f36442f.png",l=r.p+"static/image/lazy-class-debugger.b3ec698b.png";function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",strong:"strong",ul:"ul",li:"li",pre:"pre",h3:"h3",img:"img",h4:"h4"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"vant40-正式发布了跟着学会用-vue3-写一个图片懒加载组件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vant40-正式发布了跟着学会用-vue3-写一个图片懒加载组件",children:"#"}),"vant4.0 正式发布了，跟着学会用 vue3 写一个图片懒加载组件！"]}),"\n",(0,a.jsx)(s.Z,{defaultLocale:"zh-CN"}),"\n",(0,a.jsx)(n.p,{children:"本文为稀土掘金技术社区首发签约文章，14天内禁止转载，14天后未获授权禁止转载，侵权必究！"}),"\n",(0,a.jsxs)(n.h2,{id:"1-前言",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,a.jsxs)(n.p,{children:["大家好，我是",(0,a.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,a.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,a.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,a.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.3k+人）第一的专栏，写有20余篇源码文章。"]}),"\n",(0,a.jsx)(n.p,{children:"我们开发业务时经常会使用到组件库，一般来说，很多时候我们不需要关心内部实现。但是如果希望学习和深究里面的原理，这时我们可以分析自己使用的组件库实现。有哪些优雅实现、最佳实践、前沿技术等都可以值得我们借鉴。"}),"\n",(0,a.jsxs)(n.p,{children:["相比于原生 ",(0,a.jsx)(n.code,{children:"JS"})," 等源码。我们或许更应该学习，正在使用的组件库的源码，因为有助于帮助我们写业务和写自己的组件。"]}),"\n",(0,a.jsxs)(n.p,{children:["如果是 ",(0,a.jsx)(n.code,{children:"Vue"})," 技术栈，开发移动端的项目，大多会选用 ",(0,a.jsx)(n.code,{children:"vant"})," 组件库，目前（2022-11-29） ",(0,a.jsx)(n.code,{children:"star"})," 多达 ",(0,a.jsx)(n.code,{children:"20.5k"}),"，",(0,a.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN",rel:"noopener noreferrer",target:"_blank",children:"已经正式发布 4.0 了"}),"。我们可以挑选 ",(0,a.jsx)(n.code,{children:"vant"})," 组件库学习，我会写一个",(0,a.jsx)(n.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"vant 组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"vant 组件库源码分析系列："})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["1.",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7158239404484460574",rel:"noopener noreferrer",target:"_blank",children:"vant 4 即将正式发布，支持暗黑主题，那么是如何实现的呢"})]}),"\n",(0,a.jsxs)(n.li,{children:["2.",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7160465286036979748",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant 4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"})]}),"\n",(0,a.jsxs)(n.li,{children:["3.",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7165661072785932296",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？"})]}),"\n",(0,a.jsxs)(n.li,{children:["4.",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7169003604303413278",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，学会用 vue3 + ts 开发毫秒级渲染的倒计时组件，真是妙啊"})]}),"\n",(0,a.jsxs)(n.li,{children:["5.",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7171227417246171149",rel:"noopener noreferrer",target:"_blank",children:"vant 4.0 正式发布了，分析其源码学会用 vue3 写一个图片懒加载组件！"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["这次我们来学习 ",(0,a.jsx)(n.code,{children:"Lazyload"})," 懒加载组件，",(0,a.jsxs)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/lazyload",rel:"noopener noreferrer",target:"_blank",children:["可以点此查看 ",(0,a.jsx)(n.code,{children:"lazyload"})," 文档体验"]}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"学完本文，你将学到："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"1. 学会如何用 vue3 + ts 开发一个 lazyload 组件\n2. 学会 `lazyload` 图片懒加载组件其原理\n3. 学会使用事件和 IntersectionObserver API 实现懒加载\n4. 等等\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"2-准备工作",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-准备工作",children:"#"}),"2. 准备工作"]}),"\n",(0,a.jsxs)(n.p,{children:["看一个开源项目，第一步应该是先看 ",(0,a.jsx)(n.a,{href:"https://github.com/youzan/vant",rel:"noopener noreferrer",target:"_blank",children:"README.md"})," 再看贡献文档 ",(0,a.jsx)(n.a,{href:"https://github.com/youzan/vant/blob/main/.github/CONTRIBUTING.md",rel:"noopener noreferrer",target:"_blank",children:"github/CONTRIBUTING.md"}),"。"]}),"\n",(0,a.jsxs)(n.h3,{id:"21-克隆源码--跑起来",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-克隆源码--跑起来",children:"#"}),"2.1 克隆源码 && 跑起来"]}),"\n",(0,a.jsxs)(n.p,{children:["You will need ",(0,a.jsx)(n.a,{href:"https://nodejs.org",rel:"noopener noreferrer",target:"_blank",children:"Node.js >= 14"})," and ",(0,a.jsx)(n.a,{href:"https://pnpm.io",rel:"noopener noreferrer",target:"_blank",children:"pnpm"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# 推荐克隆我的项目\ngit clone https://github.com/ruochuan12/vant-analysis\ncd vant-analysis/vant\n\n# 或者克隆官方仓库\ngit clone git@github.com:vant-ui/vant.git\ncd vant\n\n# 安装依赖，如果没安装 pnpm，可以用 npm i pnpm -g 安装，或者查看官网通过其他方式安装\npnpm i\n\n# 启动服务\npnpm dev\n"})}),"\n",(0,a.jsxs)(n.p,{children:["执行 ",(0,a.jsx)(n.code,{children:"pnpm dev"})," 后，这时我们打开懒加载组件 ",(0,a.jsx)(n.code,{children:"http://localhost:5173/#/zh-CN/lazyload"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"3-图片懒加载原理",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-图片懒加载原理",children:"#"}),"3. 图片懒加载原理"]}),"\n",(0,a.jsxs)(n.p,{children:["众所周知，图片懒加载的原理其实相对简单。就是进入可视区再加载图片。涉及到的知识点主要有：节流、新API、",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver",rel:"noopener noreferrer",target:"_blank",children:"IntersectionObserver"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"大致流程："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"事件模式"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"1. 初始化在元素（比如是 window，但不一定是 window）添加监听滚动和其他相关事件\n2. 使用 Element.getBoundingClientRect API 获取元素的大小及其相对于视口的位置，判断是否进入可视化区\n3. 图片设置 src 真实的图片路径\n4. 离开销毁监听的事件、和移除绑定事件的元素\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"observer 模式"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["主要是第二步用 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver",rel:"noopener noreferrer",target:"_blank",children:"IntersectionObserver"})," API。"]}),"\n",(0,a.jsx)(n.p,{children:"那么 vant4 中的 lazyload 怎么做的呢。"}),"\n",(0,a.jsxs)(n.p,{children:["带着问题我们直接找到 ",(0,a.jsx)(n.code,{children:"lazyload demo"})," 文件：",(0,a.jsx)(n.code,{children:"vant/packages/vant/src/lazyload/demo/index.vue"}),"。为什么是这个文件，我在之前文章",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7160465286036979748#heading-3",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"}),"分析了其原理，感兴趣的小伙伴点击查看。这里就不赘述了。"]}),"\n",(0,a.jsxs)(n.h2,{id:"4-利用-demo-调试源码",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-利用-demo-调试源码",children:"#"}),"4. 利用 demo 调试源码"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/lazyload/demo/index.vue\n// 代码有省略\n<script lang=\"ts\">\nimport Lazyload from '..';\n\nif (window.app) {\n  // 手动修改 demo 为如下，添加 lazyImage 为 true\n  window.app.use(Lazyload, { lazyComponent: true, lazyImage: true });\n}\n<script setup lang=\"ts\">\n// eslint-disable-next-line import/first\nimport { cdnURL, useTranslate } from '../../../docs/site';\n\nconst t = useTranslate({\n  'zh-CN': {\n    title2: '背景图懒加载',\n    title3: '懒加载模块',\n  },\n});\n\nconst imageList = [\n  cdnURL('apple-1.jpeg'),\n  cdnURL('apple-2.jpeg'),\n  cdnURL('apple-3.jpeg'),\n  cdnURL('apple-4.jpeg'),\n];\n<\/script>\n<template>\n  <demo-block :title=\"t('basicUsage')\">\n    \x3c!-- 手动修改 demo 为 lazy-image --\x3e\n    <lazy-image v-for=\"img in imageList\" :key=\"img\" :src=\"img\">\n    </lazy-image>\n  </demo-block>\n</template>\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们可以看出 lazy-load 为入口文件。"}),"\n",(0,a.jsx)(n.p,{children:"这里先附上两张调试截图。动手调试时可以参考学习。"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"install"})," 函数调试\n",(0,a.jsx)(n.img,{alt:"install 函数调试",src:i})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LazyClass"})," 调试\n",(0,a.jsx)(n.img,{alt:"lazy-class 调试",src:l})]}),"\n",(0,a.jsxs)(n.h2,{id:"5-lazy-load-入口文件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-lazy-load-入口文件",children:"#"}),"5. lazy-load 入口文件"]}),"\n",(0,a.jsxs)(n.p,{children:["从 ",(0,a.jsx)(n.code,{children:"vue-lazyload"})," 文件引入导出和默认导出 ",(0,a.jsx)(n.code,{children:"Lazyload"}),"。\n主要包含："]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"把 lazy 实例对象添加到全局上"}),"\n",(0,a.jsx)(n.li,{children:"注册懒加载组件"}),"\n",(0,a.jsx)(n.li,{children:"注册图片组件"}),"\n",(0,a.jsx)(n.li,{children:"注册指令 lazy"}),"\n",(0,a.jsx)(n.li,{children:"注册指令 lazy-container"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/lazyload/index.ts\nimport { Lazyload } from './vue-lazyload';\n\nexport default Lazyload;\nexport { Lazyload };\n"})}),"\n",(0,a.jsxs)(n.p,{children:["我们接着来看 ",(0,a.jsx)(n.code,{children:"vue-lazyload/index.js"})," 主文件。"]}),"\n",(0,a.jsxs)(n.h2,{id:"6-vue-lazyloadindexjs-主文件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-vue-lazyloadindexjs-主文件",children:"#"}),"6. vue-lazyload/index.js 主文件"]}),"\n",(0,a.jsxs)(n.p,{children:["主要导出一个包含 ",(0,a.jsx)(n.code,{children:"install"})," 方法的对象 ",(0,a.jsx)(n.code,{children:"Lazyload"}),"。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/lazyload/vue-lazyload/index.js\n/**\n * This is a fork of [vue-lazyload](https://github.com/hilongjw/vue-lazyload) with Vue 3 support.\n * license at https://github.com/hilongjw/vue-lazyload/blob/master/LICENSE\n */\n\nimport Lazy from './lazy';\nimport LazyComponent from './lazy-component';\nimport LazyContainer from './lazy-container';\nimport LazyImage from './lazy-image';\n\nexport const Lazyload = {\n  /*\n   * install function\n   * @param  {App} app\n   * @param  {object} options lazyload options\n   */\n  install(app, options = {}) {\n    debugger;\n    const LazyClass = Lazy();\n    const lazy = new LazyClass(options);\n    const lazyContainer = new LazyContainer({ lazy });\n\n    // 把 lazy 实例对象添加到全局上\n    app.config.globalProperties.$Lazyload = lazy;\n\n    // 注册懒加载组件\n    if (options.lazyComponent) {\n      app.component('LazyComponent', LazyComponent(lazy));\n    }\n\n    // 注册图片组件\n    if (options.lazyImage) {\n      app.component('LazyImage', LazyImage(lazy));\n    }\n\n    // 注册指令 lazy\n    app.directive('lazy', {\n      beforeMount: lazy.add.bind(lazy),\n      updated: lazy.update.bind(lazy),\n      unmounted: lazy.remove.bind(lazy),\n    });\n\n    // 注册指令 lazy-container\n    app.directive('lazy-container', {\n      beforeMount: lazyContainer.bind.bind(lazyContainer),\n      updated: lazyContainer.update.bind(lazyContainer),\n      unmounted: lazyContainer.unbind.bind(lazyContainer),\n    });\n  },\n};\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["单从",(0,a.jsx)(n.strong,{children:"图片懒加载"}),"来看，简化上面的代码，则是这样。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// 简化\nimport Lazy from './lazy';\nimport LazyImage from './lazy-image';\nexport const Lazyload = {\n  install(app, options = {}){\n    const LazyClass = Lazy();\n    const lazy = new LazyClass(options);\n    // 渲染图片组件\n    if (options.lazyImage) {\n      app.component('LazyImage', LazyImage(lazy));\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["我们先来看 ",(0,a.jsx)(n.code,{children:"LazyImage"})," 组件。"]}),"\n",(0,a.jsxs)(n.h2,{id:"7-lazy-image-组件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-lazy-image-组件",children:"#"}),"7. lazy-image 组件"]}),"\n",(0,a.jsx)(n.p,{children:"传入 lazy 实例对象作为参数，默认导出一个返回 vue 组件对象的函数。"}),"\n",(0,a.jsxs)(n.p,{children:["我看这块源码时，调试发现由于 ",(0,a.jsx)(n.code,{children:"render"})," 函数 ",(0,a.jsx)(n.code,{children:"vue2"})," 和 ",(0,a.jsx)(n.code,{children:"vue3"})," 写法不同，导致报错。于是提了一个PR，修复了这个问题。"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/youzan/vant/issues/11229",rel:"noopener noreferrer",target:"_blank",children:"fix(lazyload): lazy-image h is not a function (#11229)"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/lazyload/vue-lazyload/lazy-image.js\nimport { useRect } from '@vant/use';\nimport { loadImageAsync } from './util';\nimport { noop } from '../../utils';\nimport { h } from 'vue';\n\nexport default (lazyManager) => ({\n  // 对象\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: 'img',\n    },\n  },\n  // 渲染函数，tag 默认是 img，src 是真实的 renderSrc ，还有默认的插槽\n  render() {\n    return h(\n      this.tag,\n      {\n        src: this.renderSrc,\n      },\n      this.$slots.default?.()\n    );\n  },\n  data() {\n    // 若干参数\n    return {\n      el: null,\n      options: {\n        src: '',\n        error: '',\n        loading: '',\n        attempt: lazyManager.options.attempt,\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0,\n      },\n      renderSrc: '',\n    };\n  },\n  // 拆分到下方\n});\n\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"71-watchcreatedmountedbeforeunmount",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-watchcreatedmountedbeforeunmount",children:"#"}),"7.1 watch、created、mounted、beforeUnmount"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default (lazyManager) => ({\n  // props.src 监听变化 执行\n  // 把 Vue 实例对象 this 添加到 lazy 实例中\n  // 执行 lazyLoaderHandler 函数（发现节点（元素）在视口，触发 load 事件）\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    },\n  },\n  created() {\n    // 初始化\n    this.init();\n    // 默认值是占位图\n    this.renderSrc = this.options.loading;\n  },\n  mounted() {\n    this.el = this.$el;\n    // 把 Vue 实例对象 this 添加到 lazy 实例中\n    // 执行 lazyLoaderHandler 函数（发现节点（元素）在视口，触发 load 事件）\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    // 移除组件\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    // 省略，下文讲述\n  },\n})\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们可以看出，主要有以下三个实例方法，下文细述。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// 把 Vue 实例对象 this 添加到 lazy 实例中\nlazyManager.addLazyBox(this);\n// 执行 lazyLoaderHandler 函数（发现节点（元素）在视口，触发 load 事件）\nlazyManager.lazyLoadHandler();\n// 移除组件\nlazyManager.removeComponent(this);\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"72-methods-init-初始化函数",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#72-methods-init-初始化函数",children:"#"}),"7.2 methods init 初始化函数"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default (lazyManager) => ({\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n  },\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"73-methods-checkinview-检查元素是否在视图中的函数",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73-methods-checkinview-检查元素是否在视图中的函数",children:"#"}),"7.3 methods checkInView 检查元素是否在视图中的函数"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default (lazyManager) => ({\n    // 检测是否已经在视图中\n    checkInView() {\n      const rect = useRect(this.$el);\n      return (\n        rect.top < window.innerHeight * lazyManager.options.preLoad &&\n        rect.bottom > 0 &&\n        rect.left < window.innerWidth * lazyManager.options.preLoad &&\n        rect.right > 0\n      );\n    },\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["这里主要是用了 ",(0,a.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/use-rect",rel:"noopener noreferrer",target:"_blank",children:"useRect"})," 组合式 API。"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/use-rect",rel:"noopener noreferrer",target:"_blank",children:"vant 文档：useRect 获取元素的大小及其相对于视口的位置"})}),"\n",(0,a.jsxs)(n.p,{children:["获取元素的大小及其相对于视口的位置，等价于 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect",rel:"noopener noreferrer",target:"_blank",children:"Element.getBoundingClientRect"}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:["更多介绍，我在文章 ",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7165661072785932296#heading-13",rel:"noopener noreferrer",target:"_blank",children:"分析 vant4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？"}),"分析过，这里就不在赘述了。"]}),"\n",(0,a.jsxs)(n.h3,{id:"74-methods-load-函数",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#74-methods-load-函数",children:"#"}),"7.4 methods load 函数"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default (lazyManager) => ({\n  methods: {\n    load(onFinish = noop) {\n      // 默认加载三次，三次加载还失败，不是生产环境、没有开启静默模式，就提示报错\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (\n          process.env.NODE_ENV !== 'production' &&\n          !lazyManager.options.silent\n        ) {\n          console.log(\n            `[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`\n          );\n        }\n\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync(\n        { src },\n        ({ src }) => {\n          this.renderSrc = src;\n          // 加载成功，设置状态\n          this.state.loaded = true;\n        },\n        () => {\n          // 错误加载次数 +1\n          this.state.attempt++;\n          this.renderSrc = this.options.error;\n          this.state.error = true;\n        }\n      );\n    },\n  }\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["我们来看 ",(0,a.jsx)(n.code,{children:"loadImageAsync"})," 函数。"]}),"\n",(0,a.jsxs)(n.h3,{id:"75-loadimageasync-加载图片",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#75-loadimageasync-加载图片",children:"#"}),"7.5 loadImageAsync 加载图片"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement",rel:"noopener noreferrer",target:"_blank",children:"mdn 文档：HTMLImageElement"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export const loadImageAsync = (item, resolve, reject) => {\n  const image = new Image();\n\n  if (!item || !item.src) {\n    return reject(new Error('image src is required'));\n  }\n\n  image.src = item.src;\n  // 图片 crossorigin 属性\n  if (item.cors) {\n    image.crossOrigin = item.cors;\n  }\n\n  // 图片加载成功\n  image.onload = () =>\n    resolve({\n      naturalHeight: image.naturalHeight,\n      naturalWidth: image.naturalWidth,\n      src: image.src,\n    });\n\n  // 图片加载失败\n  image.onerror = (e) => reject(e);\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["我们接着来看 ",(0,a.jsx)(n.code,{children:"lazy.js"})," 文件中的 ",(0,a.jsx)(n.code,{children:"Lazy"})," 类。"]}),"\n",(0,a.jsxs)(n.h2,{id:"8-lazy-类",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-lazy-类",children:"#"}),"8. lazy 类"]}),"\n",(0,a.jsxs)(n.p,{children:["我们来看 ",(0,a.jsx)(n.code,{children:"lazy.js"})," 主结构，拥有若干实例方法。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default function () {\n  return class Lazy {\n    constructor({}){}\n    // update config\n    config(options = {}) {}\n    // output listener's load performance\n    performance() {}\n    // add lazy component to queue\n    addLazyBox(vm) {}\n    // add image listener to queue\n    add(el, binding, vnode) {}\n    // update image src\n    update(el, binding, vnode) {}\n    // remove listener form list\n    remove(el) {}\n    // remove lazy components form list\n    removeComponent(vm) {}\n    // 设置模式\n    setMode(mode) {}\n    // add listener target\n    addListenerTarget(el) {}\n    // remove listener target or reduce target childrenCount\n    removeListenerTarget(el) {}\n    // add or remove eventlistener\n    initListen(el, start) {}\n    initEvent() {}\n    // find nodes which in viewport and trigger load\n    lazyLoadHandler() {}\n    // init IntersectionObserver\n    // set mode to observer\n    initIntersectionObserver() {}\n    // init IntersectionObserver\n    observerHandler(entries) {}\n    // set element attribute with image'url and state\n    elRenderer(listener, state, cache){}\n    // generate loading loaded error image url\n    valueFormatter(value) {}\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"81-构造函数-lazy",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#81-构造函数-lazy",children:"#"}),"8.1 构造函数 Lazy"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export default function () {\n  return class Lazy {\n    constructor({}){\n        this.mode = modeType.event;\n        this.listeners = [];\n        this.targetIndex = 0;\n        this.targets = [];\n        //   省略若干代码\n        this.options = {\n          silent,\n          dispatchEvent: !!dispatchEvent,\n          throttleWait: throttleWait || 200,\n          preLoad: preLoad || 1.3,\n          preLoadTop: preLoadTop || 0,\n          error: error || DEFAULT_URL,\n          loading: loading || DEFAULT_URL,\n          attempt: attempt || 3,\n          scale: scale || getDPR(scale),\n          ListenEvents: listenEvents || DEFAULT_EVENTS,\n          supportWebp: supportWebp(),\n          filter: filter || {},\n          adapter: adapter || {},\n          observer: !!observer,\n          observerOptions: observerOptions || DEFAULT_OBSERVER_OPTIONS,\n        };\n        this.initEvent();\n        this.imageCache = new ImageCache({ max: 200 });\n        // 节流函数\n        this.lazyLoadHandler = throttle(\n            this.lazyLoadHandler.bind(this),\n            this.options.throttleWait\n        );\n\n        this.setMode(this.options.observer ? modeType.observer : modeType.event);\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["值得一提的是：",(0,a.jsx)(n.code,{children:"throttle"})," 节流函数，包裹 ",(0,a.jsx)(n.code,{children:"lazyLoadHandler"}),"。为了防止多次快速加载，影响性能。"]}),"\n",(0,a.jsxs)(n.h3,{id:"82-实例方法-lazyloadhandler",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#82-实例方法-lazyloadhandler",children:"#"}),"8.2 实例方法 lazyLoadHandler"]}),"\n",(0,a.jsxs)(n.p,{children:["英文注释：发现节点（元素）在视口，触发 ",(0,a.jsx)(n.code,{children:"load"})," 事件"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * find nodes which in viewport and trigger load\n * @return\n */\nlazyLoadHandler() {\n    const freeList = [];\n    this.listeners.forEach((listener) => {\n        // 如果是 vue 组件，listener 则是 vm (也就是 this)\n\n        // 没有元素或者没有父级元素的，存入 freeList 数组，便于移除，销毁\n        if (!listener.el || !listener.el.parentNode) {\n            freeList.push(listener);\n        }\n        // 检测在视图中，触发 load 函数。\n        const catIn = listener.checkInView();\n        if (!catIn) return;\n            listener.load();\n        });\n        freeList.forEach((item) => {\n            remove(this.listeners, item);\n            // vm\n            item.$destroy();\n        });\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"83-setmode-设置模式事件模式还是-observer-模式",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#83-setmode-设置模式事件模式还是-observer-模式",children:"#"}),"8.3 setMode 设置模式：事件模式还是 observer 模式"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { inBrowser } from '@vant/use';\n\n// 检测是否支持 IntersectionObserver API\nexport const hasIntersectionObserver =\n  inBrowser &&\n  'IntersectionObserver' in window &&\n  'IntersectionObserverEntry' in window &&\n  'intersectionRatio' in window.IntersectionObserverEntry.prototype;\n\n// 两种模式，事件或者监测\nexport const modeType = {\n  event: 'event',\n  observer: 'observer',\n};\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"setMode(mode) {\n  // 不支持 IntersectionObserver API 改为事件模式\n  if (!hasIntersectionObserver && mode === modeType.observer) {\n    mode = modeType.event;\n  }\n\n  this.mode = mode; // event or observer\n\n  if (mode === modeType.event) {\n    if (this.observer) {\n      // 停止观测\n      this.listeners.forEach((listener) => {\n        this.observer.unobserve(listener.el);\n      });\n      this.observer = null;\n    }\n\n    // 初始化事件\n    this.targets.forEach((target) => {\n      this.initListen(target.el, true);\n    });\n  } else {\n    // 移除事件\n    this.targets.forEach((target) => {\n      this.initListen(target.el, false);\n    });\n    // 初始化\n    this.initIntersectionObserver();\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"84-initlisten-初始化监听事件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#84-initlisten-初始化监听事件",children:"#"}),"8.4 initListen 初始化监听事件"]}),"\n",(0,a.jsx)(n.p,{children:"添加和移除事件监听"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const DEFAULT_EVENTS = [\n  'scroll',\n  'wheel',\n  'mousewheel',\n  'resize',\n  'animationend',\n  'transitionend',\n  'touchmove',\n];\n\nthis.options = {\n  ListenEvents: listenEvents || DEFAULT_EVENTS,\n}\n/*\n  * add or remove eventlistener\n  * @param  {DOM} el DOM or Window\n  * @param  {boolean} start flag\n  * @return\n  */\ninitListen(el, start) {\n  this.options.ListenEvents.forEach((evt) =>\n    (start ? on : off)(el, evt, this.lazyLoadHandler)\n  );\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"841-onoff-监听事件移除事件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#841-onoff-监听事件移除事件",children:"#"}),"8.4.1 on、off 监听事件，移除事件"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export function on(el, type, func) {\n  el.addEventListener(type, func, {\n    capture: false,\n    passive: true,\n  });\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/lazyload/vue-lazyload/util.js\nexport function off(el, type, func) {\n  el.removeEventListener(type, func, false);\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"85-initintersectionobserver-初始化",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#85-initintersectionobserver-初始化",children:"#"}),"8.5 initIntersectionObserver 初始化"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * init IntersectionObserver\n * set mode to observer\n * @return\n */\ninitIntersectionObserver() {\n  if (!hasIntersectionObserver) {\n    return;\n  }\n\n  this.observer = new IntersectionObserver(\n    this.observerHandler.bind(this),\n    this.options.observerOptions\n  );\n\n  if (this.listeners.length) {\n    this.listeners.forEach((listener) => {\n      this.observer.observe(listener.el);\n    });\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"86-observerhandler-观测触发-load-事件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#86-observerhandler-观测触发-load-事件",children:"#"}),"8.6 observerHandler 观测，触发 load 事件"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry",rel:"noopener noreferrer",target:"_blank",children:"mdn 文档：IntersectionObserverEntry"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * init IntersectionObserver\n * @return\n */\nobserverHandler(entries) {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      this.listeners.forEach((listener) => {\n        // 如果加载完成了，就移除监听\n        if (listener.el === entry.target) {\n          if (listener.state.loaded)\n            return this.observer.unobserve(listener.el);\n          listener.load();\n        }\n      });\n    }\n  });\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"87-实例方法-addlazybox-添加要懒加载的组件到队列数组",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#87-实例方法-addlazybox-添加要懒加载的组件到队列数组",children:"#"}),"8.7 实例方法 addLazyBox 添加要懒加载的组件到队列（数组）"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/*\n  * add lazy component to queue\n  * @param  {Vue} vm lazy component instance\n  * @return\n  */\naddLazyBox(vm) {\n  this.listeners.push(vm);\n  // 浏览器环境\n  if (inBrowser) {\n    // 把\n    this.addListenerTarget(window);\n    // 如果是监听 observer 模式，监听 new IntersectionObserver().observe(vm.el)\n    this.observer && this.observer.observe(vm.el);\n    if (vm.$el && vm.$el.parentNode) {\n      // 加入父级\n      this.addListenerTarget(vm.$el.parentNode);\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"88-实例方法-removecomponent-移除组件",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#88-实例方法-removecomponent-移除组件",children:"#"}),"8.8 实例方法 removeComponent 移除组件"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/*\n  * remove lazy components form list\n  * @param  {Vue} vm Vue instance\n  * @return\n  */\nremoveComponent(vm) {\n  if (!vm) return;\n  remove(this.listeners, vm);\n  this.observer && this.observer.unobserve(vm.el);\n  // 移除父级\n  if (vm.$parent && vm.$el.parentNode) {\n    this.removeListenerTarget(vm.$el.parentNode);\n  }\n  // 移除 window 元素\n  this.removeListenerTarget(window);\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"89-addlistenertarget-添加事件的目标元素",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#89-addlistenertarget-添加事件的目标元素",children:"#"}),"8.9 addListenerTarget 添加事件的目标元素"]}),"\n",(0,a.jsx)(n.p,{children:"比如 window 等。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/*\n  * add listener target\n  * @param  {DOM} el listener target\n  * @return\n  */\naddListenerTarget(el) {\n  if (!el) return;\n  let target = this.targets.find((target) => target.el === el);\n  if (!target) {\n    target = {\n      el,\n      id: ++this.targetIndex,\n      childrenCount: 1,\n      listened: true,\n    };\n    this.mode === modeType.event && this.initListen(target.el, true);\n    this.targets.push(target);\n  } else {\n    target.childrenCount++;\n  }\n  return this.targetIndex;\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"810-removelistenertarget-移除事件的目标元素",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#810-removelistenertarget-移除事件的目标元素",children:"#"}),"8.10 removeListenerTarget 移除事件的目标元素"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/*\n  * remove listener target or reduce target childrenCount\n  * @param  {DOM} el or window\n  * @return\n  */\nremoveListenerTarget(el) {\n  this.targets.forEach((target, index) => {\n    if (target.el === el) {\n      target.childrenCount--;\n      if (!target.childrenCount) {\n        this.initListen(target.el, false);\n        this.targets.splice(index, 1);\n        target = null;\n      }\n    }\n  });\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"9-总结",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-总结",children:"#"}),"9. 总结"]}),"\n",(0,a.jsx)(n.p,{children:"大致流程："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"事件模式"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"1. 初始化在元素（比如是 window，但不一定是 window）添加监听滚动和其他相关事件\n2. 使用 Element.getBoundingClientRect API 获取元素的大小及其相对于视口的位置，判断是否进入可视化区\n3. 进入可视区触发 load 事件，将图片设置 src 真实的图片路径，从而自动加载图片\n4. 离开销毁监听的事件、和移除绑定事件的元素\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"observer 模式"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["主要是第二步用 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver",rel:"noopener noreferrer",target:"_blank",children:"IntersectionObserver"})," API。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// 把 Vue 实例对象 this 添加到 lazy 实例中\nlazyManager.addLazyBox(this);\n// 执行 lazyLoaderHandler 函数（发现节点（元素）在视口 checkInView，触发 load 事件）\nlazyManager.lazyLoadHandler();\n// 移除组件\nlazyManager.removeComponent(this);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["在 load 事件中，调用 ",(0,a.jsx)(n.code,{children:"loadImageAsync"})," 函数。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const image = new Image();\nimage.src = xxx;\nimage.onload = () => {}\nimage.onerror = () => {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["行文至此，我们就算分析完了 ",(0,a.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/lazyload",rel:"noopener noreferrer",target:"_blank",children:"lazyload 组件"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"其中，有很多细节处理值得我们学习。\n比如："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["监听事件，不仅仅是 ",(0,a.jsx)(n.code,{children:"scroll"})," 事件，还有",(0,a.jsx)(n.code,{children:"'scroll','wheel','mousewheel','resize','animationend','transitionend','touchmove'"})]}),"\n",(0,a.jsx)(n.li,{children:"监听本身数组存起来了"}),"\n",(0,a.jsx)(n.li,{children:"目标元素也用数组存起来了。"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"install"})," 函数主要有以下实现："]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"把 lazy 实例对象添加到全局上"}),"\n",(0,a.jsx)(n.li,{children:"注册懒加载组件"}),"\n",(0,a.jsx)(n.li,{children:"注册图片组件"}),"\n",(0,a.jsx)(n.li,{children:"注册指令 lazy"}),"\n",(0,a.jsx)(n.li,{children:"注册指令 lazy-container 没有分析。"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"但限于篇幅原因，组件源码还有指令部分没有分析。\n感兴趣的小伙伴可以自行分析学习。"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"如果看完有收获，欢迎点赞、评论、分享支持。你的支持和肯定，是我写作的动力"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"10-加源码共读群交流",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10-加源码共读群交流",children:"#"}),"10. 加源码共读群交流"]}),"\n",(0,a.jsxs)(n.p,{children:["最后可以持续关注我",(0,a.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"。我会写一个",(0,a.jsx)(n.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,a.jsxs)(n.p,{children:["我倾力持续组织了一年",(0,a.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,a.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,a.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:["另外，想学源码，极力推荐关注我写的专栏",(0,a.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(o,e)})):o(e)}let h=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["vant%2Flazyload%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-准备工作",text:"2. 准备工作",depth:2},{id:"21-克隆源码--跑起来",text:"2.1 克隆源码 && 跑起来",depth:3},{id:"3-图片懒加载原理",text:"3. 图片懒加载原理",depth:2},{id:"4-利用-demo-调试源码",text:"4. 利用 demo 调试源码",depth:2},{id:"5-lazy-load-入口文件",text:"5. lazy-load 入口文件",depth:2},{id:"6-vue-lazyloadindexjs-主文件",text:"6. vue-lazyload/index.js 主文件",depth:2},{id:"7-lazy-image-组件",text:"7. lazy-image 组件",depth:2},{id:"71-watchcreatedmountedbeforeunmount",text:"7.1 watch、created、mounted、beforeUnmount",depth:3},{id:"72-methods-init-初始化函数",text:"7.2 methods init 初始化函数",depth:3},{id:"73-methods-checkinview-检查元素是否在视图中的函数",text:"7.3 methods checkInView 检查元素是否在视图中的函数",depth:3},{id:"74-methods-load-函数",text:"7.4 methods load 函数",depth:3},{id:"75-loadimageasync-加载图片",text:"7.5 loadImageAsync 加载图片",depth:3},{id:"8-lazy-类",text:"8. lazy 类",depth:2},{id:"81-构造函数-lazy",text:"8.1 构造函数 Lazy",depth:3},{id:"82-实例方法-lazyloadhandler",text:"8.2 实例方法 lazyLoadHandler",depth:3},{id:"83-setmode-设置模式事件模式还是-observer-模式",text:"8.3 setMode 设置模式：事件模式还是 observer 模式",depth:3},{id:"84-initlisten-初始化监听事件",text:"8.4 initListen 初始化监听事件",depth:3},{id:"841-onoff-监听事件移除事件",text:"8.4.1 on、off 监听事件，移除事件",depth:4},{id:"85-initintersectionobserver-初始化",text:"8.5 initIntersectionObserver 初始化",depth:3},{id:"86-observerhandler-观测触发-load-事件",text:"8.6 observerHandler 观测，触发 load 事件",depth:3},{id:"87-实例方法-addlazybox-添加要懒加载的组件到队列数组",text:"8.7 实例方法 addLazyBox 添加要懒加载的组件到队列（数组）",depth:3},{id:"88-实例方法-removecomponent-移除组件",text:"8.8 实例方法 removeComponent 移除组件",depth:3},{id:"89-addlistenertarget-添加事件的目标元素",text:"8.9 addListenerTarget 添加事件的目标元素",depth:3},{id:"810-removelistenertarget-移除事件的目标元素",text:"8.10 removeListenerTarget 移除事件的目标元素",depth:3},{id:"9-总结",text:"9. 总结",depth:2},{id:"10-加源码共读群交流",text:"10. 加源码共读群交流",depth:2}],title:"vant4.0 正式发布了，跟着学会用 vue3 写一个图片懒加载组件！",headingTitle:"vant4.0 正式发布了，跟着学会用 vue3 写一个图片懒加载组件！",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(e,n,r){r.d(n,{Z:()=>o});var a=r(52676),t=r(75271),s=r(92815);r(18544);let i={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function l(e,n,r){let a=Object.keys(i).includes(n)?n:r;return i[a](e)}let o=e=>{let{defaultLocale:n="en-US"}=e,r=(0,s.Vi)().page.readingTimeData,i=(0,s.Jr)(),o=(0,s.e7)(),[d,h]=(0,t.useState)(l(r,i,n));return(0,t.useEffect)(()=>{h(l(r,i,n))},[i,r]),(0,a.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:d})}}}]);