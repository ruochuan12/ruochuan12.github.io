"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["445"],{84106:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(52676),a=r(40453),t=r(20713);function i(e){let n=Object.assign({h1:"h1",a:"a",h3:"h3",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"vue3-中-那些使用的工具函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vue3-中-那些使用的工具函数",children:"#"}),"Vue3 中 那些使用的工具函数"]}),"\n",(0,s.jsx)(t.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h3,{id:"babelparserdefaultplugins",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babelparserdefaultplugins",children:"#"}),"babelParserDefaultPlugins"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const babelParserDefaultPlugins = [\r\n  'bigInt',\r\n  'optionalChaining',\r\n  'nullishCoalescingOperator'\r\n] as const\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"empty_obj-空对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#empty_obj-空对象",children:"#"}),"EMPTY_OBJ 空对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const EMPTY_OBJ: { readonly [key: string]: any } = __DEV__\r\n  ? Object.freeze({})\r\n  : {}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"empty_arr--空数组",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#empty_arr--空数组",children:"#"}),"EMPTY_ARR  空数组"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const EMPTY_ARR = __DEV__ ? Object.freeze([]) : []\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"noop-空函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#noop-空函数",children:"#"}),"NOOP 空函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const NOOP = () => {}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"no-永远返回-false-的函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#no-永远返回-false-的函数",children:"#"}),"NO 永远返回 false 的函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/**\r\n * Always return false.\r\n */\r\nexport const NO = () => false\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"ison-判断字符串是不是-on-开头",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ison-判断字符串是不是-on-开头",children:"#"}),"isOn 判断字符串是不是 on 开头"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const onRE = /^on[^a-z]/\r\nexport const isOn = (key: string) => onRE.test(key)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"ismodellistener",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ismodellistener",children:"#"}),"isModelListener"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isModelListener = (key: string) => key.startsWith('onUpdate:')\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"extend-继承",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extend-继承",children:"#"}),"extend 继承"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const extend = Object.assign\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"remove-移除数组的一项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#remove-移除数组的一项",children:"#"}),"remove 移除数组的一项"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const remove = <T>(arr: T[], el: T) => {\r\n  const i = arr.indexOf(el)\r\n  if (i > -1) {\r\n    arr.splice(i, 1)\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"hasown-是不是自己本身所拥有的属性",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hasown-是不是自己本身所拥有的属性",children:"#"}),"hasOwn 是不是自己本身所拥有的属性"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (\r\n  val: object,\r\n  key: string | symbol\r\n): key is keyof typeof val => hasOwnProperty.call(val, key)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isarray-判断数组",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isarray-判断数组",children:"#"}),"isArray 判断数组"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isArray = Array.isArray\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"ismap-判断是不是-map-对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ismap-判断是不是-map-对象",children:"#"}),"isMap 判断是不是 Map 对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isMap = (val: unknown): val is Map<any, any> =>\r\n  toTypeString(val) === '[object Map]'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isset-判断是不是-set-对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isset-判断是不是-set-对象",children:"#"}),"isSet 判断是不是 Set 对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isSet = (val: unknown): val is Set<any> =>\r\n  toTypeString(val) === '[object Set]'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isdate-判断是不是-date-对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isdate-判断是不是-date-对象",children:"#"}),"isDate 判断是不是 Date 对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isDate = (val: unknown): val is Date => val instanceof Date\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isfunction-判断是不是函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isfunction-判断是不是函数",children:"#"}),"isFunction 判断是不是函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isFunction = (val: unknown): val is Function =>\r\n  typeof val === 'function'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isstring-判断是不是字符串",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isstring-判断是不是字符串",children:"#"}),"isString 判断是不是字符串"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isString = (val: unknown): val is string => typeof val === 'string'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"issymbol-判断是不是-symbol",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#issymbol-判断是不是-symbol",children:"#"}),"isSymbol 判断是不是 Symbol"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isSymbol = (val: unknown): val is symbol => typeof val === 'symbol'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isobject-判断是不是对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isobject-判断是不是对象",children:"#"}),"isObject 判断是不是对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isObject = (val: unknown): val is Record<any, any> =>\r\n  val !== null && typeof val === 'object'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"ispromise-判断是不是-promise",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ispromise-判断是不是-promise",children:"#"}),"isPromise 判断是不是 Promise"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isPromise = <T = any>(val: unknown): val is Promise<T> => {\r\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch)\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"objecttostring-对象转字符串",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objecttostring-对象转字符串",children:"#"}),"objectToString 对象转字符串"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const objectToString = Object.prototype.toString\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"totypestring--对象转字符串",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#totypestring--对象转字符串",children:"#"}),"toTypeString  对象转字符串"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const toTypeString = (value: unknown): string =>\r\n  objectToString.call(value)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"torawtype--对象转字符串-截取后几位",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#torawtype--对象转字符串-截取后几位",children:"#"}),"toRawType  对象转字符串 截取后几位"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export const toRawType = (value: unknown): string => {\r\n  // extract "RawType" from strings like "[object RawType]"\r\n  return toTypeString(value).slice(8, -1)\r\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"isplainobject-判断是不是纯粹的对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isplainobject-判断是不是纯粹的对象",children:"#"}),"isPlainObject 判断是不是纯粹的对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isPlainObject = (val: unknown): val is object =>\r\n  toTypeString(val) === '[object Object]'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isintegerkey-判断是不是",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isintegerkey-判断是不是",children:"#"}),"isIntegerKey 判断是不是"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isIntegerKey = (key: unknown) =>\r\n  isString(key) &&\r\n  key !== 'NaN' &&\r\n  key[0] !== '-' &&\r\n  '' + parseInt(key, 10) === key\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"isreservedprop",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isreservedprop",children:"#"}),"isReservedProp"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const isReservedProp = /*#__PURE__*/ makeMap(\r\n  // the leading comma is intentional so empty string \"\" is also included\r\n  ',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted'\r\n)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"cachestringfunction-缓存",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cachestringfunction-缓存",children:"#"}),"cacheStringFunction 缓存"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const cacheStringFunction = <T extends (str: string) => string>(fn: T): T => {\r\n  const cache: Record<string, string> = Object.create(null)\r\n  return ((str: string) => {\r\n    const hit = cache[str]\r\n    return hit || (cache[str] = fn(str))\r\n  }) as any\r\n}\r\n\r\nconst camelizeRE = /-(\\w)/g\r\n/**\r\n * @private\r\n */\r\nexport const camelize = cacheStringFunction(\r\n  (str: string): string => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''))\r\n  }\r\n)\r\n\r\nconst hyphenateRE = /\\B([A-Z])/g\r\n/**\r\n * @private\r\n */\r\nexport const hyphenate = cacheStringFunction((str: string) =>\r\n  str.replace(hyphenateRE, '-$1').toLowerCase()\r\n)\r\n\r\n/**\r\n * @private\r\n */\r\nexport const capitalize = cacheStringFunction(\r\n  (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\r\n)\r\n\r\n/**\r\n * @private\r\n */\r\nexport const toHandlerKey = cacheStringFunction(\r\n  (str: string) => (str ? `on${capitalize(str)}` : ``)\r\n)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"haschanged-判断是不是有变化",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#haschanged-判断是不是有变化",children:"#"}),"hasChanged 判断是不是有变化"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// compare whether a value has changed, accounting for NaN.\r\nexport const hasChanged = (value: any, oldValue: any): boolean =>\r\n  value !== oldValue && (value === value || oldValue === oldValue)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"invokearrayfns--执行数组里的函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#invokearrayfns--执行数组里的函数",children:"#"}),"invokeArrayFns  执行数组里的函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const invokeArrayFns = (fns: Function[], arg?: any) => {\r\n  for (let i = 0; i < fns.length; i++) {\r\n    fns[i](arg)\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"def-定义",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#def-定义",children:"#"}),"def 定义"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const def = (obj: object, key: string | symbol, value: any) => {\r\n  Object.defineProperty(obj, key, {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value\r\n  })\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"tonumber-转数字",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tonumber-转数字",children:"#"}),"toNumber 转数字"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const toNumber = (val: any): any => {\r\n  const n = parseFloat(val)\r\n  return isNaN(n) ? val : n\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"getglobalthis-全局对象",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getglobalthis-全局对象",children:"#"}),"getGlobalThis 全局对象"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let _globalThis: any\r\nexport const getGlobalThis = (): any => {\r\n  return (\r\n    _globalThis ||\r\n    (_globalThis =\r\n      typeof globalThis !== 'undefined'\r\n        ? globalThis\r\n        : typeof self !== 'undefined'\r\n          ? self\r\n          : typeof window !== 'undefined'\r\n            ? window\r\n            : typeof global !== 'undefined'\r\n              ? global\r\n              : {})\r\n  )\r\n}\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["vue-next-utils%2FREADME.ts.md"]={toc:[{id:"babelparserdefaultplugins",text:"babelParserDefaultPlugins",depth:3},{id:"empty_obj-空对象",text:"EMPTY_OBJ 空对象",depth:3},{id:"empty_arr--空数组",text:"EMPTY_ARR  空数组",depth:3},{id:"noop-空函数",text:"NOOP 空函数",depth:3},{id:"no-永远返回-false-的函数",text:"NO 永远返回 false 的函数",depth:3},{id:"ison-判断字符串是不是-on-开头",text:"isOn 判断字符串是不是 on 开头",depth:3},{id:"ismodellistener",text:"isModelListener",depth:3},{id:"extend-继承",text:"extend 继承",depth:3},{id:"remove-移除数组的一项",text:"remove 移除数组的一项",depth:3},{id:"hasown-是不是自己本身所拥有的属性",text:"hasOwn 是不是自己本身所拥有的属性",depth:3},{id:"isarray-判断数组",text:"isArray 判断数组",depth:3},{id:"ismap-判断是不是-map-对象",text:"isMap 判断是不是 Map 对象",depth:3},{id:"isset-判断是不是-set-对象",text:"isSet 判断是不是 Set 对象",depth:3},{id:"isdate-判断是不是-date-对象",text:"isDate 判断是不是 Date 对象",depth:3},{id:"isfunction-判断是不是函数",text:"isFunction 判断是不是函数",depth:3},{id:"isstring-判断是不是字符串",text:"isString 判断是不是字符串",depth:3},{id:"issymbol-判断是不是-symbol",text:"isSymbol 判断是不是 Symbol",depth:3},{id:"isobject-判断是不是对象",text:"isObject 判断是不是对象",depth:3},{id:"ispromise-判断是不是-promise",text:"isPromise 判断是不是 Promise",depth:3},{id:"objecttostring-对象转字符串",text:"objectToString 对象转字符串",depth:3},{id:"totypestring--对象转字符串",text:"toTypeString  对象转字符串",depth:3},{id:"torawtype--对象转字符串-截取后几位",text:"toRawType  对象转字符串 截取后几位",depth:3},{id:"isplainobject-判断是不是纯粹的对象",text:"isPlainObject 判断是不是纯粹的对象",depth:3},{id:"isintegerkey-判断是不是",text:"isIntegerKey 判断是不是",depth:3},{id:"isreservedprop",text:"isReservedProp",depth:3},{id:"cachestringfunction-缓存",text:"cacheStringFunction 缓存",depth:3},{id:"haschanged-判断是不是有变化",text:"hasChanged 判断是不是有变化",depth:3},{id:"invokearrayfns--执行数组里的函数",text:"invokeArrayFns  执行数组里的函数",depth:3},{id:"def-定义",text:"def 定义",depth:3},{id:"tonumber-转数字",text:"toNumber 转数字",depth:3},{id:"getglobalthis-全局对象",text:"getGlobalThis 全局对象",depth:3}],title:"Vue3 中 那些使用的工具函数",headingTitle:"Vue3 中 那些使用的工具函数",frontmatter:{theme:"smartblue",highlight:"dracula"}}},20713:function(e,n,r){r.d(n,{Z:()=>c});var s=r(52676),a=r(75271),t=r(92815);r(18544);let i={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,r){let s=Object.keys(i).includes(n)?n:r;return i[s](e)}let c=e=>{let{defaultLocale:n="en-US"}=e,r=(0,t.Vi)().page.readingTimeData,i=(0,t.Jr)(),c=(0,t.e7)(),[l,h]=(0,a.useState)(d(r,i,n));return(0,a.useEffect)(()=>{h(d(r,i,n))},[i,r]),(0,s.jsx)("span",{"data-dark":String(c),className:"rp-reading-time",children:l})}}}]);