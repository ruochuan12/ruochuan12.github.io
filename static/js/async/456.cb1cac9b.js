"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["456"],{32743:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var i=s(52676),r=s(40453),d=s(20713);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",h3:"h3",pre:"pre",ul:"ul",li:"li",strong:"strong"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"vite-源码系列",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-源码系列",children:"#"}),"vite 源码系列"]}),"\n",(0,i.jsx)(d.Z,{defaultLocale:"zh-CN"}),"\n",(0,i.jsxs)(n.h2,{id:"1-前言",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,i.jsxs)(n.p,{children:["大家好，我是",(0,i.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"，欢迎关注我的",(0,i.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。我倾力持续组织了 3 年多",(0,i.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,i.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,i.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,i.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]}),"\n",(0,i.jsxs)(n.p,{children:["在 ",(0,i.jsx)(n.code,{children:"package.json"})," 文件中，Vite 的入口文件相关信息主要由 ",(0,i.jsx)(n.code,{children:"bin"}),"、",(0,i.jsx)(n.code,{children:"main"}),"、",(0,i.jsx)(n.code,{children:"exports"})," 字段定义。下面详细分析这些字段："]}),"\n",(0,i.jsxs)(n.h3,{id:"1bin-字段",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1bin-字段",children:"#"}),"1.",(0,i.jsx)(n.code,{children:"bin"})," 字段"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bin"})," 字段定义了可执行脚本，用于在命令行中调用 Vite。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'\n// vite/packages/vite/package.json\n\n"bin": {\n  "vite": "bin/vite.js"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这里表明，当你在命令行中输入 ",(0,i.jsx)(n.code,{children:"vite"})," 命令时，实际上执行的是 ",(0,i.jsx)(n.code,{children:"bin/vite.js"})," 文件。"]}),"\n",(0,i.jsxs)(n.h3,{id:"2main-字段",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2main-字段",children:"#"}),"2.",(0,i.jsx)(n.code,{children:"main"})," 字段"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"main"})," 字段指定了 Node.js 环境下默认的入口文件。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json:vite/packages/vite/package.json",children:'"main": "./dist/node/index.js"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这意味着，当你在 Node.js 项目中使用 ",(0,i.jsx)(n.code,{children:"require('vite')"})," 时，会加载 ",(0,i.jsx)(n.code,{children:"./dist/node/index.js"})," 文件。"]}),"\n",(0,i.jsxs)(n.h3,{id:"3exports-字段",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3exports-字段",children:"#"}),"3.",(0,i.jsx)(n.code,{children:"exports"})," 字段"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exports"})," 字段提供了更细致的模块解析规则，支持不同的导入方式（如 ",(0,i.jsx)(n.code,{children:"import"}),"、",(0,i.jsx)(n.code,{children:"require"}),"）。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json:vite/packages/vite/package.json",children:'"exports": {\n  ".": {\n    "module-sync": "./dist/node/index.js",\n    "import": "./dist/node/index.js",\n    "require": "./index.cjs"\n  },\n  "./client": {\n    "types": "./client.d.ts"\n  },\n  // 其他路径...\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"."})," 表示包的主入口：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"module-sync"})," 和 ",(0,i.jsx)(n.code,{children:"import"})," 都指向 ",(0,i.jsx)(n.code,{children:"./dist/node/index.js"}),"，适用于 ESM 导入。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"require"})," 指向 ",(0,i.jsx)(n.code,{children:"./index.cjs"}),"，适用于 CommonJS 导入。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"./client"})," 指向 ",(0,i.jsx)(n.code,{children:"./client.d.ts"}),"，用于提供类型定义。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"总结",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"}),"总结"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"命令行入口"}),"：",(0,i.jsx)(n.code,{children:"bin/vite.js"})," 是 Vite 命令行工具的入口文件。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js 入口"}),"：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ESM 导入时，使用 ",(0,i.jsx)(n.code,{children:"./dist/node/index.js"}),"。"]}),"\n",(0,i.jsxs)(n.li,{children:["CommonJS 导入时，使用 ",(0,i.jsx)(n.code,{children:"./index.cjs"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这些入口文件共同构成了 Vite 在不同环境下的启动和使用方式。"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"packages/vite/bin/vite.js"})," 文件是 Vite 命令行工具的入口文件，其主要功能是初始化环境、处理命令行参数，并启动 Vite CLI。以下是对该文件的详细分析："]}),"\n",(0,i.jsxs)(n.h3,{id:"1-引入模块",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-引入模块",children:"#"}),"1. 引入模块"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript:vite/packages/vite/bin/vite.js",children:"import { performance } from 'node:perf_hooks'\nimport module from 'node:module'\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"node:perf_hooks"}),"：用于性能测量，",(0,i.jsx)(n.code,{children:"performance.now()"})," 可以获取当前时间戳。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"node:module"}),"：Node.js 的模块系统，用于启用和刷新编译缓存。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-开发环境调试支持",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-开发环境调试支持",children:"#"}),"2. 开发环境调试支持"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// vite/packages/vite/bin/vite.js\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.install())\n  } catch {}\n\n  process.on('unhandledRejection', (err) => {\n    throw new Error('UNHANDLED PROMISE REJECTION', { cause: err })\n  })\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"source-map-support"}),"：仅在开发环境中使用，用于支持源映射，方便调试。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"process.on('unhandledRejection')"}),"：捕获未处理的 Promise 拒绝，抛出错误。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-记录启动时间",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-记录启动时间",children:"#"}),"3. 记录启动时间"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript:vite/packages/vite/bin/vite.js",children:"global.__vite_start_time = performance.now()\n"})}),"\n",(0,i.jsx)(n.p,{children:"记录 Vite 启动的时间戳，用于后续性能分析。"}),"\n",(0,i.jsxs)(n.h3,{id:"4-处理调试模式和过滤器",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-处理调试模式和过滤器",children:"#"}),"4. 处理调试模式和过滤器"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript:vite/packages/vite/bin/vite.js",children:"const debugIndex = process.argv.findIndex((arg) => /^(?:-d|--debug)$/.test(arg))\nconst filterIndex = process.argv.findIndex((arg) =>\n  /^(?:-f|--filter)$/.test(arg),\n)\nconst profileIndex = process.argv.indexOf('--profile')\n\nif (debugIndex > 0) {\n  let value = process.argv[debugIndex + 1]\n  if (!value || value.startsWith('-')) {\n    value = 'vite:*'\n  } else {\n    // support debugging multiple flags with comma-separated list\n    value = value\n      .split(',')\n      .map((v) => `vite:${v}`)\n      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n    const filter = process.argv[filterIndex + 1]\n    if (filter && !filter.startsWith('-')) {\n      process.env.VITE_DEBUG_FILTER = filter\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"process.argv"}),"：获取命令行参数。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"debugIndex"}),"：查找 ",(0,i.jsx)(n.code,{children:"--debug"})," 或 ",(0,i.jsx)(n.code,{children:"-d"})," 参数的索引。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filterIndex"}),"：查找 ",(0,i.jsx)(n.code,{children:"--filter"})," 或 ",(0,i.jsx)(n.code,{children:"-f"})," 参数的索引。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"profileIndex"}),"：查找 ",(0,i.jsx)(n.code,{children:"--profile"})," 参数的索引。"]}),"\n",(0,i.jsxs)(n.li,{children:["如果启用了调试模式，设置 ",(0,i.jsx)(n.code,{children:"process.env.DEBUG"})," 环境变量，并处理过滤器。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-启动函数",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-启动函数",children:"#"}),"5. 启动函数"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// vite/packages/vite/bin/vite.js\n\nfunction start() {\n  try {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins -- it is supported in Node 22.8.0+ and only called if it exists\n    module.enableCompileCache?.()\n    // flush the cache after 10s because the cache is not flushed until process end\n    // for dev server, the cache is never flushed unless manually flushed because the process.exit is called\n    // also flushing the cache in SIGINT handler seems to cause the process to hang\n    setTimeout(() => {\n      try {\n        // eslint-disable-next-line n/no-unsupported-features/node-builtins -- it is supported in Node 22.12.0+ and only called if it exists\n        module.flushCompileCache?.()\n      } catch {}\n    }, 10 * 1000).unref()\n  } catch {}\n  return import('../dist/node/cli.js')\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"module.enableCompileCache()"}),"：启用 Node.js 的编译缓存，提高性能。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"module.flushCompileCache()"}),"：在 10 秒后刷新编译缓存。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"import('../dist/node/cli.js')"}),"：导入 Vite CLI 模块。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"6-处理性能分析模式",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-处理性能分析模式",children:"#"}),"6. 处理性能分析模式"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"\n// vite/packages/vite/bin/vite.js\n\nif (profileIndex > 0) {\n  process.argv.splice(profileIndex, 1)\n  const next = process.argv[profileIndex]\n  if (next && !next.startsWith('-')) {\n    process.argv.splice(profileIndex, 1)\n  }\n  const inspector = await import('node:inspector').then((r) => r.default)\n  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n  start()\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["如果启用了性能分析模式（",(0,i.jsx)(n.code,{children:"--profile"}),"），启动 Node.js 检查器会话，并开始性能分析。"]}),"\n",(0,i.jsxs)(n.li,{children:["否则，直接调用 ",(0,i.jsx)(n.code,{children:"start()"})," 函数启动 Vite CLI。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"总结-1",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结-1",children:"#"}),"总结"]}),"\n",(0,i.jsx)(n.p,{children:"该文件的主要功能是初始化 Vite 命令行工具的环境，处理命令行参数，包括调试模式、过滤器和性能分析模式，并最终启动 Vite CLI。通过启用编译缓存和性能分析，提高了 Vite 的性能和可调试性。"}),"\n",(0,i.jsxs)(n.h2,{id:"vite-入口",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-入口",children:"#"}),"vite 入口"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// packages/vite/bin/vite.js\nfunction start() {\n  return import('../dist/node/cli.js')\n}\nstart()\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"cac-dev-action",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cac-dev-action",children:"#"}),"cac dev action"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    filterDuplicateOptions(options)\n    // output structure is preserved even after bundling so require()\n    // is ok here\n    const { createServer } = await import('./server')\n    try {\n      const server = await createServer({\n        root,\n        base: options.base,\n        mode: options.mode,\n        configFile: options.config,\n        logLevel: options.logLevel,\n        clearScreen: options.clearScreen,\n        optimizeDeps: { force: options.force },\n        server: cleanOptions(options),\n      })\n\n      if (!server.httpServer) {\n        throw new Error('HTTP server not available')\n      }\n\n      await server.listen()\n}\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(c,e)})):c(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["vite%2Fdev%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"1bin-字段",text:"1.`bin` 字段",depth:3},{id:"2main-字段",text:"2.`main` 字段",depth:3},{id:"3exports-字段",text:"3.`exports` 字段",depth:3},{id:"总结",text:"总结",depth:3},{id:"1-引入模块",text:"1. 引入模块",depth:3},{id:"2-开发环境调试支持",text:"2. 开发环境调试支持",depth:3},{id:"3-记录启动时间",text:"3. 记录启动时间",depth:3},{id:"4-处理调试模式和过滤器",text:"4. 处理调试模式和过滤器",depth:3},{id:"5-启动函数",text:"5. 启动函数",depth:3},{id:"6-处理性能分析模式",text:"6. 处理性能分析模式",depth:3},{id:"总结-1",text:"总结",depth:3},{id:"vite-入口",text:"vite 入口",depth:2},{id:"cac-dev-action",text:"cac dev action",depth:2}],title:"vite 源码系列",headingTitle:"vite 源码系列",frontmatter:{}}},20713:function(e,n,s){s.d(n,{Z:()=>l});var i=s(52676),r=s(75271),d=s(92815);s(18544);let c={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function t(e,n,s){let i=Object.keys(c).includes(n)?n:s;return c[i](e)}let l=e=>{let{defaultLocale:n="en-US"}=e,s=(0,d.Vi)().page.readingTimeData,c=(0,d.Jr)(),l=(0,d.e7)(),[a,o]=(0,r.useState)(t(s,c,n));return(0,r.useEffect)(()=>{o(t(s,c,n))},[c,s]),(0,i.jsx)("span",{"data-dark":String(l),className:"rp-reading-time",children:a})}}}]);