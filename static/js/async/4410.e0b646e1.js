"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["4410"],{15879:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var s=r(52676),i=r(40453),c=r(20713);let o=r.p+"static/image/debugger.8145ef81.png",d=r.p+"static/image/node.js-debugger.438b9662.jpg",t=r.p+"static/image/ls-remote.52ad7b3e.png",l=r.p+"static/image/examples.756d6feb.png";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",code:"code",pre:"pre",strong:"strong",h3:"h3",img:"img"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"从22行有趣的源码库中我学到了-callback-promisify-化的-nodejs-源码实现",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从22行有趣的源码库中我学到了-callback-promisify-化的-nodejs-源码实现",children:"#"}),"从22行有趣的源码库中，我学到了 callback promisify 化的 Node.js 源码实现"]}),"\n",(0,s.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h2,{id:"1-前言",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["大家好，我是",(0,s.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。欢迎关注我的",(0,s.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"公众号若川视野"}),"，最近组织了",(0,s.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"源码共读活动"}),"，感兴趣的可以加我微信 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"})," 参与，如今已进行三个月，大家一起交流学习，共同进步，很多人都表示收获颇丰。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["想学源码，极力推荐之前我写的",(0,s.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"})," 包含",(0,s.jsx)(n.code,{children:"jQuery"}),"、",(0,s.jsx)(n.code,{children:"underscore"}),"、",(0,s.jsx)(n.code,{children:"lodash"}),"、",(0,s.jsx)(n.code,{children:"vuex"}),"、",(0,s.jsx)(n.code,{children:"sentry"}),"、",(0,s.jsx)(n.code,{children:"axios"}),"、",(0,s.jsx)(n.code,{children:"redux"}),"、",(0,s.jsx)(n.code,{children:"koa"}),"、",(0,s.jsx)(n.code,{children:"vue-devtools"}),"、",(0,s.jsx)(n.code,{children:"vuex4"}),"、",(0,s.jsx)(n.code,{children:"koa-compose"}),"、",(0,s.jsx)(n.code,{children:"vue 3.2 发布"}),"、",(0,s.jsx)(n.code,{children:"vue-this"}),"、",(0,s.jsx)(n.code,{children:"create-vue"}),"、",(0,s.jsx)(n.code,{children:"玩具vite"}),"等10余篇源码文章。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/remote-git-tags-analysis.git",rel:"noopener noreferrer",target:"_blank",children:"本文仓库 remote-git-tags-analysis，求个star^_^"})}),"\n",(0,s.jsxs)(n.p,{children:["最近组织了",(0,s.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"源码共读活动"}),"，大家一起学习源码。于是搜寻各种值得我们学习，且代码行数不多的源码。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们经常会在本地git仓库切换tags，或者git仓库切换tags。那么我们是否想过如果获取tags呢。本文就是学习 ",(0,s.jsx)(n.code,{children:"remote-git-tags"})," 这个22行代码的源码库。源码不多，但非常值得我们学习。"]}),"\n",(0,s.jsx)(n.p,{children:"阅读本文，你将学到："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"1. Node 加载采用什么模块\n2. 获取 git 仓库所有 tags 的原理\n3. 学会调试看源码\n4. 学会面试高频考点 promisify 的原理和实现\n5. 等等\n"})}),"\n",(0,s.jsx)(n.p,{children:"刚开始先不急着看上千行、上万行的源码。源码长度越长越不容易坚持下来。看源码讲究循序渐进。比如先从自己会用上的百来行的开始看。"}),"\n",(0,s.jsx)(n.p,{children:"我之前在知乎上回答过类似问题。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.zhihu.com/question/350289336/answer/910970733",rel:"noopener noreferrer",target:"_blank",children:"一年内的前端看不懂前端框架源码怎么办？"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"简而言之，看源码"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"循序渐进\n借助调试\n理清主线\n查阅资料\n总结记录\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"2-使用",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-使用",children:"#"}),"2. 使用"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import remoteGitTags from 'remote-git-tags';\n\nconsole.log(await remoteGitTags('https://github.com/ruochuan12/blog.git'));\n//=> Map {'3.0.5' => 'c39343e7e81d898150191d744efbdfe6df395119', …}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"3-源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-源码",children:"#"}),"3. 源码"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Get tags from a remote Git repo"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个库的作用是：从远程仓库获取所有标签。"}),"\n",(0,s.jsxs)(n.p,{children:["原理：通过执行 ",(0,s.jsx)(n.code,{children:"git ls-remote --tags repoUrl"})," （仓库路径）获取 ",(0,s.jsx)(n.code,{children:"tags"})]}),"\n",(0,s.jsxs)(n.p,{children:["应用场景：可以看有哪些包依赖的这个包。\n",(0,s.jsx)(n.a,{href:"https://npm.im/remote-git-tags",rel:"noopener noreferrer",target:"_blank",children:"npm 包描述信息"})]}),"\n",(0,s.jsxs)(n.p,{children:["其中一个比较熟悉的是",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/npm-check-updates",rel:"noopener noreferrer",target:"_blank",children:"npm-check-updates"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"npm-check-updates 将您的 package.json 依赖项升级到最新版本，忽略指定的版本。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["还有场景可能是 ",(0,s.jsx)(n.code,{children:"github"})," 中获取所有 ",(0,s.jsx)(n.code,{children:"tags"})," 信息，切换 ",(0,s.jsx)(n.code,{children:"tags"})," 或者选定 ",(0,s.jsx)(n.code,{children:"tags"})," 发布版本等，比如微信小程序版本。"]}),"\n",(0,s.jsxs)(n.p,{children:["看源码前先看 ",(0,s.jsx)(n.code,{children:"package.json"})," 文件。"]}),"\n",(0,s.jsxs)(n.h3,{id:"31-packagejson",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-packagejson",children:"#"}),"3.1 package.json"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// package.json\n{\n  // 指定 Node 以什么模块加载，缺省时默认是 commonjs\n	"type": "module",\n	"exports": "./index.js",\n  // 指定 nodejs 的版本\n	"engines": {\n		"node": "^12.20.0 || ^14.13.1 || >=16.0.0"\n	},\n	"scripts": {\n		"test": "xo && ava"\n	}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["众所周知，",(0,s.jsx)(n.code,{children:"Node"})," 之前一直是 ",(0,s.jsx)(n.code,{children:"CommonJS"})," 模块机制。 ",(0,s.jsx)(n.code,{children:"Node 13"})," 添加了对标准 ",(0,s.jsx)(n.code,{children:"ES6"})," 模块的支持。"]}),"\n",(0,s.jsxs)(n.p,{children:["告诉 ",(0,s.jsx)(n.code,{children:"Node"})," 它要加载的是什么模块的最简单的方式，就是将信息编码到不同的扩展名中。\n如果是 ",(0,s.jsx)(n.code,{children:".mjs"})," 结尾的文件，则 ",(0,s.jsx)(n.code,{children:"Node"})," 始终会将它作为 ",(0,s.jsx)(n.code,{children:"ES6"})," 模块来加载。\n如果是 ",(0,s.jsx)(n.code,{children:".cjs"})," 结尾的文件，则 ",(0,s.jsx)(n.code,{children:"Node"})," 始终会将它作为 ",(0,s.jsx)(n.code,{children:"CommonJS"})," 模块来加载。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于以 ",(0,s.jsx)(n.code,{children:".js"})," 结尾的文件，默认是 ",(0,s.jsx)(n.code,{children:"CommonJS"})," 模块。如果同级目录及所有目录有 ",(0,s.jsx)(n.code,{children:"package.json"})," 文件，且 ",(0,s.jsx)(n.code,{children:"type"})," 属性为",(0,s.jsx)(n.code,{children:"module"})," 则使用 ",(0,s.jsx)(n.code,{children:"ES6"})," 模块。",(0,s.jsx)(n.code,{children:"type"})," 值为 ",(0,s.jsx)(n.code,{children:"commonjs"})," 或者为空或者没有 ",(0,s.jsx)(n.code,{children:"package.json"})," 文件，都是默认 ",(0,s.jsx)(n.code,{children:"commonjs"})," 模块加载。"]}),"\n",(0,s.jsxs)(n.p,{children:["关于 ",(0,s.jsx)(n.code,{children:"Node"})," 模块加载方式，在《JavaScript权威指南第7版》16.1.4 Node 模块 小节，有更加详细的讲述。此书第16章都是讲述",(0,s.jsx)(n.code,{children:"Node"}),"，感兴趣的读者可以进行查阅。"]}),"\n",(0,s.jsxs)(n.h3,{id:"32-调试源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-调试源码",children:"#"}),"3.2 调试源码"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 推荐克隆我的项目，保证与文章同步，同时测试文件齐全\ngit clone https://github.com/ruochuan12/remote-git-tags-analysis.git\n# npm i -g yarn\ncd remote-git-tags && yarn\n# VSCode 直接打开当前项目\n# code .\n\n# 或者克隆官方项目\ngit clone https://github.com/sindresorhus/remote-git-tags.git\n# npm i -g yarn\ncd remote-git-tags && yarn\n# VSCode 直接打开当前项目\n# code .\n"})}),"\n",(0,s.jsxs)(n.p,{children:["用最新的",(0,s.jsx)(n.code,{children:"VSCode"})," 打开项目，找到 ",(0,s.jsx)(n.code,{children:"package.json"})," 的 ",(0,s.jsx)(n.code,{children:"scripts"})," 属性中的 ",(0,s.jsx)(n.code,{children:"test"})," 命令。鼠标停留在",(0,s.jsx)(n.code,{children:"test"}),"命令上，会出现 ",(0,s.jsx)(n.code,{children:"运行命令"})," 和 ",(0,s.jsx)(n.code,{children:"调试命令"})," 的选项，选择 ",(0,s.jsx)(n.code,{children:"调试命令"})," 即可。"]}),"\n",(0,s.jsx)(n.p,{children:"调试如图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"调试如图所示",src:o})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"VSCode"})," 调试 ",(0,s.jsx)(n.code,{children:"Node.js"})," 说明如下图所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"VSCode 调试 Node.js 说明",src:d})}),"\n",(0,s.jsx)(n.p,{children:"跟着调试，我们来看主文件。"}),"\n",(0,s.jsxs)(n.h3,{id:"33-主文件仅有22行源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-主文件仅有22行源码",children:"#"}),"3.3 主文件仅有22行源码"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// index.js\nimport {promisify} from 'node:util';\nimport childProcess from 'node:child_process';\n\nconst execFile = promisify(childProcess.execFile);\n\nexport default async function remoteGitTags(repoUrl) {\n	const {stdout} = await execFile('git', ['ls-remote', '--tags', repoUrl]);\n	const tags = new Map();\n\n	for (const line of stdout.trim().split('\\n')) {\n		const [hash, tagReference] = line.split('\\t');\n\n		// Strip off the indicator of dereferenced tags so we can override the\n		// previous entry which points at the tag hash and not the commit hash\n		// `refs/tags/v9.6.0^{}` → `v9.6.0`\n		const tagName = tagReference.replace(/^refs\\/tags\\//, '').replace(/\\^{}$/, '');\n\n		tags.set(tagName, hash);\n	}\n\n	return tags;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"源码其实一眼看下来就很容易懂。"}),"\n",(0,s.jsxs)(n.h3,{id:"34-git-ls-remote---tags",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-git-ls-remote---tags",children:"#"}),"3.4 git ls-remote --tags"]}),"\n",(0,s.jsx)(n.p,{children:"支持远程仓库链接。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://git-scm.com/docs/git-ls-remote",rel:"noopener noreferrer",target:"_blank",children:"git ls-remote 文档"})}),"\n",(0,s.jsx)(n.p,{children:"如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"ls-remote",src:t})}),"\n",(0,s.jsxs)(n.p,{children:["获取所有",(0,s.jsx)(n.code,{children:"tags"})," ",(0,s.jsx)(n.code,{children:"git ls-remote --tags https://github.com/vuejs/vue-next.git"})]}),"\n",(0,s.jsxs)(n.p,{children:["把所有 ",(0,s.jsx)(n.code,{children:"tags"})," 和对应的 ",(0,s.jsx)(n.code,{children:"hash"}),"值 存在 ",(0,s.jsx)(n.code,{children:"Map"})," 对象中。"]}),"\n",(0,s.jsxs)(n.h3,{id:"35-nodeutil",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-nodeutil",children:"#"}),"3.5 node:util"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v16.x/docs/api/modules.html",rel:"noopener noreferrer",target:"_blank",children:"Node 文档"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Core modules can also be identified using the node: prefix, in which case it bypasses the require cache. For instance, require('node:http') will always return the built in HTTP module, even if there is require.cache entry by that name."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是说引用 ",(0,s.jsx)(n.code,{children:"node"})," 原生库可以加 ",(0,s.jsx)(n.code,{children:"node:"})," 前缀，比如 ",(0,s.jsx)(n.code,{children:"import util from 'node:util'"})]}),"\n",(0,s.jsxs)(n.p,{children:["看到这，其实原理就明白了。毕竟只有22行代码。接着讲述 ",(0,s.jsx)(n.code,{children:"promisify"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"4-promisify",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-promisify",children:"#"}),"4. promisify"]}),"\n",(0,s.jsx)(n.p,{children:"源码中有一段："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const execFile = promisify(childProcess.execFile);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"promisify"})," 可能有的读者不是很了解。"]}),"\n",(0,s.jsx)(n.p,{children:"接下来重点讲述下这个函数的实现。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"promisify"}),"函数是把 ",(0,s.jsx)(n.code,{children:"callback"})," 形式转成 ",(0,s.jsx)(n.code,{children:"promise"})," 形式。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道 ",(0,s.jsx)(n.code,{children:"Node.js"})," ",(0,s.jsx)(n.code,{children:"天生异步"}),"，错误回调的形式书写代码。回调函数的第一个参数是错误信息。也就是错误优先。"]}),"\n",(0,s.jsx)(n.p,{children:"我们换个简单的场景来看。"}),"\n",(0,s.jsxs)(n.h3,{id:"41-简单实现",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-简单实现",children:"#"}),"4.1 简单实现"]}),"\n",(0,s.jsxs)(n.p,{children:["假设我们有个用JS加载图片的需求。我们从 ",(0,s.jsx)(n.a,{href:"https://www.themealdb.com/api.php",rel:"noopener noreferrer",target:"_blank",children:"这个网站"})," 找来图片。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"examples\nconst imageSrc = 'https://www.themealdb.com/images/ingredients/Lime.png';\n\nfunction loadImage(src, callback) {\n    const image = document.createElement('img');\n    image.src = src;\n    image.alt = '公众号若川视野专用图？';\n    image.style = 'width: 200px;height: 200px';\n    image.onload = () => callback(null, image);\n    image.onerror = () => callback(new Error('加载失败'));\n    document.body.append(image);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们很容易写出上面的代码，也很容易写出回调函数的代码。需求搞定。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"loadImage(imageSrc, function(err, content){\n  if(err){\n    console.log(err);\n    return;\n  }\n  console.log(content);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但是回调函数有回调地狱等问题，我们接着用 ",(0,s.jsx)(n.code,{children:"promise"})," 来优化下。"]}),"\n",(0,s.jsxs)(n.h3,{id:"42-promise-初步优化",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-promise-初步优化",children:"#"}),"4.2 promise 初步优化"]}),"\n",(0,s.jsx)(n.p,{children:"我们也很容易写出如下代码实现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const loadImagePromise = function(src){\n    return new Promise(function(resolve, reject){\n        loadImage(src, function (err, image) {\n            if(err){\n                reject(err);\n                return;\n            }\n            resolve(image);\n        });\n    });\n};\nloadImagePromise(imageSrc).then(res => {\n    console.log(res);\n})\n.catch(err => {\n    console.log(err);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但这个不通用。我们需要封装一个比较通用的 ",(0,s.jsx)(n.code,{children:"promisify"})," 函数。"]}),"\n",(0,s.jsxs)(n.h3,{id:"43-通用-promisify-函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-通用-promisify-函数",children:"#"}),"4.3 通用 promisify 函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function promisify(original){\n    function fn(...args){\n        return new Promise((resolve, reject) => {\n            args.push((err, ...values) => {\n                if(err){\n                    return reject(err);\n                }\n                resolve(values);\n            });\n            // original.apply(this, args);\n            Reflect.apply(original, this, args);\n        });\n    }\n    return fn;\n}\n\nconst loadImagePromise = promisify(loadImage);\nasync function load(){\n    try{\n        const res = await loadImagePromise(imageSrc);\n        console.log(res);\n    }\n    catch(err){\n        console.log(err);\n    }\n}\nload();\n"})}),"\n",(0,s.jsx)(n.p,{children:"需求搞定。这时就比较通用了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["这些例子在我的仓库存放在 ",(0,s.jsx)(n.code,{children:"examples"})," 文件夹中。可以克隆下来，",(0,s.jsx)(n.code,{children:"npx http-server ."}),"跑服务，运行试试。"]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"examples",src:l})}),"\n",(0,s.jsxs)(n.p,{children:["跑失败的结果可以把 ",(0,s.jsx)(n.code,{children:"imageSrc"})," 改成不存在的图片即可。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"promisify"})," 可以说是面试高频考点。很多面试官喜欢考此题。"]}),"\n",(0,s.jsxs)(n.p,{children:["接着我们来看 ",(0,s.jsx)(n.code,{children:"Node.js"})," 源码中 ",(0,s.jsx)(n.code,{children:"promisify"})," 的实现。"]}),"\n",(0,s.jsxs)(n.h3,{id:"44-node-utils-promisify-源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-node-utils-promisify-源码",children:"#"}),"4.4 Node utils promisify 源码"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github1s.com/nodejs/node/blob/master/lib/internal/util.js#L343",rel:"noopener noreferrer",target:"_blank",children:"github1s node utils 源码"})}),"\n",(0,s.jsx)(n.p,{children:"源码就暂时不做过多解释，可以查阅文档。结合前面的例子，其实也容易理解。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"http://nodejs.cn/api/util/util_promisify_original.html",rel:"noopener noreferrer",target:"_blank",children:"utils promisify 文档"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\n\nlet validateFunction;\n\nfunction promisify(original) {\n  // Lazy-load to avoid a circular dependency.\n  if (validateFunction === undefined)\n    ({ validateFunction } = require('internal/validators'));\n\n  validateFunction(original, 'original');\n\n  if (original[kCustomPromisifiedSymbol]) {\n    const fn = original[kCustomPromisifiedSymbol];\n\n    validateFunction(fn, 'util.promisify.custom');\n\n    return ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n  }\n\n  // Names to create an object from in case the callback receives multiple\n  // arguments, e.g. ['bytesRead', 'buffer'] for fs.read.\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\n\n  function fn(...args) {\n    return new Promise((resolve, reject) => {\n      ArrayPrototypePush(args, (err, ...values) => {\n        if (err) {\n          return reject(err);\n        }\n        if (argumentNames !== undefined && values.length > 1) {\n          const obj = {};\n          for (let i = 0; i < argumentNames.length; i++)\n            obj[argumentNames[i]] = values[i];\n          resolve(obj);\n        } else {\n          resolve(values[0]);\n        }\n      });\n      ReflectApply(original, this, args);\n    });\n  }\n\n  ObjectSetPrototypeOf(fn, ObjectGetPrototypeOf(original));\n\n  ObjectDefineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return ObjectDefineProperties(\n    fn,\n    ObjectGetOwnPropertyDescriptors(original)\n  );\n}\n\npromisify.custom = kCustomPromisifiedSymbol;\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"5-es6-等知识",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-es6-等知识",children:"#"}),"5. ES6+ 等知识"]}),"\n",(0,s.jsxs)(n.p,{children:["文中涉及到了",(0,s.jsx)(n.code,{children:"Map"}),"、",(0,s.jsx)(n.code,{children:"for of"}),"、正则、解构赋值。"]}),"\n",(0,s.jsxs)(n.p,{children:["还有涉及封装的 ",(0,s.jsx)(n.code,{children:"ReflectApply"}),"、",(0,s.jsx)(n.code,{children:"ObjectSetPrototypeOf"}),"、",(0,s.jsx)(n.code,{children:"ObjectDefineProperty"}),"、",(0,s.jsx)(n.code,{children:"ObjectGetOwnPropertyDescriptors"})," 等函数都是基础知识。"]}),"\n",(0,s.jsxs)(n.p,{children:["这些知识可以查看",(0,s.jsx)(n.a,{href:"https://yanhaijing.com/es5/",rel:"noopener noreferrer",target:"_blank",children:"esma规范"}),"，或者阮一峰老师的",(0,s.jsx)(n.a,{href:"https://es6.ruanyifeng.com/",rel:"noopener noreferrer",target:"_blank",children:"《ES6 入门教程》"})," 等书籍。"]}),"\n",(0,s.jsxs)(n.h2,{id:"6-总结",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-总结",children:"#"}),"6. 总结"]}),"\n",(0,s.jsxs)(n.p,{children:["一句话简述 ",(0,s.jsx)(n.code,{children:"remote-git-tags"})," 原理：使用",(0,s.jsx)(n.code,{children:"Node.js"}),"的子进程 ",(0,s.jsx)(n.code,{children:"child_process"})," 模块的",(0,s.jsx)(n.code,{children:"execFile"}),"方法执行 ",(0,s.jsx)(n.code,{children:"git ls-remote --tags repoUrl"})," 获取所有 ",(0,s.jsx)(n.code,{children:"tags"})," 和 ",(0,s.jsx)(n.code,{children:"tags"})," 对应 ",(0,s.jsx)(n.code,{children:"hash"})," 值 存放在 ",(0,s.jsx)(n.code,{children:"Map"})," 对象中。"]}),"\n",(0,s.jsx)(n.p,{children:"文中讲述了我们可以循序渐进，借助调试、理清主线、查阅资料、总结记录的流程看源码。"}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"remote-git-tags"})," 这个22行代码的仓库，学会了 Node 加载采用什么模块，知道了原来 ",(0,s.jsx)(n.code,{children:"git ls-remote --tags"}),"支持远程仓库，学到了面试高频考点 ",(0,s.jsx)(n.code,{children:"promisify"})," 函数原理和源码实现，巩固了一些 ",(0,s.jsx)(n.code,{children:"ES6+"})," 等基础知识。"]}),"\n",(0,s.jsxs)(n.p,{children:["建议读者克隆",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/remote-git-tags-analysis.git",rel:"noopener noreferrer",target:"_blank",children:"我的仓库"}),"动手实践调试源码学习。"]}),"\n",(0,s.jsxs)(n.p,{children:["后续也可以看看 ",(0,s.jsx)(n.a,{href:"https://github.com/mikehall314/es6-promisify",rel:"noopener noreferrer",target:"_blank",children:"es6-promisify"})," 这个库的实现。"]}),"\n",(0,s.jsxs)(n.p,{children:["最后可以持续关注我@若川。欢迎加我微信 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"})," 交流，参与 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"源码共读"})," 活动，大家一起学习源码，共同进步。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}let j=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["promisify%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-使用",text:"2. 使用",depth:2},{id:"3-源码",text:"3. 源码",depth:2},{id:"31-packagejson",text:"3.1 package.json",depth:3},{id:"32-调试源码",text:"3.2 调试源码",depth:3},{id:"33-主文件仅有22行源码",text:"3.3 主文件仅有22行源码",depth:3},{id:"34-git-ls-remote---tags",text:"3.4 git ls-remote --tags",depth:3},{id:"35-nodeutil",text:"3.5 node:util",depth:3},{id:"4-promisify",text:"4. promisify",depth:2},{id:"41-简单实现",text:"4.1 简单实现",depth:3},{id:"42-promise-初步优化",text:"4.2 promise 初步优化",depth:3},{id:"43-通用-promisify-函数",text:"4.3 通用 promisify 函数",depth:3},{id:"44-node-utils-promisify-源码",text:"4.4 Node utils promisify 源码",depth:3},{id:"5-es6-等知识",text:"5. ES6+ 等知识",depth:2},{id:"6-总结",text:"6. 总结",depth:2}],title:"从22行有趣的源码库中，我学到了 callback promisify 化的 Node.js 源码实现",headingTitle:"从22行有趣的源码库中，我学到了 callback promisify 化的 Node.js 源码实现",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(e,n,r){r.d(n,{Z:()=>t});var s=r(52676),i=r(75271),c=r(92815);r(18544);let o={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,r){let s=Object.keys(o).includes(n)?n:r;return o[s](e)}let t=e=>{let{defaultLocale:n="en-US"}=e,r=(0,c.Vi)().page.readingTimeData,o=(0,c.Jr)(),t=(0,c.e7)(),[l,a]=(0,i.useState)(d(r,o,n));return(0,i.useEffect)(()=>{a(d(r,o,n))},[o,r]),(0,s.jsx)("span",{"data-dark":String(t),className:"rp-reading-time",children:l})}}}]);