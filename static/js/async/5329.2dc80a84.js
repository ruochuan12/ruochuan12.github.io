"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["5329"],{98861:function(e,n,s){s.r(n),s.d(n,{default:()=>j});var r=s(52676),c=s(40453),i=s(20713);let d=s.p+"static/image/scripts-test-debugger.7b029d77.png",o=s.p+"static/image/jest-ternimal.abd5e7b3.png",t=s.p+"static/image/test-compose-debugger.f68f0e8d.png",a=s.p+"static/image/middleware.3d360c9b.gif",l=s.p+"static/image/middleware.246d4a8c.png";function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",code:"code",pre:"pre",h3:"h3",img:"img",ul:"ul",li:"li",ol:"ol",h4:"h4",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"50行代码串行promisekoa洋葱模型原来是这么实现",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#50行代码串行promisekoa洋葱模型原来是这么实现",children:"#"}),"50行代码串行Promise，koa洋葱模型原来是这么实现？"]}),"\n",(0,r.jsx)(i.Z,{defaultLocale:"zh-CN"}),"\n",(0,r.jsxs)(n.h2,{id:"1-前言",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,r.jsxs)(n.p,{children:["大家好，我是",(0,r.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。欢迎关注我的",(0,r.jsx)(n.a,{href:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/13/16efe57ddc7c9eb3~tplv-t2oaga2asx-image.image",title:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/13/16efe57ddc7c9eb3~tplv-t2oaga2asx-image.image",rel:"noopener noreferrer",target:"_blank",children:"公众号若川视野"}),"，最近组织了",(0,r.jsxs)(n.a,{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650756550&idx=1&sn=9acc5e30325963e455f53ec2f64c1fdd&chksm=8866564abf11df5c41307dba3eb84e8e14de900e1b3500aaebe802aff05b0ba2c24e4690516b&token=917686367&lang=zh_CN#rd",rel:"noopener noreferrer",target:"_blank",children:[(0,r.jsx)(n.strong,{children:"源码共读活动"}),"《1个月，200+人，一起读了4周源码》"]}),"，感兴趣的可以加我微信 ",(0,r.jsx)(n.a,{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650756550&idx=1&sn=9acc5e30325963e455f53ec2f64c1fdd&chksm=8866564abf11df5c41307dba3eb84e8e14de900e1b3500aaebe802aff05b0ba2c24e4690516b&token=917686367&lang=zh_CN#rd",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"})," 参与，长期交流学习。"]}),"\n",(0,r.jsxs)(n.p,{children:["之前写的",(0,r.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"})," 包含",(0,r.jsx)(n.code,{children:"jQuery"}),"、",(0,r.jsx)(n.code,{children:"underscore"}),"、",(0,r.jsx)(n.code,{children:"lodash"}),"、",(0,r.jsx)(n.code,{children:"vuex"}),"、",(0,r.jsx)(n.code,{children:"sentry"}),"、",(0,r.jsx)(n.code,{children:"axios"}),"、",(0,r.jsx)(n.code,{children:"redux"}),"、",(0,r.jsx)(n.code,{children:"koa"}),"、",(0,r.jsx)(n.code,{children:"vue-devtools"}),"、",(0,r.jsx)(n.code,{children:"vuex4"}),"十余篇源码文章。其中最新的两篇是："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://juejin.cn/post/6997943192851054606",rel:"noopener noreferrer",target:"_blank",children:"Vue 3.2 发布了，那尤雨溪是怎么发布 Vue.js 的？"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://juejin.cn/post/6994976281053888519",rel:"noopener noreferrer",target:"_blank",children:"初学者也能看懂的 Vue3 源码中那些实用的基础工具函数"})}),"\n",(0,r.jsx)(n.p,{children:"写相对很难的源码，耗费了自己的时间和精力，也没收获多少阅读点赞，其实是一件挺受打击的事情。从阅读量和读者受益方面来看，不能促进作者持续输出文章。"}),"\n",(0,r.jsxs)(n.p,{children:["所以转变思路，写一些相对通俗易懂的文章。",(0,r.jsx)(n.strong,{children:"其实源码也不是想象的那么难，至少有很多看得懂"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["之前写过 koa 源码文章",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/6844904088220467213",rel:"noopener noreferrer",target:"_blank",children:"学习 koa 源码的整体架构，浅析koa洋葱模型原理和co原理"}),"比较长，读者朋友大概率看不完，所以本文从",(0,r.jsx)(n.code,{children:"koa-compose"}),"50行源码讲述。"]}),"\n",(0,r.jsxs)(n.p,{children:["本文涉及到的 ",(0,r.jsx)(n.a,{href:"https://github.com/koajs/compose",rel:"noopener noreferrer",target:"_blank",children:"koa-compose 仓库"})," 文件，整个",(0,r.jsx)(n.code,{children:"index.js"}),"文件代码行数虽然不到 ",(0,r.jsx)(n.code,{children:"50"})," 行，而且测试用例",(0,r.jsx)(n.code,{children:"test/test.js"}),"文件 ",(0,r.jsx)(n.code,{children:"300"})," 余行，但非常值得我们学习。"]}),"\n",(0,r.jsx)(n.p,{children:"歌德曾说：读一本好书，就是在和高尚的人谈话。 同理可得：读源码，也算是和作者的一种学习交流的方式。"}),"\n",(0,r.jsx)(n.p,{children:"阅读本文，你将学到："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"1. 熟悉 koa-compose 中间件源码、可以应对面试官相关问题\n2. 学会使用测试用例调试源码\n3. 学会 jest 部分用法\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"2-环境准备",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-环境准备",children:"#"}),"2. 环境准备"]}),"\n",(0,r.jsxs)(n.h3,{id:"21-克隆-koa-compose-项目",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-克隆-koa-compose-项目",children:"#"}),"2.1 克隆 koa-compose 项目"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/ruochuan12/koa-compose-analysis.git",rel:"noopener noreferrer",target:"_blank",children:"本文仓库地址 koa-compose-analysis"}),"，求个",(0,r.jsx)(n.code,{children:"star"}),"~"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 可以直接克隆我的仓库，我的仓库保留的 compose 仓库的 git 记录\ngit clone https://github.com/ruochuan12/koa-compose-analysis.git\ncd koa-compose/compose\nnpm i\n"})}),"\n",(0,r.jsxs)(n.p,{children:["顺带说下：我是怎么保留 ",(0,r.jsx)(n.code,{children:"compose"})," 仓库的 ",(0,r.jsx)(n.code,{children:"git"})," 记录的。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 在 github 上新建一个仓库 `koa-compose-analysis` 克隆下来\ngit clone https://github.com/ruochuan12/koa-compose-analysis.git\ncd koa-compose-analysis\ngit subtree add --prefix=compose https://github.com/koajs/compose.git main\n# 这样就把 compose 文件夹克隆到自己的 git 仓库了。且保留的 git 记录\n"})}),"\n",(0,r.jsxs)(n.p,{children:["关于更多 ",(0,r.jsx)(n.code,{children:"git subtree"}),"，可以看这篇文章",(0,r.jsx)(n.a,{href:"https://segmentfault.com/a/1190000003969060",rel:"noopener noreferrer",target:"_blank",children:"用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册"})]}),"\n",(0,r.jsx)(n.p,{children:"接着我们来看怎么根据开源项目中提供的测试用例调试源码。"}),"\n",(0,r.jsxs)(n.h3,{id:"22-根据测试用例调试-compose-源码",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-根据测试用例调试-compose-源码",children:"#"}),"2.2 根据测试用例调试 compose 源码"]}),"\n",(0,r.jsxs)(n.p,{children:["用",(0,r.jsx)(n.code,{children:"VSCode"}),"（我的版本是 ",(0,r.jsx)(n.code,{children:"1.60"})," ）打开项目，找到 ",(0,r.jsx)(n.code,{children:"compose/package.json"}),"，找到 ",(0,r.jsx)(n.code,{children:"scripts"})," 和 ",(0,r.jsx)(n.code,{children:"test"})," 命令。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// compose/package.json\n{\n    "name": "koa-compose",\n    // debug （调试）\n    "scripts": {\n        "eslint": "standard --fix .",\n        "test": "jest"\n    },\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.code,{children:"scripts"}),"上方应该会有",(0,r.jsx)(n.code,{children:"debug"}),"或者",(0,r.jsx)(n.code,{children:"调试"}),"字样。点击",(0,r.jsx)(n.code,{children:"debug"}),"(调试)，选择 ",(0,r.jsx)(n.code,{children:"test"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"VSCode 调试",src:d})}),"\n",(0,r.jsxs)(n.p,{children:["接着会执行测试用例",(0,r.jsx)(n.code,{children:"test/test.js"}),"文件。终端输出如下图所示。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"koa-compose 测试用例输出结果",src:o})}),"\n",(0,r.jsxs)(n.p,{children:["接着我们调试 ",(0,r.jsx)(n.code,{children:"compose/test/test.js"})," 文件。\n我们可以在 ",(0,r.jsx)(n.code,{children:"45行"})," 打上断点，重新点击 ",(0,r.jsx)(n.code,{children:"package.json"})," => ",(0,r.jsx)(n.code,{children:"srcipts"})," => ",(0,r.jsx)(n.code,{children:"test"})," 进入调试模式。\n如下图所示。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"koa-compose 调试",src:t})}),"\n",(0,r.jsxs)(n.p,{children:["接着按上方的按钮，继续调试。在",(0,r.jsx)(n.code,{children:"compose/index.js"}),"文件中关键的地方打上断点，调试学习源码事半功倍。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging",rel:"noopener noreferrer",target:"_blank",children:"更多 nodejs 调试相关 可以查看官方文档"})}),"\n",(0,r.jsx)(n.p,{children:"顺便详细解释下几个调试相关按钮。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["单步调试（F11）：点击后进入到当前函数的内部调试，比如在 ",(0,r.jsx)(n.code,{children:"compose"})," 这一行中执行单步调试，会进入到 ",(0,r.jsx)(n.code,{children:"compose"})," 函数内部进行调试。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"重启（Ctrl + Shift + F5）：顾名思义。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"断开链接（Shift + F5）：顾名思义。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来，我们跟着测试用例学源码。"}),"\n",(0,r.jsxs)(n.h2,{id:"3-跟着测试用例学源码",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-跟着测试用例学源码",children:"#"}),"3. 跟着测试用例学源码"]}),"\n",(0,r.jsxs)(n.p,{children:["分享一个测试用例小技巧：我们可以在测试用例处加上",(0,r.jsx)(n.code,{children:"only"}),"修饰。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 例如\nit.only('should work', async () => {})\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样我们就可以只执行当前的测试用例，不关心其他的，不会干扰调试。"}),"\n",(0,r.jsxs)(n.h3,{id:"31-正常流程",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-正常流程",children:"#"}),"3.1 正常流程"]}),"\n",(0,r.jsxs)(n.p,{children:["打开 ",(0,r.jsx)(n.code,{children:"compose/test/test.js"})," 文件，看第一个测试用例。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// compose/test/test.js\n'use strict'\n\n/* eslint-env jest */\n\nconst compose = require('..')\nconst assert = require('assert')\n\nfunction wait (ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms || 1))\n}\n// 分组\ndescribe('Koa Compose', function () {\n  it.only('should work', async () => {\n    const arr = []\n    const stack = []\n\n    stack.push(async (context, next) => {\n      arr.push(1)\n      await wait(1)\n      await next()\n      await wait(1)\n      arr.push(6)\n    })\n\n    stack.push(async (context, next) => {\n      arr.push(2)\n      await wait(1)\n      await next()\n      await wait(1)\n      arr.push(5)\n    })\n\n    stack.push(async (context, next) => {\n      arr.push(3)\n      await wait(1)\n      await next()\n      await wait(1)\n      arr.push(4)\n    })\n\n    await compose(stack)({})\n    // 最后输出数组是 [1,2,3,4,5,6]\n    expect(arr).toEqual(expect.arrayContaining([1, 2, 3, 4, 5, 6]))\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["大概看完这段测试用例，",(0,r.jsx)(n.code,{children:"context"}),"是什么，",(0,r.jsx)(n.code,{children:"next"}),"又是什么。"]}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsxs)(n.a,{href:"https://github.com/koajs/koa/blob/master/docs/guide.md#writing-middleware",rel:"noopener noreferrer",target:"_blank",children:[(0,r.jsx)(n.code,{children:"koa"}),"的文档"]}),"上有个非常代表性的中间件 ",(0,r.jsx)(n.code,{children:"gif"})," 图。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"中间件 gif 图",src:a})}),"\n",(0,r.jsxs)(n.p,{children:["而",(0,r.jsx)(n.code,{children:"compose"}),"函数作用就是把添加进中间件数组的函数按照上面 ",(0,r.jsx)(n.code,{children:"gif"})," 图的顺序执行。"]}),"\n",(0,r.jsxs)(n.h4,{id:"311-compose-函数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#311-compose-函数",children:"#"}),"3.1.1 compose 函数"]}),"\n",(0,r.jsxs)(n.p,{children:["简单来说，",(0,r.jsx)(n.code,{children:"compose"})," 函数主要做了两件事情。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"接收一个参数，校验参数是数组，且校验数组中的每一项是函数。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["返回一个函数，这个函数接收两个参数，分别是",(0,r.jsx)(n.code,{children:"context"}),"和",(0,r.jsx)(n.code,{children:"next"}),"，这个函数最后返回",(0,r.jsx)(n.code,{children:"Promise"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\nfunction compose (middleware) {\n  // 校验传入的参数是数组，校验数组中每一项是函数\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch(i){\n      // 省略，下文讲述\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["接着我们来看 ",(0,r.jsx)(n.code,{children:"dispatch"})," 函数。"]}),"\n",(0,r.jsxs)(n.h4,{id:"312-dispatch-函数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#312-dispatch-函数",children:"#"}),"3.1.2 dispatch 函数"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function dispatch (i) {\n  // 一个函数中多次调用报错\n  // await next()\n  // await next()\n  if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n  index = i\n  // 取出数组里的 fn1, fn2, fn3...\n  let fn = middleware[i]\n  // 最后 相等，next 为 undefined\n  if (i === middleware.length) fn = next\n  // 直接返回 Promise.resolve()\n  if (!fn) return Promise.resolve()\n  try {\n    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)))\n  } catch (err) {\n    return Promise.reject(err)\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["值得一提的是：",(0,r.jsx)(n.code,{children:"bind"}),"函数是返回一个新的函数。第一个参数是函数里的this指向（如果函数不需要使用",(0,r.jsx)(n.code,{children:"this"}),"，一般会写成",(0,r.jsx)(n.code,{children:"null"}),"）。\n这句",(0,r.jsx)(n.code,{children:"fn(context, dispatch.bind(null, i + 1)"}),"，",(0,r.jsx)(n.code,{children:"i + 1"})," 是为了 ",(0,r.jsx)(n.code,{children:"let fn = middleware[i]"})," 取",(0,r.jsx)(n.code,{children:"middleware"}),"中的下一个函数。\n也就是 ",(0,r.jsx)(n.code,{children:"next"})," 是下一个中间件里的函数。也就能解释上文中的 ",(0,r.jsx)(n.code,{children:"gif"}),"图函数执行顺序。\n测试用例中数组的最终顺序是",(0,r.jsx)(n.code,{children:"[1,2,3,4,5,6]"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"313-简化-compose-便于理解",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#313-简化-compose-便于理解",children:"#"}),"3.1.3 简化 compose 便于理解"]}),"\n",(0,r.jsxs)(n.p,{children:["自己动手调试之后，你会发现 ",(0,r.jsx)(n.code,{children:"compose"})," 执行后就是类似这样的结构（省略 ",(0,r.jsx)(n.code,{children:"try catch"})," 判断）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 这样就可能更好理解了。\n// simpleKoaCompose\nconst [fn1, fn2, fn3] = stack;\nconst fnMiddleware = function(context){\n    return Promise.resolve(\n      fn1(context, function next(){\n        return Promise.resolve(\n          fn2(context, function next(){\n              return Promise.resolve(\n                  fn3(context, function next(){\n                    return Promise.resolve();\n                  })\n              )\n          })\n        )\n    })\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["也就是说",(0,r.jsx)(n.code,{children:"koa-compose"}),"返回的是一个",(0,r.jsx)(n.code,{children:"Promise"}),"，从",(0,r.jsx)(n.code,{children:"中间件（传入的数组）"}),"中取出第一个函数，传入",(0,r.jsx)(n.code,{children:"context"}),"和第一个",(0,r.jsx)(n.code,{children:"next"}),"函数来执行。","\n第一个",(0,r.jsx)(n.code,{children:"next"}),"函数里也是返回的是一个",(0,r.jsx)(n.code,{children:"Promise"}),"，从",(0,r.jsx)(n.code,{children:"中间件（传入的数组）"}),"中取出第二个函数，传入",(0,r.jsx)(n.code,{children:"context"}),"和第二个",(0,r.jsx)(n.code,{children:"next"}),"函数来执行。","\n第二个",(0,r.jsx)(n.code,{children:"next"}),"函数里也是返回的是一个",(0,r.jsx)(n.code,{children:"Promise"}),"，从",(0,r.jsx)(n.code,{children:"中间件（传入的数组）"}),"中取出第三个函数，传入",(0,r.jsx)(n.code,{children:"context"}),"和第三个",(0,r.jsx)(n.code,{children:"next"}),"函数来执行。","\n第三个...","\n以此类推。最后一个中间件中有调用",(0,r.jsx)(n.code,{children:"next"}),"函数，则返回",(0,r.jsx)(n.code,{children:"Promise.resolve"}),"。如果没有，则不执行",(0,r.jsx)(n.code,{children:"next"}),"函数。\n这样就把所有中间件串联起来了。这也就是我们常说的洋葱模型。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"洋葱模型图如下图所示：",src:l})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"不得不说非常惊艳，“玩还是大神会玩”"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"32-错误捕获",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-错误捕获",children:"#"}),"3.2 错误捕获"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"it('should catch downstream errors', async () => {\n  const arr = []\n  const stack = []\n\n  stack.push(async (ctx, next) => {\n    arr.push(1)\n    try {\n      arr.push(6)\n      await next()\n      arr.push(7)\n    } catch (err) {\n      arr.push(2)\n    }\n    arr.push(3)\n  })\n\n  stack.push(async (ctx, next) => {\n    arr.push(4)\n    throw new Error()\n  })\n\n  await compose(stack)({})\n  // 输出顺序 是 [ 1, 6, 4, 2, 3 ]\n  expect(arr).toEqual([1, 6, 4, 2, 3])\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["相信理解了第一个测试用例和 ",(0,r.jsx)(n.code,{children:"compose"})," 函数，也是比较好理解这个测试用例了。这一部分其实就是对应的代码在这里。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"try {\n    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)))\n} catch (err) {\n  return Promise.reject(err)\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"33-next-函数不能调用多次",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-next-函数不能调用多次",children:"#"}),"3.3 next 函数不能调用多次"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"it('should throw if next() is called multiple times', () => {\n  return compose([\n    async (ctx, next) => {\n      await next()\n      await next()\n    }\n  ])({}).then(() => {\n    throw new Error('boom')\n  }, (err) => {\n    assert(/multiple times/.test(err.message))\n  })\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"这一块对应的则是："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"index = -1\ndispatch(0)\nfunction dispatch (i) {\n  if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n  index = i\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["调用两次后 ",(0,r.jsx)(n.code,{children:"i"})," 和 ",(0,r.jsx)(n.code,{children:"index"})," 都为 ",(0,r.jsx)(n.code,{children:"1"}),"，所以会报错。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"compose/test/test.js"}),"文件中总共 300余行，还有很多测试用例可以按照文中方法自行调试。"]}),"\n",(0,r.jsxs)(n.h2,{id:"4-总结",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-总结",children:"#"}),"4. 总结"]}),"\n",(0,r.jsxs)(n.p,{children:["虽然",(0,r.jsx)(n.code,{children:"koa-compose"}),"源码 50行 不到，但如果是第一次看源码调试源码，还是会有难度的。其中混杂着高阶函数、闭包、",(0,r.jsx)(n.code,{children:"Promise"}),"、",(0,r.jsx)(n.code,{children:"bind"}),"等基础知识。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过本文，我们熟悉了 ",(0,r.jsx)(n.code,{children:"koa-compose"})," 中间件常说的洋葱模型，学会了部分 ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/jest",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(n.code,{children:"jest"})})," 用法，同时也学会了如何使用现成的测试用例去调试源码。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"相信学会了通过测试用例调试源码后，会觉得源码也没有想象中的那么难"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["开源项目，一般都会有很全面的测试用例。除了可以给我们学习源码调试源码带来方便的同时，也可以给我们带来的启发：自己工作中的项目，也可以逐步引入测试工具，比如 ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/jest",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(n.code,{children:"jest"})}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"此外，读开源项目源码是我们学习业界大牛设计思想和源码实现等比较好的方式。"}),"\n",(0,r.jsxs)(n.p,{children:["看完本文，非常希望能自己动手实践调试源码去学习，容易吸收消化。另外，如果你有余力，可以继续看我的 ",(0,r.jsx)(n.code,{children:"koa-compose"})," 源码文章：",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/6844904088220467213",rel:"noopener noreferrer",target:"_blank",children:"学习 koa 源码的整体架构，浅析koa洋葱模型原理和co原理"})]})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(h,e)})):h(e)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["koa-compose%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-环境准备",text:"2. 环境准备",depth:2},{id:"21-克隆-koa-compose-项目",text:"2.1 克隆 koa-compose 项目",depth:3},{id:"22-根据测试用例调试-compose-源码",text:"2.2 根据测试用例调试 compose 源码",depth:3},{id:"3-跟着测试用例学源码",text:"3. 跟着测试用例学源码",depth:2},{id:"31-正常流程",text:"3.1 正常流程",depth:3},{id:"311-compose-函数",text:"3.1.1 compose 函数",depth:4},{id:"312-dispatch-函数",text:"3.1.2 dispatch 函数",depth:4},{id:"313-简化-compose-便于理解",text:"3.1.3 简化 compose 便于理解",depth:4},{id:"32-错误捕获",text:"3.2 错误捕获",depth:3},{id:"33-next-函数不能调用多次",text:"3.3 next 函数不能调用多次",depth:3},{id:"4-总结",text:"4. 总结",depth:2}],title:"50行代码串行Promise，koa洋葱模型原来是这么实现？",headingTitle:"50行代码串行Promise，koa洋葱模型原来是这么实现？",frontmatter:{}}},20713:function(e,n,s){s.d(n,{Z:()=>t});var r=s(52676),c=s(75271),i=s(92815);s(18544);let d={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function o(e,n,s){let r=Object.keys(d).includes(n)?n:s;return d[r](e)}let t=e=>{let{defaultLocale:n="en-US"}=e,s=(0,i.Vi)().page.readingTimeData,d=(0,i.Jr)(),t=(0,i.e7)(),[a,l]=(0,c.useState)(o(s,d,n));return(0,c.useEffect)(()=>{l(o(s,d,n))},[d,s]),(0,r.jsx)("span",{"data-dark":String(t),className:"rp-reading-time",children:a})}}}]);