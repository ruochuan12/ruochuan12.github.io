"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["5819"],{89883:function(n,e,i){i.r(e),i.d(e,{default:()=>l});var r=i(52676),s=i(40453),a=i(20713);let c=i.p+"static/image/webpack-kernal.6fdf315f.png";function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",input:"input",pre:"pre",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",blockquote:"blockquote",hr:"hr",strong:"strong"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"taro-源码揭秘9-taro-是如何生成-webpack-配置进行构建小程序的",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#taro-源码揭秘9-taro-是如何生成-webpack-配置进行构建小程序的",children:"#"}),"Taro 源码揭秘：9. Taro 是如何生成 webpack 配置进行构建小程序的？"]}),"\n",(0,r.jsx)(a.Z,{defaultLocale:"zh-CN"}),"\n",(0,r.jsxs)(e.h2,{id:"1-前言",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,r.jsxs)(e.p,{children:["大家好，我是",(0,r.jsx)(e.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"，欢迎关注我的",(0,r.jsx)(e.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。从 2021 年 8 月起，我持续组织了好几年的",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,r.jsxs)(e.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,r.jsx)(e.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,r.jsx)(e.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]}),"\n",(0,r.jsxs)(e.p,{children:["截至目前（",(0,r.jsx)(e.code,{children:"2024-11-22"}),"），目前最新是 ",(0,r.jsx)(e.a,{href:"https://github.com/NervJS/taro/releases/tag/v4.0.7",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(e.code,{children:"4.0.7"})}),"，官方",(0,r.jsx)(e.code,{children:"4.0"}),"正式版本的介绍文章暂未发布。官方之前发过",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7330792655125463067",rel:"noopener noreferrer",target:"_blank",children:"Taro 4.0 Beta 发布：支持开发鸿蒙应用、小程序编译模式、Vite 编译等"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["计划写一个 Taro 源码揭秘系列，博客地址：",(0,r.jsx)(e.a,{href:"https://ruochuan12.github.io/taro",rel:"noopener noreferrer",target:"_blank",children:"https://ruochuan12.github.io/taro"})," 可以加入书签，持续关注",(0,r.jsx)(e.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。"]}),"\n",(0,r.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7378363694939783178",rel:"noopener noreferrer",target:"_blank",children:"1. 揭开整个架构的入口 CLI => taro init 初始化项目的秘密"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7380195796208205824",rel:"noopener noreferrer",target:"_blank",children:"2. 揭开整个架构的插件系统的秘密"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7390335741586931738",rel:"noopener noreferrer",target:"_blank",children:"3. 每次创建新的 taro 项目（taro init）的背后原理是什么"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7403193330271682612",rel:"noopener noreferrer",target:"_blank",children:"4. 每次 npm run dev:weapp 开发小程序，build 编译打包是如何实现的？"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7403915119448915977",rel:"noopener noreferrer",target:"_blank",children:"5. 高手都在用的发布订阅机制 Events 在 Taro 中是如何实现的？"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7407648740926291968",rel:"noopener noreferrer",target:"_blank",children:"6. 为什么通过 Taro.xxx 能调用各个小程序平台的 API，如何设计实现的?"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7415911762128797696",rel:"noopener noreferrer",target:"_blank",children:"7. Taro.request 和请求响应拦截器是如何实现的"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7434175547784020031",rel:"noopener noreferrer",target:"_blank",children:"8. Taro 是如何使用 webpack 打包构建小程序的？"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7439743635161710604",rel:"noopener noreferrer",target:"_blank",children:"9. Taro 是如何生成 webpack 配置进行构建小程序的？"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7452329275561279529",rel:"noopener noreferrer",target:"_blank",children:"10. Taro 到底是怎样转换成小程序文件的？"})]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","等等"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["前面 4 篇文章都是讲述编译相关的，CLI、插件机制、初始化项目、编译构建流程。\n第 5-7 篇讲述的是运行时相关的 Events、API、request 等。\n第 9 篇接着继续追随第4篇和第8篇的脚步，继续分析 ",(0,r.jsx)(e.a,{href:"https://github.com/NervJS/taro/tree/main/packages/taro-webpack5-runner",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(e.code,{children:"@tarojs/webpack5-runner"})}),"，Taro 是如何生成 webpack 配置进行构建小程序的？"]}),"\n",(0,r.jsxs)(e.p,{children:["关于克隆项目、环境准备、如何调试代码等，参考",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7378363694939783178#heading-1",rel:"noopener noreferrer",target:"_blank",children:"第一篇文章-准备工作、调试"}),"。后续文章基本不再过多赘述。"]}),"\n",(0,r.jsx)(e.p,{children:"学完本文，你将学到："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"1. Taro 是如何生成 webpack 配置进行构建小程序的？\n等等\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"2-webpack-打包构建",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-webpack-打包构建",children:"#"}),"2. webpack 打包构建"]}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7403193330271682612#heading-14",rel:"noopener noreferrer",target:"_blank",children:"第4篇文章"}),"末尾，我们可以回顾下，如何获取 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置和执行 ",(0,r.jsx)(e.code,{children:"webpack()"})," 构建的。还有",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7434175547784020031",rel:"noopener noreferrer",target:"_blank",children:"第8篇文章"})," 把所有 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置输出出来，并解析了一些重要配置。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// webpack 配置\n{\n  entry: {\n    app: [\n      '/Users/ruochuan/git-source/github/taro4-debug/src/app.ts'\n    ]\n  },\n  target: ['web', 'es5'],\n  // 省略若干配置项...\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们这篇文章主要来看是如何生成用于构建小程序的 webpack 配置的。"}),"\n",(0,r.jsxs)(e.p,{children:["关于打包编译官方有一篇博客",(0,r.jsx)(e.a,{href:"https://taro-docs.jd.com/blog/2023/03/29/D2_17",rel:"noopener noreferrer",target:"_blank",children:"多编译内核生态下的极速研发体验"}),"，主要讲述思想和流程。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"webpack5 编译内核",src:c})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Taro RFC"})," ",(0,r.jsx)(e.a,{href:"https://github.com/NervJS/taro/discussions/11533",rel:"noopener noreferrer",target:"_blank",children:"支持使用 Webpack5 编译小程序和 H5 应用"}),"，讲述了 webpack4 重构为 webpack5 主要的一些修改和优化等。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们这篇文章主要分析 ",(0,r.jsx)(e.a,{href:"https://github.com/NervJS/taro/tree/main/packages/taro-webpack5-runner",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(e.code,{children:"@tarojs/webpack5-runner"})})," 小程序部分的具体源码实现。"]}),"\n",(0,r.jsxs)(e.h2,{id:"3-tarojswebpack5-runner",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-tarojswebpack5-runner",children:"#"}),"3. @tarojs/webpack5-runner"]}),"\n",(0,r.jsxs)(e.p,{children:["暴露给 ",(0,r.jsx)(e.code,{children:"@tarojs/cli"})," 的小程序/H5 Webpack 启动器。"]}),"\n",(0,r.jsxs)(e.p,{children:["这个 ",(0,r.jsx)(e.code,{children:"npm"})," 包，主要要解决的问题是：把 ",(0,r.jsx)(e.code,{children:"taro"})," 项目用 ",(0,r.jsx)(e.code,{children:"webpack"})," 编译到小程序、H5、鸿蒙。会涉及到比较多代码是类似或者可以共用的。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"package.json"})," 入口文件 ",(0,r.jsx)(e.code,{children:'"main": "index.js"'})," 入口文件 ",(0,r.jsx)(e.code,{children:"index.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// packages/taro-webpack5-runner/index.js\nif (process.env.TARO_PLATFORM === 'web') {\n  module.exports = require('./dist/index.h5.js').default\n} else if (process.env.TARO_PLATFORM === 'harmony' || process.env.TARO_ENV === 'harmony') {\n  module.exports = require('./dist/index.harmony.js').default\n} else {\n  module.exports = require('./dist/index.mini.js').default\n}\n\nmodule.exports.default = module.exports\n"})}),"\n",(0,r.jsxs)(e.p,{children:["根据不同平台导出不同端的产物。由此可以得出，小程序端的源代码文件是 ",(0,r.jsx)(e.code,{children:"packages/taro-webpack5-runner/src/index.mini.ts"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们来看 ",(0,r.jsx)(e.code,{children:"webpack"})," 文件夹 ",(0,r.jsx)(e.code,{children:"packages/taro-webpack5-runner/src/webpack"})," 主要文件如下："]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"基础类"}),(0,r.jsx)(e.th,{children:"小程序"}),(0,r.jsx)(e.th,{children:"H5"}),(0,r.jsx)(e.th,{children:"鸿蒙"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Combination"}),(0,r.jsx)(e.td,{children:"MiniCombination"}),(0,r.jsx)(e.td,{children:"H5Combination"}),(0,r.jsx)(e.td,{children:"HarmonyCombination"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"BaseConfig"}),(0,r.jsx)(e.td,{children:"MiniBaseConfig"}),(0,r.jsx)(e.td,{children:"H5BaseConfig"}),(0,r.jsx)(e.td,{children:"HarmonyBaseConfig"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"WebpackPlugin"}),(0,r.jsx)(e.td,{children:"MiniWebpackPlugin"}),(0,r.jsx)(e.td,{children:"H5WebpackPlugin"}),(0,r.jsx)(e.td,{children:"HarmonyWebpackPlugin"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"WebpackModule"}),(0,r.jsx)(e.td,{children:"MiniWebpackModule"}),(0,r.jsx)(e.td,{children:"H5WebpackModule"}),(0,r.jsx)(e.td,{children:"HarmonyWebpackModule"})]})]})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// packages/taro-webpack5-runner/src/index.mini.ts\n\nimport webpack from 'webpack'\n//   省略若干代码\nexport default async function build (appPath: string, rawConfig: IMiniBuildConfig): Promise<Stats | void> {\n  const combination = new MiniCombination(appPath, rawConfig)\n  await combination.make()\n  //   省略若干代码\n\n  const webpackConfig = combination.chain.toConfig()\n  const config = combination.config\n\n  return new Promise<Stats | void>((resolve, reject) => {\n    if (config.withoutBuild) return\n    const compiler = webpack(webpackConfig)\n	// 省略若干代码...\n  })\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// 重点就以下这几句\n// 生成获取 webpack 配置，执行 webpack(webpackConfig)\nconst combination = new MiniCombination(appPath, rawConfig)\nawait combination.make()\nconst webpackConfig = combination.chain.toConfig()\nconst compiler = webpack(webpackConfig)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["调用构造函数 ",(0,r.jsx)(e.code,{children:"new MiniCombination(appPath, rawConfig)"})," 生成 ",(0,r.jsx)(e.code,{children:"combination"})," 对象。\n其中 ",(0,r.jsx)(e.code,{children:"appPath"})," 是项目根目录，",(0,r.jsx)(e.code,{children:"rawConfig"})," 参数，是开发项目中 ",(0,r.jsx)(e.code,{children:"config/index"})," 中的配置和 ",(0,r.jsx)(e.code,{children:"ctx.applyPlugins({name: platform, opts: {}})"})," 注入的各个阶段的钩子函数等。"]}),"\n",(0,r.jsxs)(e.p,{children:["调用 ",(0,r.jsx)(e.code,{children:"make"})," 方法后，再读取实例对象 ",(0,r.jsx)(e.code,{children:"combination.chain.toConfig()"})," 即可生成 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置了。再调用 ",(0,r.jsx)(e.code,{children:"webpack"})," 函数执行。"]}),"\n",(0,r.jsxs)(e.h2,{id:"4-简易实现",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-简易实现",children:"#"}),"4. 简易实现"]}),"\n",(0,r.jsx)(e.p,{children:"如果不需要考虑小程序端、H5、鸿蒙端等因素。那么可以直接写在一个文件里。"}),"\n",(0,r.jsxs)(e.p,{children:["我们可以先实现一个 ",(0,r.jsx)(e.code,{children:"Combination"})," 组合的基础类，其他平台（小程序、H5、鸿蒙）来继承。再来实现一个 ",(0,r.jsx)(e.code,{children:"make"})," 方法。"]}),"\n",(0,r.jsxs)(e.h3,{id:"41-简易实现-combination",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#41-简易实现-combination",children:"#"}),"4.1 简易实现 Combination"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"class Combination{\n	constructor(){\n		// 定义一些共用的属性\n	}\n\n	async make(){\n		// 前置操作\n		await this.pre();\n		// 主要操作，让子类来实现\n		this.process();\n		// 后置操作\n		await this.post();\n	}\n	async pre(){},\n	process(){},\n	async post(){},\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"42-简易实现-minicombination",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#42-简易实现-minicombination",children:"#"}),"4.2 简易实现 MiniCombination"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"class MiniCombination extends Combination{\n	process(){\n		const baseConfig = new MiniBaseConfig();\n    	const chain = this.chain = baseConfig.chain;\n		this.chain.merge({\n			// ...\n		});\n	}\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["我们在这里调用 ",(0,r.jsx)(e.code,{children:"new MiniBaseConfig"})," 类。这个类继承自 ",(0,r.jsx)(e.code,{children:"BaseConfig"})," 基础配置类。",(0,r.jsx)(e.code,{children:"process"})," 函数执行完成，就可以用 ",(0,r.jsx)(e.code,{children:"miniCombination.chain.toConfig()"})," 获取最终的 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置。"]}),"\n",(0,r.jsxs)(e.h3,{id:"43-简易实现-minibaseconfig",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#43-简易实现-minibaseconfig",children:"#"}),"4.3 简易实现 MiniBaseConfig"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class MiniBaseConfig extends BaseConfig {\n constructor() {\n    super();\n	this.chain.merge({\n		// 小程序端的配置\n	});\n }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们来简易实现这个关键基础配置类。"}),"\n",(0,r.jsxs)(e.h3,{id:"44-简易实现-baseconfig",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#44-简易实现-baseconfig",children:"#"}),"4.4 简易实现 BaseConfig"]}),"\n",(0,r.jsx)(e.p,{children:"会有一些基础配置，我们先实现一个 BaseConfig 类。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import Chain from 'webpack-chain';\nexport class BaseConfig {\n  constructor () {\n    const chain = this._chain = new Chain()\n    chain.merge({\n      target: ['web', 'es5'],\n	  //   等基础配置\n    })\n  }\n  get chain(){\n	return this._chain;\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["这里我们引入 ",(0,r.jsx)(e.a,{href:"https://github.com/neutrinojs/webpack-chain",rel:"noopener noreferrer",target:"_blank",children:"webpack-chain"})," 这个 npm 包，虽然到现在已经不维护了，但是下载量极大。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"webpack-chain 使用链式 API 生成并简化 webpack 4 配置的修改。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"webpack-chain 简易实现。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// webpack-chain\nclass Chain{\n	constructor(){}\n    static toString(){\n       console.log('string');\n		return JSON.stringify({});\n    }\n	merge(){\n		// 合并配置\n	}\n    toConfig(){\n		// 可以返回所有配置\n        console.log('toConfig');\n		return {};\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"上文的简易实现，基本就是整个源码的组织结构。"}),"\n",(0,r.jsx)(e.p,{children:"我们来看真实的源码实现。"}),"\n",(0,r.jsxs)(e.h2,{id:"5-combination-组合",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-combination-组合",children:"#"}),"5. Combination 组合"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class MiniCombination extends Combination<IMiniBuildConfig> {\n	process (config: Partial<IMiniBuildConfig>) {\n		// 省略代码\n	}\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class Combination<T extends IMiniBuildConfig | IH5BuildConfig | IHarmonyBuildConfig = CommonBuildConfig> {\n  appPath: string\n  config: T\n  chain: Chain\n  //   省略若干代码...\n\n  constructor (appPath: string, config: T) {\n    this.appPath = appPath\n    this.rawConfig = config\n    //   省略若干代码...\n  }\n\n  async make () {\n    await this.pre(this.rawConfig)\n    this.process(this.config)\n    await this.post(this.config, this.chain)\n  }\n\n  process (_config: Partial<T>) {}\n\n  async pre (rawConfig: T) {\n    // 拆分放到下方\n  }\n\n  async post (config: T, chain: Chain) {\n    // 拆分放到下方\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"51-pre-前置处理",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#51-pre-前置处理",children:"#"}),"5.1 pre 前置处理"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"async pre (rawConfig: T) {\n    const preMode = rawConfig.mode || process.env.NODE_ENV\n    const mode = ['production', 'development', 'none'].find(e => e === preMode) ||\n      (!rawConfig.isWatch || process.env.NODE_ENV === 'production' ? 'production' : 'development')\n    /** process config.sass options */\n    const sassLoaderOption = await getSassLoaderOption(rawConfig)\n    this.config = {\n      ...rawConfig,\n      sassLoaderOption,\n      mode,\n      frameworkExts: rawConfig.frameworkExts || SCRIPT_EXT\n    }\n  }\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"52-post-后置处理",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#52-post-后置处理",children:"#"}),"5.2 post 后置处理"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"async post (config: T, chain: Chain) {\n    const { modifyWebpackChain, webpackChain, onWebpackChainReady } = config\n    const data: IModifyChainData = {\n      componentConfig\n    }\n    if (isFunction(modifyWebpackChain)) {\n      await modifyWebpackChain(chain, webpack, data)\n    }\n    if (isFunction(webpackChain)) {\n      webpackChain(chain, webpack, META_TYPE)\n    }\n    if (isFunction(onWebpackChainReady)) {\n      onWebpackChainReady(chain)\n    }\n  }\n"})}),"\n",(0,r.jsxs)(e.p,{children:["调用配置中的钩子函数 ",(0,r.jsx)(e.code,{children:"modifyWebpackChain"}),"、",(0,r.jsx)(e.code,{children:"webpackChain"}),"、",(0,r.jsx)(e.code,{children:"onWebpackChainReady"}),"。"]}),"\n",(0,r.jsxs)(e.h2,{id:"6-minicombination-小程序组合类",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6-minicombination-小程序组合类",children:"#"}),"6. MiniCombination 小程序组合类"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class MiniCombination extends Combination<IMiniBuildConfig> {\n  buildNativePlugin: BuildNativePlugin\n  fileType: IFileType\n  isBuildPlugin = false\n  optimizeMainPackage: { enable?: boolean | undefined, exclude?: any[] | undefined } = {\n    enable: true\n  }\n\n  process (config: Partial<IMiniBuildConfig>) {\n    const baseConfig = new MiniBaseConfig(this.appPath, config)\n    const chain = this.chain = baseConfig.chain\n\n    // 省略若干代码...拆分到下方在讲述\n\n    chain.merge({\n      entry: webpackEntry,\n      output: webpackOutput,\n      mode,\n      devtool: this.getDevtool(sourceMapType),\n      resolve: {\n        alias: this.getAlias()\n      },\n      plugin,\n      module,\n      optimization: this.getOptimization()\n    })\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["最后 ",(0,r.jsx)(e.code,{children:"chain.merge"})," 入口、出口、插件、模块等，整个过程就结束了，完美撒花~当然，我们肯定不会只限于此。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们先来看看 ",(0,r.jsx)(e.code,{children:"MiniBaseConfig"})," 的具体实现。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class MiniBaseConfig extends BaseConfig {\n  defaultTerserOptions = {\n	// 省略\n  }\n\n  constructor(appPath: string, config: Partial<IMiniBuildConfig>) {\n    super(appPath, config)\n	// ...\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["可以看出继承自 ",(0,r.jsx)(e.code,{children:"BaseConfig"})," 基本配置类。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们来看看 ",(0,r.jsx)(e.code,{children:"BaseConfig"})," 类的具体实现。"]}),"\n",(0,r.jsxs)(e.h2,{id:"7-baseconfig-基本配置类",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7-baseconfig-基本配置类",children:"#"}),"7. BaseConfig 基本配置类"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import Chain from 'webpack-chain'\nexport class BaseConfig {\n  private _chain: Chain\n\n  constructor (appPath: string, config: Config) {\n    const chain = this._chain = new Chain()\n    chain.merge({\n      target: ['web', 'es5'],\n      resolve: {\n        extensions: ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.vue'],\n        symlinks: true,\n        plugin: {\n          MultiPlatformPlugin: {\n            plugin: MultiPlatformPlugin,\n            args: ['described-resolve', 'resolve', { chain }]\n          }\n        }\n      },\n	  // 省略若干代码...\n    })\n\n    // 持久化缓存\n	// 省略若干代码...\n  }\n\n  // minimizer 配置\n  protected setMinimizer (config: Config, defaultTerserOptions) {\n	// 省略若干代码...\n	this.chain.merge({\n      optimization: {\n        minimize,\n        minimizer\n      }\n    })\n  }\n\n  get chain () {\n    return this._chain\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"8-minibaseconfig-小程序基本配置类",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8-minibaseconfig-小程序基本配置类",children:"#"}),"8. MiniBaseConfig 小程序基本配置类"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"export class MiniBaseConfig extends BaseConfig {\n  defaultTerserOptions = {\n    parse: {\n      ecma: 8,\n    },\n    compress: {\n      ecma: 5,\n      warnings: false,\n	  //   省略代码...\n    },\n    output: {\n      ecma: 5,\n      comments: false,\n      ascii_only: true,\n    },\n  }\n\n  constructor(appPath: string, config: Partial<IMiniBuildConfig>) {\n    super(appPath, config)\n    const mainFields = [...defaultMainFields]\n    const resolveOptions = {\n      basedir: appPath,\n      mainFields,\n    }\n    this.chain.merge({\n      resolve: {\n        mainFields,\n        alias: {\n          // 小程序使用 regenerator-runtime@0.11\n          'regenerator-runtime': require.resolve('regenerator-runtime'),\n          // 开发组件库时 link 到本地调试，runtime 包需要指向本地 node_modules 顶层的 runtime，保证闭包值 Current 一致，shared 也一样\n          '@tarojs/runtime': resolveSync('@tarojs/runtime', resolveOptions),\n          '@tarojs/shared': resolveSync('@tarojs/shared', resolveOptions),\n        },\n        // [Webpack 4] config.node: { fs: false, path: false }\n        // [Webpack 5] config.resolve.fallback\n        fallback: {\n          fs: false,\n          path: false,\n        },\n      },\n	  // 省略若干代码...\n    })\n\n    this.setMinimizer(config, this.defaultTerserOptions)\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"9-再探-minicombination-实例对象的-process-函数",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#9-再探-minicombination-实例对象的-process-函数",children:"#"}),"9. 再探 MiniCombination 实例对象的 process 函数"]}),"\n",(0,r.jsxs)(e.h3,{id:"91-process-第一部分",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#91-process-第一部分",children:"#"}),"9.1 process 第一部分"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"process (config: Partial<IMiniBuildConfig>) {\n	const baseConfig = new MiniBaseConfig(this.appPath, config)\n    const chain = this.chain = baseConfig.chain\n\n    const {\n      entry = {},\n      output = {},\n      mode = 'production',\n      globalObject = 'wx',\n      sourceMapType = 'cheap-module-source-map',\n      fileType = {\n        style: '.wxss',\n        config: '.json',\n        script: '.js',\n        templ: '.wxml'\n      },\n      /** special mode */\n      isBuildPlugin = false,\n      /** hooks */\n      modifyComponentConfig,\n      optimizeMainPackage\n    } = config\n\n    this.fileType = fileType\n\n    modifyComponentConfig?.(componentConfig, config)\n	// 拆分在下方\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"92-process-第二部分",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#92-process-第二部分",children:"#"}),"9.2 process 第二部分"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"process (config: Partial<IMiniBuildConfig>) {\n	if (isBuildPlugin) {\n      // 编译目标 - 小程序原生插件\n      this.isBuildPlugin = true\n      this.buildNativePlugin = BuildNativePlugin.getPlugin(this)\n      chain.merge({\n        context: path.join(process.cwd(), this.sourceRoot, 'plugin')\n      })\n    }\n\n    if (optimizeMainPackage) {\n      this.optimizeMainPackage = optimizeMainPackage\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"如果是编译小程序原生插件，webpack 配置项，合入 context 配置。\noptimizeMainPackage 顾名知意。优化主包，默认开启。"}),"\n",(0,r.jsxs)(e.h3,{id:"93-process-第三部分",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#93-process-第三部分",children:"#"}),"9.3 process 第三部分"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"process (config: Partial<IMiniBuildConfig>) {\n    const webpackEntry = this.getEntry(entry)\n    const webpackOutput = this.getOutput({\n      publicPath: '/',\n      globalObject,\n      isBuildPlugin,\n      output\n    })\n    const webpackPlugin = new MiniWebpackPlugin(this)\n    const webpackModule = new MiniWebpackModule(this)\n\n    const module = webpackModule.getModules()\n    const [, pxtransformOption] = webpackModule.__postcssOption.find(([name]) => name === 'postcss-pxtransform') || []\n    webpackPlugin.pxtransformOption = pxtransformOption as any\n    const plugin = webpackPlugin.getPlugins()\n\n	chain.merge({\n		// ...\n	});\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["这部分代码主要获取入口、出口、",(0,r.jsx)(e.code,{children:"modules"}),"、",(0,r.jsx)(e.code,{children:"plugins"})," 等，合并到之前的 webpack 配置中。"]}),"\n",(0,r.jsx)(e.p,{children:"我们接下来，继续分析。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"getEntry"}),"\n",(0,r.jsx)(e.li,{children:"getOutput"}),"\n",(0,r.jsx)(e.li,{children:"MiniWebpackPlugin"}),"\n",(0,r.jsx)(e.li,{children:"MiniWebpackModule"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"10-getentry-获取入口",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#10-getentry-获取入口",children:"#"}),"10. getEntry 获取入口"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"getEntry (entry: IMiniBuildConfig['entry']) {\n    return this.isBuildPlugin ? this.buildNativePlugin.entry : entry\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["如果是编译插件，用插件的入口，否则是用入口 ",(0,r.jsx)(e.code,{children:"{entry: app: [ 'src/app.ts' ]}"})]}),"\n",(0,r.jsxs)(e.h2,{id:"11-getoutput-获取出口",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11-getoutput-获取出口",children:"#"}),"11. getOutput 获取出口"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"getOutput ({ publicPath, globalObject, isBuildPlugin, output }) {\n    return {\n      path: this.outputDir,\n      publicPath,\n      filename: '[name].js',\n      chunkFilename: '[name].js',\n      globalObject,\n      enabledLibraryTypes: isBuildPlugin ? ['commonjs'] : [],\n      ...output\n    }\n  }\n"})}),"\n",(0,r.jsxs)(e.p,{children:["支持混入开发者传入的 ",(0,r.jsx)(e.code,{children:"output"}),"，项目 ",(0,r.jsx)(e.code,{children:"config/index.ts"})," 中的配置。"]}),"\n",(0,r.jsxs)(e.h2,{id:"12-miniwebpackplugin-提供小程序应用所需插件",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12-miniwebpackplugin-提供小程序应用所需插件",children:"#"}),"12. MiniWebpackPlugin 提供小程序应用所需插件"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// packages/taro-webpack5-runner/src/webpack/MiniWebpackPlugin.ts\nexport class MiniWebpackPlugin {\n  combination: MiniCombination\n  pxtransformOption: IPostcssOption<'mini'>['pxtransform']\n\n  constructor (combination: MiniCombination) {\n    this.combination = combination\n  }\n\n  getPlugins () {\n    const plugins: Record<string, { plugin: any, args: PluginArgs }> = {\n      providerPlugin: this.getProviderPlugin(),\n      definePlugin: this.getDefinePlugin(),\n      miniCssExtractPlugin: this.getMiniCssExtractPlugin()\n    }\n\n    // 省略若干代码...\n\n    return plugins\n  }\n}\n\n"})}),"\n",(0,r.jsx)(e.p,{children:"小程序 webpack 插件设置。可以用 getPlugins 获取 webpack 插件。"}),"\n",(0,r.jsxs)(e.h2,{id:"13-miniwebpackmodule-处理小程序模块加载规则",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#13-miniwebpackmodule-处理小程序模块加载规则",children:"#"}),"13. MiniWebpackModule 处理小程序模块加载规则"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// packages/taro-webpack5-runner/src/webpack/MiniWebpackModule.ts\nexport class MiniWebpackModule {\n  combination: MiniCombination\n  __postcssOption: [string, any, Func?][]\n\n  constructor (combination: MiniCombination) {\n    this.combination = combination\n  }\n\n  getModules () {\n    const { appPath, config, sourceRoot, fileType } = this.combination\n\n    const rule: Record<string, IRule> = {\n      //   省略若干代码...\n\n      media: this.getMediaRule(),\n\n      font: this.getFontRule(),\n\n      image: this.getImageRule()\n    }\n    return { rule }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"小程序 webpack module 设置。可以用 getModules 获取 webpack modules。"}),"\n",(0,r.jsxs)(e.h2,{id:"14-webpackplugin-提供应用所需插件",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#14-webpackplugin-提供应用所需插件",children:"#"}),"14. WebpackPlugin 提供应用所需插件"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// packages/taro-webpack5-runner/src/webpack/WebpackPlugin.ts\n\nexport default class WebpackPlugin {\n  static getPlugin (plugin, args: PluginArgs) {\n    return {\n      plugin,\n      args\n    }\n  }\n\n  static getCopyWebpackPlugin (appPath: string, copy: ICopyOptions) {\n    /** @doc https://webpack.js.org/plugins/copy-webpack-plugin */\n    const CopyWebpackPlugin = require('copy-webpack-plugin')\n    // 省略代码...\n    return WebpackPlugin.getPlugin(CopyWebpackPlugin, [args])\n  }\n\n  // 省略若干代码...\n}\n\n"})}),"\n",(0,r.jsx)(e.p,{children:"基础的 webpack plugin 设置。提供给不同的平台（小程序、H5、鸿蒙）调用。"}),"\n",(0,r.jsxs)(e.h2,{id:"15-webpackmodule-处理不同模块加载规则",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#15-webpackmodule-处理不同模块加载规则",children:"#"}),"15. WebpackModule 处理不同模块加载规则"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// packages/taro-webpack5-runner/src/webpack/WebpackModule.ts\n\nexport class WebpackModule {\n  static getLoader (loaderName: string, options: Record<string, any> = {}) {\n    return {\n      loader: require.resolve(loaderName),\n      options\n    }\n  }\n  static getCSSLoader (cssLoaderOption) {\n    const defaultOptions = {\n      importLoaders: 1,\n      modules: false\n    }\n    const options = Object.assign(defaultOptions, cssLoaderOption)\n    return WebpackModule.getLoader('css-loader', options)\n  }\n  // 省略若干代码...\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"基础的 webpack module 设置。提供给不同的平台（小程序、H5、鸿蒙）调用。"}),"\n",(0,r.jsxs)(e.h2,{id:"16-总结",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#16-总结",children:"#"}),"16. 总结"]}),"\n",(0,r.jsx)(e.p,{children:"我们来回顾下开头的官方博客的配图。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"webpack5 编译内核",src:c})}),"\n",(0,r.jsxs)(e.p,{children:["还有开头的 ",(0,r.jsx)(e.code,{children:"BaseConfig"})," 简易实现和 ",(0,r.jsx)(e.code,{children:"MiniCombination"})," 简易实现。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import Chain from 'webpack-chain';\nexport class BaseConfig {\n  constructor () {\n    const chain = this._chain = new Chain()\n    chain.merge({\n      target: ['web', 'es5'],\n	  //   等基础配置\n    })\n  }\n  get chain(){\n	return this._chain;\n  }\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"class MiniCombination extends Combination{\n	process(){\n		const baseConfig = new MiniBaseConfig();\n    	const chain = this.chain = baseConfig.chain;\n		this.chain.merge({\n			// ...\n		});\n	}\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["我们通过 ",(0,r.jsx)(e.a,{href:"https://github.com/neutrinojs/webpack-chain",rel:"noopener noreferrer",target:"_blank",children:"webpack-chain"})," 链式 API 来生成 webpack 配置。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们在这里调用 ",(0,r.jsx)(e.code,{children:"new MiniBaseConfig"})," 类。这个类继承自 ",(0,r.jsx)(e.code,{children:"BaseConfig"})," 基础配置类。",(0,r.jsx)(e.code,{children:"process"})," 函数执行完成，就可以用 ",(0,r.jsx)(e.code,{children:"miniCombination.chain.toConfig()"})," 获取最终的 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们主要分析了 ",(0,r.jsx)(e.a,{href:"https://github.com/NervJS/taro/tree/main/packages/taro-webpack5-runner",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(e.code,{children:"@tarojs/webpack5-runner"})})," 的生成小程序部分的 ",(0,r.jsx)(e.code,{children:"webpack"})," 配置的实现。"]}),"\n",(0,r.jsxs)(e.p,{children:["下一篇应该是分析给 ",(0,r.jsx)(e.code,{children:"taro"})," 写的特定的 webpack 插件 TaroMiniPlugin。"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"如果看完有收获，欢迎点赞、评论、分享、收藏支持。你的支持和肯定，是我写作的动力。也欢迎提建议和交流讨论"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["作者：常以",(0,r.jsx)(e.strong,{children:"若川"}),"为名混迹于江湖。所知甚少，唯善学。",(0,r.jsx)(e.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川的博客"}),"，",(0,r.jsx)(e.a,{href:"https://github.com/ruochuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"github blog"}),"，可以点个 ",(0,r.jsx)(e.code,{children:"star"})," 鼓励下持续创作。"]}),"\n",(0,r.jsxs)(e.p,{children:["最后可以持续关注我",(0,r.jsx)(e.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"，欢迎关注我的",(0,r.jsx)(e.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。从 2021 年 8 月起，我持续组织了好几年的",(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,r.jsxs)(e.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,r.jsx)(e.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,r.jsx)(e.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(t,n)})):t(n)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["taro%2Fwebpack5-runner%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-webpack-打包构建",text:"2. webpack 打包构建",depth:2},{id:"3-tarojswebpack5-runner",text:"3. @tarojs/webpack5-runner",depth:2},{id:"4-简易实现",text:"4. 简易实现",depth:2},{id:"41-简易实现-combination",text:"4.1 简易实现 Combination",depth:3},{id:"42-简易实现-minicombination",text:"4.2 简易实现 MiniCombination",depth:3},{id:"43-简易实现-minibaseconfig",text:"4.3 简易实现 MiniBaseConfig",depth:3},{id:"44-简易实现-baseconfig",text:"4.4 简易实现 BaseConfig",depth:3},{id:"5-combination-组合",text:"5. Combination 组合",depth:2},{id:"51-pre-前置处理",text:"5.1 pre 前置处理",depth:3},{id:"52-post-后置处理",text:"5.2 post 后置处理",depth:3},{id:"6-minicombination-小程序组合类",text:"6. MiniCombination 小程序组合类",depth:2},{id:"7-baseconfig-基本配置类",text:"7. BaseConfig 基本配置类",depth:2},{id:"8-minibaseconfig-小程序基本配置类",text:"8. MiniBaseConfig 小程序基本配置类",depth:2},{id:"9-再探-minicombination-实例对象的-process-函数",text:"9. 再探 MiniCombination 实例对象的 process 函数",depth:2},{id:"91-process-第一部分",text:"9.1 process 第一部分",depth:3},{id:"92-process-第二部分",text:"9.2 process 第二部分",depth:3},{id:"93-process-第三部分",text:"9.3 process 第三部分",depth:3},{id:"10-getentry-获取入口",text:"10. getEntry 获取入口",depth:2},{id:"11-getoutput-获取出口",text:"11. getOutput 获取出口",depth:2},{id:"12-miniwebpackplugin-提供小程序应用所需插件",text:"12. MiniWebpackPlugin 提供小程序应用所需插件",depth:2},{id:"13-miniwebpackmodule-处理小程序模块加载规则",text:"13. MiniWebpackModule 处理小程序模块加载规则",depth:2},{id:"14-webpackplugin-提供应用所需插件",text:"14. WebpackPlugin 提供应用所需插件",depth:2},{id:"15-webpackmodule-处理不同模块加载规则",text:"15. WebpackModule 处理不同模块加载规则",depth:2},{id:"16-总结",text:"16. 总结",depth:2}],title:"Taro 源码揭秘：9. Taro 是如何生成 webpack 配置进行构建小程序的？",headingTitle:"Taro 源码揭秘：9. Taro 是如何生成 webpack 配置进行构建小程序的？",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(n,e,i){i.d(e,{Z:()=>o});var r=i(52676),s=i(75271),a=i(92815);i(18544);let c={"zh-CN":n=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${n.minutes>=1?`${Math.ceil(n.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function t(n,e,i){let r=Object.keys(c).includes(e)?e:i;return c[r](n)}let o=n=>{let{defaultLocale:e="en-US"}=n,i=(0,a.Vi)().page.readingTimeData,c=(0,a.Jr)(),o=(0,a.e7)(),[l,d]=(0,s.useState)(t(i,c,e));return(0,s.useEffect)(()=>{d(t(i,c,e))},[c,i]),(0,r.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:l})}}}]);