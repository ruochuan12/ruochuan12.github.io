"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["2607"],{48888:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var t=s(52676),r=s(40453),i=s(20713);let d=s.p+"static/image/debugger.22150243.png";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",strong:"strong",code:"code",pre:"pre",img:"img",h3:"h3",h4:"h4"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"为什么-vue2-this-能够直接获取到-data-和-methods",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么-vue2-this-能够直接获取到-data-和-methods",children:"#"}),"为什么 Vue2 this 能够直接获取到 data 和 methods"]}),"\n",(0,t.jsx)(i.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsxs)(n.h2,{id:"1-前言",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["大家好，我是",(0,t.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。欢迎关注我的",(0,t.jsx)(n.a,{href:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/13/16efe57ddc7c9eb3~tplv-t2oaga2asx-image.image",title:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/13/16efe57ddc7c9eb3~tplv-t2oaga2asx-image.image",rel:"noopener noreferrer",target:"_blank",children:"公众号若川视野"}),"，最近组织了",(0,t.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:(0,t.jsx)(n.strong,{children:"源码共读活动"})}),"，感兴趣的可以加我微信 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"})," 参与，大家一起交流学习，共同进步。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["之前写的",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"})," 包含",(0,t.jsx)(n.code,{children:"jQuery"}),"、",(0,t.jsx)(n.code,{children:"underscore"}),"、",(0,t.jsx)(n.code,{children:"lodash"}),"、",(0,t.jsx)(n.code,{children:"vuex"}),"、",(0,t.jsx)(n.code,{children:"sentry"}),"、",(0,t.jsx)(n.code,{children:"axios"}),"、",(0,t.jsx)(n.code,{children:"redux"}),"、",(0,t.jsx)(n.code,{children:"koa"}),"、",(0,t.jsx)(n.code,{children:"vue-devtools"}),"、",(0,t.jsx)(n.code,{children:"vuex4"}),"十余篇源码文章。其中最新的三篇是："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7005375860509245471",rel:"noopener noreferrer",target:"_blank",children:"50行代码串行Promise，koa洋葱模型原来是这么实现？"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6997943192851054606",rel:"noopener noreferrer",target:"_blank",children:"Vue 3.2 发布了，那尤雨溪是怎么发布 Vue.js 的？"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6994976281053888519",rel:"noopener noreferrer",target:"_blank",children:"初学者也能看懂的 Vue3 源码中那些实用的基础工具函数"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["写相对很难的源码，耗费了自己的时间和精力，也没收获多少阅读点赞，其实是一件挺受打击的事情。从阅读量和读者受益方面来看，不能促进作者持续输出文章。\n所以转变思路，写一些相对通俗易懂的文章。",(0,t.jsx)(n.strong,{children:"其实源码也不是想象的那么难，至少有很多看得懂"}),"。歌德曾说：读一本好书，就是在和高尚的人谈话。\n同理可得：读源码，也算是和作者的一种学习交流的方式。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["本文源于一次",(0,t.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"源码共读"}),"群里群友的提问，请问@若川，“",(0,t.jsx)(n.strong,{children:"为什么 data 中的数据可以用 this 直接获取到啊"}),"”，当时我翻阅源码做出了解答。想着如果下次有人再次问到，我还需要回答一次。当时打算有空写篇文章告诉读者自己探究原理，于是就有了这篇文章。"]}),"\n",(0,t.jsx)(n.p,{children:"阅读本文，你将学到："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"1. 如何学习调试 vue2 源码\n2. data 中的数据为什么可以用 this 直接获取到\n3. methods 中的方法为什么可以用 this 直接获取到\n4. 学习源码中优秀代码和思想，投入到自己的项目中\n"})}),"\n",(0,t.jsxs)(n.p,{children:["本文不难，用过 ",(0,t.jsx)(n.code,{children:"Vue"})," 的都看得懂，希望大家动手调试和学会看源码。"]}),"\n",(0,t.jsx)(n.p,{children:"看源码可以大胆猜测，最后小心求证。"}),"\n",(0,t.jsxs)(n.h2,{id:"2-示例this-能够直接获取到-data-和-methods",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-示例this-能够直接获取到-data-和-methods",children:"#"}),"2. 示例：this 能够直接获取到 data 和 methods"]}),"\n",(0,t.jsxs)(n.p,{children:["众所周知，这样是可以输出",(0,t.jsx)(n.code,{children:"我是若川"}),"的。好奇的人就会思考为啥 ",(0,t.jsx)(n.code,{children:"this"})," 就能直接访问到呢。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const vm = new Vue({\n    data: {\n        name: '我是若川',\n    },\n    methods: {\n        sayName(){\n            console.log(this.name);\n        }\n    },\n});\nconsole.log(vm.name); // 我是若川\nconsole.log(vm.sayName()); // 我是若川\n"})}),"\n",(0,t.jsxs)(n.p,{children:["那么为什么 ",(0,t.jsx)(n.code,{children:"this.xxx"})," 能获取到",(0,t.jsx)(n.code,{children:"data"}),"里的数据，能获取到 ",(0,t.jsx)(n.code,{children:"methods"})," 方法。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们自己构造写的函数，如何做到类似",(0,t.jsx)(n.code,{children:"Vue"}),"的效果呢。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function Person(options){\n\n}\n\nconst p = new Person({\n    data: {\n        name: '若川'\n    },\n    methods: {\n        sayName(){\n            console.log(this.name);\n        }\n    }\n});\n\nconsole.log(p.name);\n// undefined\nconsole.log(p.sayName());\n// Uncaught TypeError: p.sayName is not a function\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如果是你，你会怎么去实现呢。带着问题，我们来调试 ",(0,t.jsx)(n.code,{children:"Vue2"}),"源码学习。"]}),"\n",(0,t.jsxs)(n.h2,{id:"3-准备环境调试源码一探究竟",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-准备环境调试源码一探究竟",children:"#"}),"3. 准备环境调试源码一探究竟"]}),"\n",(0,t.jsxs)(n.p,{children:["可以在本地新建一个文件夹",(0,t.jsx)(n.code,{children:"examples"}),"，新建文件",(0,t.jsx)(n.code,{children:"index.html"}),"文件。\n在",(0,t.jsx)(n.code,{children:"<body></body>"}),"中加上如下",(0,t.jsx)(n.code,{children:"js"}),"。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"<script src=\"https://unpkg.com/vue@2.6.14/dist/vue.js\"><\/script>\n<script>\n    const vm = new Vue({\n        data: {\n            name: '我是若川',\n        },\n        methods: {\n            sayName(){\n                console.log(this.name);\n            }\n        },\n    });\n    console.log(vm.name);\n    console.log(vm.sayName());\n<\/script>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["再全局安装",(0,t.jsx)(n.code,{children:"npm i -g http-server"}),"启动服务。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"npm i -g http-server\ncd examples\nhttp-server .\n// 如果碰到端口被占用，也可以指定端口\nhttp-server -p 8081 .\n"})}),"\n",(0,t.jsxs)(n.p,{children:["这样就能在",(0,t.jsx)(n.code,{children:"http://localhost:8080/"}),"打开刚写的",(0,t.jsx)(n.code,{children:"index.html"}),"页面了。"]}),"\n",(0,t.jsxs)(n.p,{children:["对于调试还不是很熟悉的读者，可以看这篇文章",(0,t.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/VOoDHqIo4gh3scHVNxk3lA",rel:"noopener noreferrer",target:"_blank",children:"《前端容易忽略的 debugger 调试技巧》"}),"，截图标注的很详细。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["调试：在 ",(0,t.jsx)(n.code,{children:"F12"})," 打开调试，",(0,t.jsx)(n.code,{children:"source"})," 面板，在例子中",(0,t.jsx)(n.code,{children:"const vm = new Vue({"}),"打上断点。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"如下图所示",src:d})}),"\n",(0,t.jsxs)(n.p,{children:["刷新页面后按",(0,t.jsx)(n.code,{children:"F11"}),"进入函数，这时断点就走进了 Vue 构造函数。"]}),"\n",(0,t.jsxs)(n.h3,{id:"31-vue-构造函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-vue-构造函数",children:"#"}),"3.1 Vue 构造函数"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function Vue (options) {\n    if (!(this instanceof Vue)\n    ) {\n        warn('Vue is a constructor and should be called with the `new` keyword');\n    }\n    this._init(options);\n}\n// 初始化\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["值得一提的是：",(0,t.jsx)(n.code,{children:"if (!(this instanceof Vue)){}"})," 判断是不是用了 ",(0,t.jsx)(n.code,{children:"new"})," 关键词调用构造函数。\n一般而言，我们平时应该不会考虑写这个。"]}),"\n",(0,t.jsxs)(n.p,{children:["当然看源码库也可以自己函数内部调用 ",(0,t.jsx)(n.code,{children:"new"})," 。但 ",(0,t.jsx)(n.code,{children:"vue"})," 一般一个项目只需要 ",(0,t.jsx)(n.code,{children:"new Vue()"})," 一次，所以没必要。"]}),"\n",(0,t.jsxs)(n.p,{children:["而 ",(0,t.jsx)(n.code,{children:"jQuery"})," 源码的就是内部 ",(0,t.jsx)(n.code,{children:"new"})," ，对于使用者来说就是无",(0,t.jsx)(n.code,{children:"new"}),"构造。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"jQuery = function( selector, context ) {\n  // 返回new之后的对象\n  return new jQuery.fn.init( selector, context );\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["因为使用 ",(0,t.jsx)(n.code,{children:"jQuery"})," 经常要调用。\n其实 ",(0,t.jsx)(n.code,{children:"jQuery"})," 也是可以 ",(0,t.jsx)(n.code,{children:"new"})," 的。和不用 ",(0,t.jsx)(n.code,{children:"new"})," 是一个效果。"]}),"\n",(0,t.jsxs)(n.p,{children:["如果不明白 ",(0,t.jsx)(n.code,{children:"new"})," 操作符的用处，可以看我之前的文章。",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6844903704663949325",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的new操作符"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["调试：继续在",(0,t.jsx)(n.code,{children:"this._init(options);"}),"处打上断点，按",(0,t.jsx)(n.code,{children:"F11"}),"进入函数。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"32-_init-初始化函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-_init-初始化函数",children:"#"}),"3.2 _init 初始化函数"]}),"\n",(0,t.jsxs)(n.p,{children:["进入 ",(0,t.jsx)(n.code,{children:"_init"})," 函数后，这个函数比较长，做了挺多事情，我们猜测跟",(0,t.jsx)(n.code,{children:"data"}),"和",(0,t.jsx)(n.code,{children:"methods"}),"相关的实现在",(0,t.jsx)(n.code,{children:"initState(vm)"}),"函数里。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// 代码有删减\nfunction initMixin (Vue) {\n    Vue.prototype._init = function (options) {\n      var vm = this;\n      // a uid\n      vm._uid = uid$3++;\n\n      // a flag to avoid this being observed\n      vm._isVue = true;\n      // merge options\n      if (options && options._isComponent) {\n        // optimize internal component instantiation\n        // since dynamic options merging is pretty slow, and none of the\n        // internal component options needs special treatment.\n        initInternalComponent(vm, options);\n      } else {\n        vm.$options = mergeOptions(\n          resolveConstructorOptions(vm.constructor),\n          options || {},\n          vm\n        );\n      }\n\n      // expose real self\n      vm._self = vm;\n      initLifecycle(vm);\n      initEvents(vm);\n      initRender(vm);\n      callHook(vm, 'beforeCreate');\n      initInjections(vm); // resolve injections before data/props\n      //  初始化状态\n      initState(vm);\n      initProvide(vm); // resolve provide after data/props\n      callHook(vm, 'created');\n    };\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["调试：接着我们在",(0,t.jsx)(n.code,{children:"initState(vm)"}),"函数这里打算断点，按",(0,t.jsx)(n.code,{children:"F8"}),"可以直接跳转到这个断点，然后按",(0,t.jsx)(n.code,{children:"F11"}),"接着进入",(0,t.jsx)(n.code,{children:"initState"}),"函数。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"33-initstate-初始化状态",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-initstate-初始化状态",children:"#"}),"3.3 initState 初始化状态"]}),"\n",(0,t.jsx)(n.p,{children:"从函数名来看，这个函数主要实现功能是："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"初始化 props\n初始化 methods\n监测数据\n初始化 computed\n初始化 watch\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function initState (vm) {\n    vm._watchers = [];\n    var opts = vm.$options;\n    if (opts.props) { initProps(vm, opts.props); }\n    // 有传入 methods，初始化方法\n    if (opts.methods) { initMethods(vm, opts.methods); }\n    // 有传入 data，初始化 data\n    if (opts.data) {\n      initData(vm);\n    } else {\n      observe(vm._data = {}, true /* asRootData */);\n    }\n    if (opts.computed) { initComputed(vm, opts.computed); }\n    if (opts.watch && opts.watch !== nativeWatch) {\n      initWatch(vm, opts.watch);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["我们重点来看初始化 ",(0,t.jsx)(n.code,{children:"methods"}),"，之后再看初始化 ",(0,t.jsx)(n.code,{children:"data"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["调试：在 ",(0,t.jsx)(n.code,{children:"initMethods"})," 这句打上断点，同时在",(0,t.jsx)(n.code,{children:"initData(vm)"}),"处打上断点，看完",(0,t.jsx)(n.code,{children:"initMethods"}),"函数后，可以直接按",(0,t.jsx)(n.code,{children:"F8"}),"回到",(0,t.jsx)(n.code,{children:"initData(vm)"}),"函数。\n继续按",(0,t.jsx)(n.code,{children:"F11"}),"，先进入",(0,t.jsx)(n.code,{children:"initMethods"}),"函数。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"34-initmethods-初始化方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-initmethods-初始化方法",children:"#"}),"3.4 initMethods 初始化方法"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function initMethods (vm, methods) {\n    var props = vm.$options.props;\n    for (var key in methods) {\n      {\n        if (typeof methods[key] !== \'function\') {\n          warn(\n            "Method \\"" + key + "\\" has type \\"" + (typeof methods[key]) + "\\" in the component definition. " +\n            "Did you reference the function correctly?",\n            vm\n          );\n        }\n        if (props && hasOwn(props, key)) {\n          warn(\n            ("Method \\"" + key + "\\" has already been defined as a prop."),\n            vm\n          );\n        }\n        if ((key in vm) && isReserved(key)) {\n          warn(\n            "Method \\"" + key + "\\" conflicts with an existing Vue instance method. " +\n            "Avoid defining component methods that start with _ or $."\n          );\n        }\n      }\n      vm[key] = typeof methods[key] !== \'function\' ? noop : bind(methods[key], vm);\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"initMethods"}),"函数，主要有一些判断。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"判断 methods 中的每一项是不是函数，如果不是警告。\n判断 methods 中的每一项是不是和 props 冲突了，如果是，警告。\n判断 methods 中的每一项是不是已经在 new Vue实例 vm 上存在，而且是方法名是保留的 _ $ （在JS中一般指内部变量标识）开头，如果是警告。\n"})}),"\n",(0,t.jsxs)(n.p,{children:["除去这些判断，我们可以看出",(0,t.jsx)(n.code,{children:"initMethods"}),"函数其实就是遍历传入的",(0,t.jsx)(n.code,{children:"methods"}),"对象，并且使用",(0,t.jsx)(n.code,{children:"bind"}),"绑定函数的this指向为",(0,t.jsx)(n.code,{children:"vm"}),"，也就是",(0,t.jsx)(n.code,{children:"new Vue"}),"的实例对象。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["这就是为什么我们可以通过",(0,t.jsx)(n.code,{children:"this"}),"直接访问到",(0,t.jsx)(n.code,{children:"methods"}),"里面的函数的原因"]}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们可以把鼠标移上 ",(0,t.jsx)(n.code,{children:"bind"})," 变量，按",(0,t.jsx)(n.code,{children:"alt"}),"键，可以看到函数定义的地方，这里是",(0,t.jsx)(n.code,{children:"218行"}),"，点击跳转到这里看 ",(0,t.jsx)(n.code,{children:"bind"})," 的实现。"]}),"\n",(0,t.jsxs)(n.h4,{id:"341-bind-返回一个函数修改-this-指向",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#341-bind-返回一个函数修改-this-指向",children:"#"}),"3.4.1 bind 返回一个函数，修改 this 指向"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function polyfillBind (fn, ctx) {\n    function boundFn (a) {\n      var l = arguments.length;\n      return l\n        ? l > 1\n          ? fn.apply(ctx, arguments)\n          : fn.call(ctx, a)\n        : fn.call(ctx)\n    }\n\n    boundFn._length = fn.length;\n    return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["简单来说就是兼容了老版本不支持 原生的bind函数。同时兼容写法，对参数多少做出了判断，使用",(0,t.jsx)(n.code,{children:"call"}),"和",(0,t.jsx)(n.code,{children:"apply"}),"实现，据说是因为性能问题。"]}),"\n",(0,t.jsxs)(n.p,{children:["如果对于",(0,t.jsx)(n.code,{children:"call、apply、bind"}),"的用法和实现不熟悉，可以查看我在",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6962099958979756062",rel:"noopener noreferrer",target:"_blank",children:"面试官问系列"}),"中写的",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6844903728147857415",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的call和apply方法"}),"\n",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6844903718089916429",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的bind方法"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["调试：看完了",(0,t.jsx)(n.code,{children:"initMethods"}),"函数，按",(0,t.jsx)(n.code,{children:"F8"}),"回到上文提到的",(0,t.jsx)(n.code,{children:"initData(vm)"}),"函数断点处。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"35-initdata-初始化-data",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-initdata-初始化-data",children:"#"}),"3.5 initData 初始化 data"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"initData"})," 函数也是一些判断。主要做了如下事情："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"先给 _data 赋值，以备后用。\n最终获取到的 data 不是对象给出警告。\n遍历 data ，其中每一项：\n如果和 methods 冲突了，报警告。\n如果和 props 冲突了，报警告。\n不是内部私有的保留属性，做一层代理，代理到 _data 上。\n最后监测 data，使之成为响应式的数据。\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function initData (vm) {\n    var data = vm.$options.data;\n    data = vm._data = typeof data === \'function\'\n      ? getData(data, vm)\n      : data || {};\n    if (!isPlainObject(data)) {\n      data = {};\n      warn(\n        \'data functions should return an object:\\n\' +\n        \'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function\',\n        vm\n      );\n    }\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var props = vm.$options.props;\n    var methods = vm.$options.methods;\n    var i = keys.length;\n    while (i--) {\n      var key = keys[i];\n      {\n        if (methods && hasOwn(methods, key)) {\n          warn(\n            ("Method \\"" + key + "\\" has already been defined as a data property."),\n            vm\n          );\n        }\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          "The data property \\"" + key + "\\" is already declared as a prop. " +\n          "Use prop default value instead.",\n          vm\n        );\n      } else if (!isReserved(key)) {\n        proxy(vm, "_data", key);\n      }\n    }\n    // observe data\n    observe(data, true /* asRootData */);\n}\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"351-getdata-获取数据",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#351-getdata-获取数据",children:"#"}),"3.5.1 getData 获取数据"]}),"\n",(0,t.jsx)(n.p,{children:"是函数时调用函数，执行获取到对象。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function getData (data, vm) {\n    // #7573 disable dep collection when invoking data getters\n    pushTarget();\n    try {\n      return data.call(vm, vm)\n    } catch (e) {\n      handleError(e, vm, "data()");\n      return {}\n    } finally {\n      popTarget();\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"352-proxy-代理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#352-proxy-代理",children:"#"}),"3.5.2 proxy 代理"]}),"\n",(0,t.jsxs)(n.p,{children:["其实就是用 ",(0,t.jsx)(n.code,{children:"Object.defineProperty"})," 定义对象"]}),"\n",(0,t.jsxs)(n.p,{children:["这里用处是：",(0,t.jsx)(n.code,{children:"this.xxx"})," 则是访问的 ",(0,t.jsx)(n.code,{children:"this._data.xxx"}),"。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n   * Perform no operation.\n   * Stubbing args to make Flow happy without leaving useless transpiled code\n   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n   */\nfunction noop (a, b, c) {}\nvar sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: noop,\n    set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n    sharedPropertyDefinition.get = function proxyGetter () {\n      return this[sourceKey][key]\n    };\n    sharedPropertyDefinition.set = function proxySetter (val) {\n      this[sourceKey][key] = val;\n    };\n    Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"353-objectdefineproperty-定义对象属性",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#353-objectdefineproperty-定义对象属性",children:"#"}),"3.5.3 Object.defineProperty 定义对象属性"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Object.defineProperty"})," 算是一个非常重要的API。还有一个定义多个属性的API：",(0,t.jsx)(n.code,{children:"Object.defineProperties(obj, props) (ES5)"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Object.defineProperty"})," 涉及到比较重要的知识点，面试也常考。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"value——当试图获取属性时所返回的值。\nwritable——该属性是否可写。\nenumerable——该属性在for in循环中是否会被枚举。\nconfigurable——该属性是否可被删除。\nset()——该属性的更新操作所调用的函数。\nget()——获取属性值时所调用的函数。\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://juejin.cn/post/6994976281053888519#heading-34",rel:"noopener noreferrer",target:"_blank",children:"详细举例见此链接"})}),"\n",(0,t.jsxs)(n.h3,{id:"36-文中出现的一些函数最后统一解释下",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36-文中出现的一些函数最后统一解释下",children:"#"}),"3.6 文中出现的一些函数，最后统一解释下"]}),"\n",(0,t.jsxs)(n.h4,{id:"361-hasown-是否是对象本身拥有的属性",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#361-hasown-是否是对象本身拥有的属性",children:"#"}),"3.6.1 hasOwn 是否是对象本身拥有的属性"]}),"\n",(0,t.jsxs)(n.p,{children:["调试模式下，按",(0,t.jsx)(n.code,{children:"alt"}),"键，把鼠标移到方法名上，可以看到函数定义的地方。点击可以跳转。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n   * Check whether an object has the property.\n   */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\nhasOwn({ a: undefined }, 'a') // true\nhasOwn({}, 'a') // false\nhasOwn({}, 'hasOwnProperty') // false\nhasOwn({}, 'toString') // false\n// 是自己的本身拥有的属性，不是通过原型链向上查找的。\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"362-isreserved-是否是内部私有保留的字符串--和-_-开头",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#362-isreserved-是否是内部私有保留的字符串--和-_-开头",children:"#"}),"3.6.2 isReserved 是否是内部私有保留的字符串$  和 _ 开头"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n   * Check if a string starts with $ or _\n   */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\nisReserved('_data'); // true\nisReserved('$options'); // true\nisReserved('data'); // false\nisReserved('options'); // false\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"4-最后用60余行代码实现简化版",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-最后用60余行代码实现简化版",children:"#"}),"4. 最后用60余行代码实现简化版"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function noop (a, b, c) {}\nvar sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: noop,\n    set: noop\n};\nfunction proxy (target, sourceKey, key) {\n    sharedPropertyDefinition.get = function proxyGetter () {\n      return this[sourceKey][key]\n    };\n    sharedPropertyDefinition.set = function proxySetter (val) {\n      this[sourceKey][key] = val;\n    };\n    Object.defineProperty(target, key, sharedPropertyDefinition);\n}\nfunction initData(vm){\n  const data = vm._data = vm.$options.data;\n  const keys = Object.keys(data);\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    proxy(vm, '_data', key);\n  }\n}\nfunction initMethods(vm, methods){\n  for (var key in methods) {\n    vm[key] = typeof methods[key] !== 'function' ? noop : methods[key].bind(vm);\n  }\n}\n\nfunction Person(options){\n  let vm = this;\n  vm.$options = options;\n  var opts = vm.$options;\n  if(opts.data){\n    initData(vm);\n  }\n  if(opts.methods){\n    initMethods(vm, opts.methods)\n  }\n}\n\nconst p = new Person({\n    data: {\n        name: '若川'\n    },\n    methods: {\n        sayName(){\n            console.log(this.name);\n        }\n    }\n});\n\nconsole.log(p.name);\n// 未实现前： undefined\n// '若川'\nconsole.log(p.sayName());\n// 未实现前：Uncaught TypeError: p.sayName is not a function\n// '若川'\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"5-总结",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-总结",children:"#"}),"5. 总结"]}),"\n",(0,t.jsx)(n.p,{children:"本文涉及到的基础知识主要有如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"构造函数\nthis 指向\ncall、bind、apply\nObject.defineProperty\n等等基础知识。\n"})}),"\n",(0,t.jsxs)(n.p,{children:["本文源于解答源码共读群友的疑惑，通过详细的描述了如何调试 ",(0,t.jsx)(n.code,{children:"Vue"})," 源码，来探寻答案。"]}),"\n",(0,t.jsx)(n.p,{children:"解答文章开头提问："}),"\n",(0,t.jsxs)(n.p,{children:["通过",(0,t.jsx)(n.code,{children:"this"}),"直接访问到",(0,t.jsx)(n.code,{children:"methods"}),"里面的函数的原因是：因为",(0,t.jsx)(n.code,{children:"methods"}),"里的方法通过 ",(0,t.jsx)(n.code,{children:"bind"})," 指定了",(0,t.jsx)(n.code,{children:"this"}),"为 new Vue的实例(",(0,t.jsx)(n.code,{children:"vm"}),")。"]}),"\n",(0,t.jsxs)(n.p,{children:["通过 ",(0,t.jsx)(n.code,{children:"this"})," 直接访问到 ",(0,t.jsx)(n.code,{children:"data"})," 里面的数据的原因是：data里的属性最终会存储到",(0,t.jsx)(n.code,{children:"new Vue"}),"的实例（",(0,t.jsx)(n.code,{children:"vm"}),"）上的 ",(0,t.jsx)(n.code,{children:"_data"}),"对象中，访问 ",(0,t.jsx)(n.code,{children:"this.xxx"}),"，是访问",(0,t.jsx)(n.code,{children:"Object.defineProperty"}),"代理后的 ",(0,t.jsx)(n.code,{children:"this._data.xxx"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Vue"}),"的这种设计，好处在于便于获取。也有不方便的地方，就是",(0,t.jsx)(n.code,{children:"props"}),"、",(0,t.jsx)(n.code,{children:"methods"})," 和 ",(0,t.jsx)(n.code,{children:"data"}),"三者容易产生冲突。"]}),"\n",(0,t.jsxs)(n.p,{children:["文章整体难度不大，但非常建议读者朋友们自己动手调试下。调试后，你可能会发现：原来 ",(0,t.jsx)(n.code,{children:"Vue"})," 源码，也没有想象中的那么难，也能看懂一部分。"]}),"\n",(0,t.jsx)(n.p,{children:"启发：我们工作使用常用的技术和框架或库时，保持好奇心，多思考内部原理。能够做到知其然，知其所以然。就能远超很多人。"}),"\n",(0,t.jsxs)(n.p,{children:["你可能会思考，为什么模板语法中，可以省略",(0,t.jsx)(n.code,{children:"this"}),"关键词写法呢，内部模板编译时其实是用了",(0,t.jsx)(n.code,{children:"with"}),"。有余力的读者可以探究这一原理。"]}),"\n",(0,t.jsxs)(n.p,{children:["最后欢迎加我微信 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"})," 交流，参与 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/pin/7005372623400435725",rel:"noopener noreferrer",target:"_blank",children:"源码共读"})," 活动，大家一起学习源码，共同进步。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["vue-this%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-示例this-能够直接获取到-data-和-methods",text:"2. 示例：this 能够直接获取到 data 和 methods",depth:2},{id:"3-准备环境调试源码一探究竟",text:"3. 准备环境调试源码一探究竟",depth:2},{id:"31-vue-构造函数",text:"3.1 Vue 构造函数",depth:3},{id:"32-_init-初始化函数",text:"3.2 _init 初始化函数",depth:3},{id:"33-initstate-初始化状态",text:"3.3 initState 初始化状态",depth:3},{id:"34-initmethods-初始化方法",text:"3.4 initMethods 初始化方法",depth:3},{id:"341-bind-返回一个函数修改-this-指向",text:"3.4.1 bind 返回一个函数，修改 this 指向",depth:4},{id:"35-initdata-初始化-data",text:"3.5 initData 初始化 data",depth:3},{id:"351-getdata-获取数据",text:"3.5.1 getData 获取数据",depth:4},{id:"352-proxy-代理",text:"3.5.2 proxy 代理",depth:4},{id:"353-objectdefineproperty-定义对象属性",text:"3.5.3 Object.defineProperty 定义对象属性",depth:4},{id:"36-文中出现的一些函数最后统一解释下",text:"3.6 文中出现的一些函数，最后统一解释下",depth:3},{id:"361-hasown-是否是对象本身拥有的属性",text:"3.6.1 hasOwn 是否是对象本身拥有的属性",depth:4},{id:"362-isreserved-是否是内部私有保留的字符串--和-_-开头",text:"3.6.2 isReserved 是否是内部私有保留的字符串$  和 _ 开头",depth:4},{id:"4-最后用60余行代码实现简化版",text:"4. 最后用60余行代码实现简化版",depth:2},{id:"5-总结",text:"5. 总结",depth:2}],title:"为什么 Vue2 this 能够直接获取到 data 和 methods",headingTitle:"为什么 Vue2 this 能够直接获取到 data 和 methods",frontmatter:{}}},20713:function(e,n,s){s.d(n,{Z:()=>o});var t=s(52676),r=s(75271),i=s(92815);s(18544);let d={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function a(e,n,s){let t=Object.keys(d).includes(n)?n:s;return d[t](e)}let o=e=>{let{defaultLocale:n="en-US"}=e,s=(0,i.Vi)().page.readingTimeData,d=(0,i.Jr)(),o=(0,i.e7)(),[c,h]=(0,r.useState)(a(s,d,n));return(0,r.useEffect)(()=>{h(a(s,d,n))},[d,s]),(0,t.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:c})}}}]);