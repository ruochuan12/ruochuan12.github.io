"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["3985"],{71339:function(e,n,r){r.r(n),r.d(n,{default:()=>P});var s=r(52676),i=r(40453),c=r(20713);let l=r.p+"static/image/image.2c2e9e9d.png",t=r.p+"static/image/vuemini-vs-taro.bfa780ab.png",o=r.p+"static/image/vue-mini-diff.22dd835a.png",a=r.p+"static/image/vue-mini-diff-2.5a41f61a.png",d=r.p+"static/image/screenshot-cli.06aa5e4a.png",h=r.p+"static/image/vue-mini-project.800c136c.png",p=r.p+"static/image/vue-mini-project-mine.d6271a2e.png",j=r.p+"static/image/app.ts.d0961b40.png",x=r.p+"static/image/home.html.1b5e12a3.png",m=r.p+"static/image/home.css.a9935fe5.png",u=r.p+"static/image/home.ts.6fe1929a.png",f=r.p+"static/image/home.json.35591472.png",g=r.p+"static/image/build.ff1009c2.png",b=r.p+"static/image/debugger.a83717e0.png",w=r.p+"static/image/npm.7e82fd8d.png",v=r.p+"static/image/vue-mini.drawio.9a0acaa2.png",k=r.p+"static/image/vue-mini-next.17bf1847.png";function _(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre",h3:"h3",blockquote:"blockquote",ol:"ol",li:"li",h4:"h4",hr:"hr",strong:"strong"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"开发小程序又一新选择-vue-mini据说性能是-taro-的-10-倍遥遥领先",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开发小程序又一新选择-vue-mini据说性能是-taro-的-10-倍遥遥领先",children:"#"}),"开发小程序又一新选择 vue-mini，据说性能是 Taro 的 10 倍，遥遥领先"]}),"\n",(0,s.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h2,{id:"1-前言",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,s.jsxs)(n.p,{children:["大家好，我是",(0,s.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"，欢迎关注我的",(0,s.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。我倾力持续组织了 3 年多",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,s.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,s.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,s.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]}),"\n",(0,s.jsxs)(n.p,{children:["刚刚结束不久的",(0,s.jsx)(n.a,{href:"https://vueconf.cn",rel:"noopener noreferrer",target:"_blank",children:"vueconf 2024 深圳"}),"，有一个主题《Vue-Mini 不妥协的小程序框架》，",(0,s.jsx)(n.a,{href:"https://github.com/yangmingshan/slides",rel:"noopener noreferrer",target:"_blank",children:"仓库"}),"、",(0,s.jsx)(n.a,{href:"https://feday.fequan.com/vueconf24/mingshan_VueConf%20CN%202024.pdf",rel:"noopener noreferrer",target:"_blank",children:"PPT"}),"、",(0,s.jsx)(n.a,{href:"https://www.bilibili.com/video/BV1J4421D7ja/",rel:"noopener noreferrer",target:"_blank",children:"视频"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vueconf.cn 截图",src:l})}),"\n",(0,s.jsx)(n.p,{children:"PPT 中有这样两页。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"taro 10x",src:t})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/yangmingshan/mp-framework-benchmark",rel:"noopener noreferrer",target:"_blank",children:"和 taro 性能对比数据的仓库链接"}),"，目前作者暂未给出与 ",(0,s.jsx)(n.code,{children:"uniapp"})," 的性能对比。",(0,s.jsx)(n.a,{href:"https://github.com/yangmingshan/mp-framework-benchmark/issues/1",rel:"noopener noreferrer",target:"_blank",children:"有小伙伴在 issue 中问到，作者回复后续会补上"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://vuemini.org/guide/comparisons.html",rel:"noopener noreferrer",target:"_blank",children:"vue-mini 官网"})," 与其他的比较。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini 官网与其他的比较",src:o})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini 官网与其他的比较",src:a})}),"\n",(0,s.jsxs)(n.p,{children:["更多兼容性和使用方法等查阅",(0,s.jsx)(n.a,{href:"https://vuemini.org/",rel:"noopener noreferrer",target:"_blank",children:"vue-mini 文档"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["本文主要来简单体验下 ",(0,s.jsx)(n.code,{children:"vue-mini"}),"，并且学习下基本的打包构建大概是如何实现的。"]}),"\n",(0,s.jsx)(n.p,{children:"学完本文，你将学到："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"1. vue-mini 初步体验\n2. 初始化项目中的 build.js 是如何打包小程序代码的\n3. 如何处理 ts、css、html 文件\n4. 等等\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"2-初始化项目",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-初始化项目",children:"#"}),"2. 初始化项目"]}),"\n",(0,s.jsxs)(n.p,{children:["根据 ",(0,s.jsx)(n.a,{href:"https://vuemini.org/guide/quick-start.html",rel:"noopener noreferrer",target:"_blank",children:"官网文档快速开始"})," 生成小程序项目，我采用的是 ",(0,s.jsx)(n.code,{children:"pnpm create vue-mini@latest"}),'，我都选择的"是"。如下图所示：']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"screenshot-cli",src:d})}),"\n",(0,s.jsxs)(n.p,{children:["这个命令调用的是 ",(0,s.jsx)(n.a,{href:"https://github.com/vue-mini/create-vue-mini",rel:"noopener noreferrer",target:"_blank",children:"create-vue-mini"})," 这个项目，写文章时的版本是 ",(0,s.jsx)(n.code,{children:"1.0.4"}),"。它由 ",(0,s.jsx)(n.a,{href:"https://github.com/vuejs/create-vue",rel:"noopener noreferrer",target:"_blank",children:"create-vue"})," 修改而来。我在21年写过它的源码文章",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7018344866811740173",rel:"noopener noreferrer",target:"_blank",children:"Vue 团队公开快如闪电的全新脚手架工具 create-vue，未来将替代 Vue-CLI，才300余行代码，学它！"}),"，(3.9w+阅读量、483赞)可供学习。"]}),"\n",(0,s.jsx)(n.p,{children:"也可以直接克隆我的项目。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/ruochuan12/vue-mini-analysis.git\ncd vue-mini-analysis\npnpm install\n"})}),"\n",(0,s.jsxs)(n.p,{children:["执行 ",(0,s.jsx)(n.code,{children:"pnpm install"})," 之后，再执行 ",(0,s.jsx)(n.code,{children:"pnpm run dev"})," 或者 ",(0,s.jsx)(n.code,{children:"pnpm run build"})," 命令。"]}),"\n",(0,s.jsxs)(n.h2,{id:"3-体验-vue-mini",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-体验-vue-mini",children:"#"}),"3. 体验 vue-mini"]}),"\n",(0,s.jsxs)(n.p,{children:["直接选择项目根目录而非 ",(0,s.jsx)(n.code,{children:"dist"})," 目录，将此项目导入微信开发者工具。"]}),"\n",(0,s.jsx)(n.p,{children:"打开项目如图："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini-project",src:h})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini-project-mine",src:p})}),"\n",(0,s.jsxs)(n.h3,{id:"31-对比打包构建的代码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-对比打包构建的代码",children:"#"}),"3.1 对比打包构建的代码"]}),"\n",(0,s.jsxs)(n.p,{children:["我们具体来对比执行 ",(0,s.jsx)(n.code,{children:"pnpm run dev"})," 命令之后生成的代码。"]}),"\n",(0,s.jsx)(n.p,{children:"入口 app.ts 文件。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"入口 app.ts 文件",src:j})}),"\n",(0,s.jsxs)(n.p,{children:["首页 html 文件\n",(0,s.jsx)(n.img,{alt:"首页 html 文件",src:x})]}),"\n",(0,s.jsxs)(n.p,{children:["首页 css 文件\n",(0,s.jsx)(n.img,{alt:"首页 css 文件",src:m})]}),"\n",(0,s.jsxs)(n.p,{children:["首页 ts 文件\n",(0,s.jsx)(n.img,{alt:"首页 ts 文件",src:u})]}),"\n",(0,s.jsxs)(n.p,{children:["首页 json 文件\n",(0,s.jsx)(n.img,{alt:"首页 json 文件",src:f})]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以看到主要就是处理入口 ",(0,s.jsx)(n.code,{children:"app.ts"})," 文件（单独追加了 ",(0,s.jsx)(n.code,{children:"promise-polyfill"}),"）、",(0,s.jsx)(n.code,{children:"html"}),"、",(0,s.jsx)(n.code,{children:"css"}),"、",(0,s.jsx)(n.code,{children:"ts"}),"文件编译成了微信小程序支持的 ",(0,s.jsx)(n.code,{children:"app.js"}),"、",(0,s.jsx)(n.code,{children:"wxml"}),"、",(0,s.jsx)(n.code,{children:"wxss"}),"、",(0,s.jsx)(n.code,{children:"js"}),"。",(0,s.jsx)(n.code,{children:"json"})," 文件是直接复制的，没做处理。"]}),"\n",(0,s.jsxs)(n.p,{children:["换句话说：\n模板写法使用的是原生微信小程序的",(0,s.jsx)(n.code,{children:"wxml"}),"，只是改名了 ",(0,s.jsx)(n.code,{children:"html"})," 而已，",(0,s.jsx)(n.code,{children:"css"})," 部分也是原生微信小程序的 ",(0,s.jsx)(n.code,{children:"wxss"})," 只是单位 ",(0,s.jsx)(n.code,{children:"rpx"})," 改成了 ",(0,s.jsx)(n.code,{children:"px"})," 而已，未做类似单文件组件的编译。只是在逻辑侧，",(0,s.jsx)(n.code,{children:"ts"})," 文件使用了 ",(0,s.jsx)(n.code,{children:"vue-mini/core"}),"，轻运行时，会把 ",(0,s.jsx)(n.code,{children:"ES Module"})," 编译成 ",(0,s.jsx)(n.code,{children:"commonjs"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"31-dev-和-build-命令",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-dev-和-build-命令",children:"#"}),"3.1 dev 和 build 命令"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pnpm run dev"})," 和 ",(0,s.jsx)(n.code,{children:"pnpm run build"})," 分别对应的是 ",(0,s.jsx)(n.code,{children:"package.json"})," 中的两个命令。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n "scripts": {\n  "dev": "cross-env NODE_ENV=development node build.js",\n  "build": "cross-env NODE_ENV=production node build.js"\n }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/cross-env",rel:"noopener noreferrer",target:"_blank",children:"cross-env"})," 是用来跨平台设置环境变量的，",(0,s.jsx)(n.code,{children:"NODE_ENV=development"})," 代表开发环境，",(0,s.jsx)(n.code,{children:"NODE_ENV=production"})," 代表生产环境。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以打开 ",(0,s.jsx)(n.code,{children:"build.js"})," 文件，查看下它的代码。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"build png",src:g})}),"\n",(0,s.jsxs)(n.p,{children:["调试可参考我的文章",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7030584939020042254",rel:"noopener noreferrer",target:"_blank",children:"新手向：前端程序员必学基本技能——调试 JS 代码"}),"，或者",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7212263304394981432",rel:"noopener noreferrer",target:"_blank",children:"据说 90%的人不知道可以用测试用例(Vitest)调试开源项目(Vue3) 源码"}),"。本文就不做过多赘述。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"debugger",src:b})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"build.js"})," 目前是比较原始的方式，没有各种封装，相对容易学习。有小伙伴提建议",(0,s.jsx)(n.a,{href:"https://github.com/vue-mini/vue-mini/issues/65",rel:"noopener noreferrer",target:"_blank",children:"[Feature] 希望可以增强工程化等基建体验 #65"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["让我想起很久很久以前（大约是6年前），",(0,s.jsx)(n.code,{children:"vue-cli@2.9.3"})," 版本时就是用生成 ",(0,s.jsx)(n.code,{children:"vue"})," 项目就是直接生成在开发者的项目中。比较难以和官方保持同步升级。后来 ",(0,s.jsx)(n.code,{children:"vue-cli@3.0"})," 之后版本就能相对容易升级了。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["当时写过一篇文章",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6844903619184033800",rel:"noopener noreferrer",target:"_blank",children:"分析vue-cli@2.9.3 搭建的webpack项目工程"}),"，webpack 配置相关可能过时了，但其他知识没有过时，感兴趣的小伙伴可以学习。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"3-buildjs-打包构建文件",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-buildjs-打包构建文件",children:"#"}),"3. build.js 打包构建文件"]}),"\n",(0,s.jsxs)(n.h3,{id:"31-引入各种依赖",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-引入各种依赖",children:"#"}),"3.1 引入各种依赖"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 引入 node path 模块和 process 模块\nimport path from 'node:path';\nimport process from 'node:process';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"引入 node path 模块和 process 模块"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import fs from 'fs-extra';\nimport chokidar from 'chokidar';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/fs-extra",rel:"noopener noreferrer",target:"_blank",children:"fs-extra"})," 模块，用来操作文件和目录\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/chokidar",rel:"noopener noreferrer",target:"_blank",children:"chokidar"})," 模块，用来监听文件变化"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import babel from '@babel/core';\nimport traverse from '@babel/traverse';\nimport t from '@babel/types';\nimport { minify } from 'terser';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@babel/core",rel:"noopener noreferrer",target:"_blank",children:"@babel/core"})," 模块，用来编译 js 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@babel/traverse",rel:"noopener noreferrer",target:"_blank",children:"@babel/traverse"})," 模块，用来遍历 js 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@babel/types",rel:"noopener noreferrer",target:"_blank",children:"@babel/types"})," 模块，用来编译 js 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/terser",rel:"noopener noreferrer",target:"_blank",children:"terser"})," 模块，用来压缩 js 代码"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import postcss from 'postcss';\nimport postcssrc from 'postcss-load-config';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/postcss",rel:"noopener noreferrer",target:"_blank",children:"postcss"})," 模块，用来编译 css 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/postcss-load-config",rel:"noopener noreferrer",target:"_blank",children:"postcss-load-config"})," 模块，用来加载 postcss 配置文件"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { rollup } from 'rollup';\nimport replace from '@rollup/plugin-replace';\nimport terser from '@rollup/plugin-terser';\nimport resolve from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/rollup",rel:"noopener noreferrer",target:"_blank",children:"rollup"})," 模块，用来打包 js 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@rollup/plugin-replace",rel:"noopener noreferrer",target:"_blank",children:"@rollup/plugin-replace"})," 模块，用来替换代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@rollup/plugin-terser",rel:"noopener noreferrer",target:"_blank",children:"@rollup/plugin-terser"})," 模块，用来压缩 js 代码\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@rollup/@rollup/plugin-node-resolve",rel:"noopener noreferrer",target:"_blank",children:"@rollup/plugin-node-resolve"})," 模块，用来解析 node_modules 中的依赖\n引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@rollup/@rollup/commonjs",rel:"noopener noreferrer",target:"_blank",children:"@rollup/commonjs"})," 模块，用来解析 commonjs 依赖"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { green, bold } from 'kolorist';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/kolorist",rel:"noopener noreferrer",target:"_blank",children:"kolorist"})," 模块，用来输出彩色文字"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"32-定义变量",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-定义变量",children:"#"}),"3.2 定义变量"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 等待列表， promise 数组\nlet waitList = [];\n// 开始时间，计算最终打包时间\nconst startTime = Date.now();\n// 区分开发环境和生产环境\nconst NODE_ENV = process.env.NODE_ENV || 'production';\n// 生产环境\nconst __PROD__ = NODE_ENV === 'production';\n// 压缩代码的配置\nconst terserOptions = {\n  ecma: 2016,\n  toplevel: true,\n  safari10: true,\n  format: { comments: false },\n};\n\n// 记录打包的模块，方便避免重复打包\nconst bundledModules = new Set();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"33-调用-prod-或者-dev",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-调用-prod-或者-dev",children:"#"}),"3.3 调用 prod 或者 dev"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"if (__PROD__) {\n  await prod();\n} else {\n  await dev();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们先来看 ",(0,s.jsx)(n.code,{children:"prod"})," 函数，再看 ",(0,s.jsx)(n.code,{children:"dev"})," 函数。"]}),"\n",(0,s.jsxs)(n.h3,{id:"34-prod-函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-prod-函数",children:"#"}),"3.4 prod 函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function prod() {\n  await fs.remove('dist');\n  const watcher = chokidar.watch(['src'], {\n    ignored: ['**/.{gitkeep,DS_Store}'],\n  });\n  watcher.on('add', (filePath) => {\n    const promise = cb(filePath);\n    waitList.push(promise);\n  });\n  watcher.on('ready', async () => {\n    const promise = watcher.close();\n    waitList.push(promise);\n    await Promise.all(waitList);\n    console.log(bold(green(`构建完成，耗时：${Date.now() - startTime}ms`)));\n  });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这个函数主要做了以下几件事："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"移除 dist 目录"}),"\n",(0,s.jsx)(n.li,{children:"监听 src 目录"}),"\n",(0,s.jsx)(n.li,{children:"对于监听的文件，调用 cb 函数，把返回的 promise ，存入数组 waitList。"}),"\n",(0,s.jsxs)(n.li,{children:["最后调用 Promise.all(waitList) 执行所有的 ",(0,s.jsx)(n.code,{children:"promise"}),"。"]}),"\n",(0,s.jsx)(n.li,{children:"最后打印构建时长。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"35-dev-函数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-dev-函数",children:"#"}),"3.5 dev 函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function dev() {\n  await fs.remove('dist');\n  chokidar\n    .watch(['src'], {\n      ignored: ['**/.{gitkeep,DS_Store}'],\n    })\n    .on('add', (filePath) => {\n      const promise = cb(filePath);\n      waitList?.push(promise);\n    })\n    .on('change', (filePath) => {\n      cb(filePath);\n    })\n    .on('ready', async () => {\n      await Promise.all(waitList);\n      console.log(bold(green(`启动完成，耗时：${Date.now() - startTime}ms`)));\n      console.log(bold(green('监听文件变化中...')));\n      // Release memory.\n      waitList = null;\n    });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这个函数和 prod 函数类似，主要做了以下几件事："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"移除 dist 目录"}),"\n",(0,s.jsx)(n.li,{children:"监听 src 目录"}),"\n",(0,s.jsx)(n.li,{children:"对于监听的文件，调用 cb 函数，把返回的 promise ，存入数组 waitList。"}),"\n",(0,s.jsx)(n.li,{children:"文件改变时，调用 cb 函数。"}),"\n",(0,s.jsxs)(n.li,{children:["调用 Promise.all(waitList) 执行所有的 ",(0,s.jsx)(n.code,{children:"promise"}),"。"]}),"\n",(0,s.jsx)(n.li,{children:"最后打印启动时长，清空 waitList。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们接着来看，",(0,s.jsx)(n.code,{children:"cb"})," 函数，这个函数用来处理文件变化。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cb = async (filePath) => {\n  if (/\\.ts$/.test(filePath)) {\n    await processScript(filePath);\n    return;\n  }\n\n  if (/\\.html$/.test(filePath)) {\n    await processTemplate(filePath);\n    return;\n  }\n\n  if (/\\.css$/.test(filePath)) {\n    await processStyle(filePath);\n    return;\n  }\n\n  await fs.copy(filePath, filePath.replace('src', 'dist'));\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cb"})," 函数主要用来处理 ",(0,s.jsx)(n.code,{children:"ts、html、css"})," 文件和复制文件到 ",(0,s.jsx)(n.code,{children:"dist"})," 目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["分别来看这几个函数的实现，我们先看 ",(0,s.jsx)(n.code,{children:"processScript"})," 处理 ",(0,s.jsx)(n.code,{children:"ts"})," 文件"]}),"\n",(0,s.jsxs)(n.h3,{id:"36-processscript-处理-ts",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36-processscript-处理-ts",children:"#"}),"3.6 processScript 处理 ts"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function processScript(filePath) {\n  let ast, code;\n  try {\n    const result = await babel.transformFileAsync(path.resolve(filePath), {\n      ast: true,\n    });\n    ast = result.ast;\n    code = result.code;\n  } catch (error) {\n    console.error(`Failed to compile ${filePath}`);\n\n    if (__PROD__) throw error;\n\n    console.error(error);\n    return;\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/babel-core#transformfileasync",rel:"noopener noreferrer",target:"_blank",children:"babel.transformFileAsync"})," 异步地将文件内容转换为抽象语法树（AST）和转换后的代码。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  if (filePath.endsWith('app.ts')) {\n    /**\n     * IOS 小程序 Promise 使用的内置的 Polyfill，但这个 Polyfill 有 Bug 且功能不全，\n     * 在某些情况下 Promise 回调不会执行，并且不支持 Promise.prototype.finally。\n     * 这里将全局的 Promise 变量重写为自定义的 Polyfill，如果你不需要兼容 iOS10 也可以使用以下方式：\n     * Promise = Object.getPrototypeOf((async () => {})()).constructor;\n     * 写在此处是为了保证 Promise 重写最先被执行。\n     */\n    code = code.replace(\n      '\"use strict\";',\n      '\"use strict\";\\n\\nvar PromisePolyfill = require(\"promise-polyfill\");\\nPromise = PromisePolyfill.default;',\n    );\n    const promise = bundleModule('promise-polyfill');\n    waitList?.push(promise);\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["替换代码 '\"use strict\";'，追加 ",(0,s.jsx)(n.code,{children:"Promise"})," 的 Polyfill，这里使用的是 ",(0,s.jsx)(n.a,{href:"https://github.com/taylorhakes/promise-polyfill",rel:"noopener noreferrer",target:"_blank",children:"promise-polyfill"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  traverse.default(ast, {\n    CallExpression({ node }) {\n      if (\n        node.callee.name !== 'require' ||\n        !t.isStringLiteral(node.arguments[0]) ||\n        node.arguments[0].value.startsWith('.')\n      ) {\n        return;\n      }\n\n      const promise = bundleModule(node.arguments[0].value);\n      waitList?.push(promise);\n    },\n  });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["遍历 ",(0,s.jsx)(n.code,{children:"AST"}),"，找到 ",(0,s.jsx)(n.code,{children:"CallExpression"})," 节点，判断是否为 ",(0,s.jsx)(n.code,{children:"require"})," 函数，并且参数是字符串，且不是相对路径。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  // 生产环境压缩代码\n  if (__PROD__) {\n    code = (await minify(code, terserOptions)).code;\n  }\n\n  const destination = filePath.replace('src', 'dist').replace(/\\.ts$/, '.js');\n  // Make sure the directory already exists when write file\n  await fs.copy(filePath, destination);\n  await fs.writeFile(destination, code);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["经过以上处理后，",(0,s.jsx)(n.code,{children:"src/pages/home/index.ts"})," 变成了 ",(0,s.jsx)(n.code,{children:"dist/pages/home/index.js"}),"，代码如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// src/pages/home/index.ts\nimport { defineComponent, ref } from '@vue-mini/core';\n\ndefineComponent(() => {\n  const greeting = ref('欢迎使用 Vue Mini');\n\n  return {\n    greeting,\n  };\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"use strict";\n\nvar _core = require("@vue-mini/core");\n(0, _core.defineComponent)(() => {\n  const greeting = (0, _core.ref)(\'欢迎使用 Vue Mini\');\n  return {\n    greeting\n  };\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们来简单看下 babel 配置。"}),"\n",(0,s.jsxs)(n.h4,{id:"361-babelconfigjs-babel-配置文件",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#361-babelconfigjs-babel-配置文件",children:"#"}),"3.6.1 babel.config.js babel 配置文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// babel.config.js\nimport fs from 'node:fs';\n\nconst runtimeVersion = JSON.parse(\n  fs.readFileSync(\n    new URL(import.meta.resolve('@babel/runtime/package.json')),\n    'utf8',\n  ),\n).version;\n\nconst config = {\n  targets: {},\n  assumptions: {\n    // 省略若干代码\n  },\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n        modules: 'commonjs',\n      },\n    ],\n    '@babel/preset-typescript',\n  ],\n  plugins: [\n    [\n      '@babel/plugin-transform-runtime',\n      {\n        version: runtimeVersion,\n      },\n    ],\n    'transform-inline-environment-variables',\n    [\n      'module-resolver',\n      {\n        alias: {\n          '@': './src',\n        },\n      },\n    ],\n    'autocomplete-index',\n  ],\n};\n\nexport default config;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们继续来看 ",(0,s.jsx)(n.code,{children:"bundleModule"})," 函数的具体实现。"]}),"\n",(0,s.jsxs)(n.h3,{id:"37-bundlemodule-打包模块",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37-bundlemodule-打包模块",children:"#"}),"3.7 bundleModule 打包模块"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function bundleModule(module) {\n  if (bundledModules.has(module)) return;\n  bundledModules.add(module);\n\n  const bundle = await rollup({\n    input: module,\n    plugins: [\n      commonjs(),\n      replace({\n        preventAssignment: true,\n        values: {\n          'process.env.NODE_ENV': JSON.stringify(NODE_ENV),\n        },\n      }),\n      resolve(),\n      __PROD__ && terser(terserOptions),\n    ].filter(Boolean),\n  });\n  await bundle.write({\n    exports: 'named',\n    file: `dist/miniprogram_npm/${module}/index.js`,\n    format: 'cjs',\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果已经有打包好的模块，直接返回。\n用 ",(0,s.jsx)(n.code,{children:"rollup"})," 打包模块，处理成 ",(0,s.jsx)(n.code,{children:"commonjs"}),"，并写入 ",(0,s.jsx)(n.code,{children:"dist/miniprogram_npm"})," 目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["如图所示：\n",(0,s.jsx)(n.img,{alt:"miniprogram_npm",src:w})]}),"\n",(0,s.jsxs)(n.p,{children:["我们继续来看 ",(0,s.jsx)(n.code,{children:"html"})," 文件处理："]}),"\n",(0,s.jsxs)(n.h3,{id:"38-processtemplate-处理模板-html",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#38-processtemplate-处理模板-html",children:"#"}),"3.8 processTemplate 处理模板 html"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function processTemplate(filePath) {\n  const destination = filePath\n    .replace('src', 'dist')\n    .replace(/\\.html$/, '.wxml');\n  await fs.copy(filePath, destination);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个函数相对简单，就是复制 ",(0,s.jsx)(n.code,{children:"src"})," ",(0,s.jsx)(n.code,{children:"html"})," 文件修改后缀名为 ",(0,s.jsx)(n.code,{children:".wxml"})," 文件到 ",(0,s.jsx)(n.code,{children:"dist"})," 目录。"]}),"\n",(0,s.jsxs)(n.h3,{id:"39-processstyle-处理样式文件",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#39-processstyle-处理样式文件",children:"#"}),"3.9 processStyle 处理样式文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function processStyle(filePath) {\n  // 读取样式文件\n  const source = await fs.readFile(filePath, 'utf8');\n  // 读取配置 postcss.config.js\n  const { plugins, options } = await postcssrc({ from: undefined });\n\n  let css;\n  try {\n    const result = await postcss(plugins).process(source, options);\n    css = result.css;\n  } catch (error) {\n    console.error(`Failed to compile ${filePath}`);\n\n    // 生产环境打包构建时，抛出错误\n    if (__PROD__) throw error;\n\n    console.error(error);\n    return;\n  }\n\n  const destination = filePath\n    .replace('src', 'dist')\n    .replace(/\\.css$/, '.wxss');\n  // Make sure the directory already exists when write file\n  await fs.copy(filePath, destination);\n  await fs.writeFile(destination, css);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/postcss/postcss-load-config#readme",rel:"noopener noreferrer",target:"_blank",children:"postcss-load-config"})," ",(0,s.jsx)(n.code,{children:"Autoload Config for PostCSS"})," 是自动加载 ",(0,s.jsx)(n.code,{children:"postcss.config.js"})," 等配置文件，并解析其中的插件。\n然后调用 ",(0,s.jsx)(n.code,{children:"postcss"})," 解析样式文件，并写入 ",(0,s.jsx)(n.code,{children:"dist"})," 目录。"]}),"\n",(0,s.jsxs)(n.h4,{id:"391-postcssconfigjs-postcss-配置文件",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#391-postcssconfigjs-postcss-配置文件",children:"#"}),"3.9.1 postcss.config.js postcss 配置文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// postcss.config.js\nimport pxtorpx from 'postcss-pxtorpx-pro';\n\nconst config = {\n  plugins: [pxtorpx({ transform: (x) => x })],\n};\n\nexport default config;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["引入 ",(0,s.jsx)(n.a,{href:"https://github.com/Genuifx/postcss-pxtorpx-pro#readme",rel:"noopener noreferrer",target:"_blank",children:"postcss-pxtorpx-pro"})," 插件，将 ",(0,s.jsx)(n.code,{children:"px"})," 转换为 ",(0,s.jsx)(n.code,{children:"rpx"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["处理 ",(0,s.jsx)(n.code,{children:"px"})," 为 ",(0,s.jsx)(n.code,{children:"rpx"})," 如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"// input\nh1 {\n    margin: 0 0 20px;\n    font-size: 32px;\n    line-height: 1.2;\n    letter-spacing: 1px;\n}\n\n// output\nh1 {\n  margin: 0 0 40rpx;\n  font-size: 64rpx;\n  line-height: 1.2;\n  letter-spacing: 2rpx;\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"4-总结",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-总结",children:"#"}),"4. 总结"]}),"\n",(0,s.jsxs)(n.p,{children:["我们学习了初始化项目中的 ",(0,s.jsx)(n.code,{children:"build.js"})," 是如何打包小程序代码的。"]}),"\n",(0,s.jsxs)(n.p,{children:["学习了使用 ",(0,s.jsx)(n.code,{children:"cross-env"})," 配置环境变量，使用 ",(0,s.jsx)(n.code,{children:"chokidar"})," 监听文件变动。",(0,s.jsx)(n.code,{children:"html"})," 文件就是原生微信小程序的wxml，直接复制粘贴修改了后缀名到",(0,s.jsx)(n.code,{children:"dist"}),"目录。 使用 ",(0,s.jsx)(n.code,{children:"babel"})," 和 ",(0,s.jsx)(n.code,{children:"rollup"})," 处理 ",(0,s.jsx)(n.code,{children:"js"})," 文件，入口文件 app.config.ts ，还在开头追加了 ",(0,s.jsx)(n.code,{children:"promise-ployfill"})," ，使用 ",(0,s.jsx)(n.code,{children:"postcss"})," 处理样式文件，其他文件是直接复制粘贴到 ",(0,s.jsx)(n.code,{children:"dist"})," 目录的。"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是说：只是",(0,s.jsx)(n.code,{children:"html"}),"(",(0,s.jsx)(n.code,{children:"wxml"}),")模板部分还是原生微信小程序写法，",(0,s.jsx)(n.code,{children:"ts"}),"(",(0,s.jsx)(n.code,{children:"js"}),")逻辑部分使用了",(0,s.jsx)(n.code,{children:"vue-mini"}),"（轻运行时）。"]}),"\n",(0,s.jsx)(n.p,{children:"常言道：一图胜千言。我画了一张图表示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini.drawio.png",src:v})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"vue-mini"})," 比较适合不需要跨端，比如不需要同时支持微信小程序和支付宝小程序。只开发微信小程序是一个新选择，性能基本等于原生微信小程序，逻辑部分开发体验优于原生微信小程序。适合本身就是使用的原生微信小程序开发的，可以渐进式升级替换为 ",(0,s.jsx)(n.code,{children:"vue-mini"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是说 ",(0,s.jsx)(n.code,{children:"vue-mini"})," 是渐进式开发微信小程序。和原生开发不是二选一。性能上，",(0,s.jsx)(n.code,{children:"vue-mini"})," 接近原生，开发体验优于原生开发。"]}),"\n",(0,s.jsxs)(n.p,{children:["不过目前还处于相对初期阶段，生态还不是很完善，比如暂不支持 ",(0,s.jsx)(n.code,{children:"less、sass"})," 等。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"vue-mini"})," 作者在最后也有一页接下来的开发方向的PPT。作者目前时间和精力有限，没有支持多端的打算。长期可能有。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"vue-mini-next",src:k})}),"\n",(0,s.jsxs)(n.p,{children:["感兴趣的小伙伴可以",(0,s.jsx)(n.a,{href:"https://github.com/vue-mini/vue-mini",rel:"noopener noreferrer",target:"_blank",children:"点个 star"}),"。我们持续关注后续发展，有余力的小伙伴也可以多参与贡献。"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"如果看完有收获，欢迎点赞、评论、分享、收藏支持。你的支持和肯定，是我写作的动力"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["作者：常以",(0,s.jsx)(n.strong,{children:"若川"}),"为名混迹于江湖。所知甚少，唯善学。",(0,s.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川的博客"})]}),"\n",(0,s.jsxs)(n.p,{children:["最后可以持续关注我",(0,s.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"，欢迎关注我的",(0,s.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。我倾力持续组织了 3 年多",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,s.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,s.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,s.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]})]})}function N(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(_,e)})):_(e)}let P=N;N.__RSPRESS_PAGE_META={},N.__RSPRESS_PAGE_META["vue-mini-analysis%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-初始化项目",text:"2. 初始化项目",depth:2},{id:"3-体验-vue-mini",text:"3. 体验 vue-mini",depth:2},{id:"31-对比打包构建的代码",text:"3.1 对比打包构建的代码",depth:3},{id:"31-dev-和-build-命令",text:"3.1 dev 和 build 命令",depth:3},{id:"3-buildjs-打包构建文件",text:"3. build.js 打包构建文件",depth:2},{id:"31-引入各种依赖",text:"3.1 引入各种依赖",depth:3},{id:"32-定义变量",text:"3.2 定义变量",depth:3},{id:"33-调用-prod-或者-dev",text:"3.3 调用 prod 或者 dev",depth:3},{id:"34-prod-函数",text:"3.4 prod 函数",depth:3},{id:"35-dev-函数",text:"3.5 dev 函数",depth:3},{id:"36-processscript-处理-ts",text:"3.6 processScript 处理 ts",depth:3},{id:"361-babelconfigjs-babel-配置文件",text:"3.6.1 babel.config.js babel 配置文件",depth:4},{id:"37-bundlemodule-打包模块",text:"3.7 bundleModule 打包模块",depth:3},{id:"38-processtemplate-处理模板-html",text:"3.8 processTemplate 处理模板 html",depth:3},{id:"39-processstyle-处理样式文件",text:"3.9 processStyle 处理样式文件",depth:3},{id:"391-postcssconfigjs-postcss-配置文件",text:"3.9.1 postcss.config.js postcss 配置文件",depth:4},{id:"4-总结",text:"4. 总结",depth:2}],title:"开发小程序又一新选择 vue-mini，据说性能是 Taro 的 10 倍，遥遥领先",headingTitle:"开发小程序又一新选择 vue-mini，据说性能是 Taro 的 10 倍，遥遥领先",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(e,n,r){r.d(n,{Z:()=>o});var s=r(52676),i=r(75271),c=r(92815);r(18544);let l={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function t(e,n,r){let s=Object.keys(l).includes(n)?n:r;return l[s](e)}let o=e=>{let{defaultLocale:n="en-US"}=e,r=(0,c.Vi)().page.readingTimeData,l=(0,c.Jr)(),o=(0,c.e7)(),[a,d]=(0,i.useState)(t(r,l,n));return(0,i.useEffect)(()=>{d(t(r,l,n))},[l,r]),(0,s.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:a})}}}]);