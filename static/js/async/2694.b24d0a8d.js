"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["2694"],{84554:function(n,e,r){r.r(e),r.d(e,{default:()=>c});var t=r(52676),s=r(40453),o=r(20713);function a(n){let e=Object.assign({p:"p",h2:"h2",a:"a",code:"code",strong:"strong",ul:"ul",li:"li",pre:"pre",h3:"h3",img:"img",blockquote:"blockquote"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"本文为稀土掘金技术社区首发签约文章，14天内禁止转载，14天后未获授权禁止转载，侵权必究！"}),"\n",(0,t.jsxs)(e.h2,{id:"1-前言",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,t.jsx)(o.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsxs)(e.p,{children:["大家好，我是",(0,t.jsx)(e.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(e.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(e.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(e.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]}),"\n",(0,t.jsx)(e.p,{children:"我们开发业务时经常会使用到组件库，一般来说，很多时候我们不需要关心内部实现。但是如果希望学习和深究里面的原理，这时我们可以分析自己使用的组件库实现。有哪些优雅实现、最佳实践、前沿技术等都可以值得我们借鉴。"}),"\n",(0,t.jsxs)(e.p,{children:["相比于原生 ",(0,t.jsx)(e.code,{children:"JS"})," 等源码。我们或许更应该学习，正在使用的组件库的源码，因为有助于帮助我们写业务和写自己的组件。"]}),"\n",(0,t.jsxs)(e.p,{children:["如果是 ",(0,t.jsx)(e.code,{children:"Vue"})," 技术栈，开发移动端的项目，大多会选用 ",(0,t.jsx)(e.code,{children:"vant"})," 组件库，目前（2022-11-20）",(0,t.jsx)(e.code,{children:"star"})," 多达 ",(0,t.jsx)(e.code,{children:"20.5k"}),"，最新版本是 ",(0,t.jsx)(e.code,{children:"v4.0.0-rc7"}),"。我们可以挑选 ",(0,t.jsx)(e.code,{children:"vant"})," 组件库学习，我会写一个",(0,t.jsx)(e.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"vant 组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"vant 组件库源码分析系列："})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["1.",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7158239404484460574",rel:"noopener noreferrer",target:"_blank",children:"vant 4 即将正式发布，支持暗黑主题，那么是如何实现的呢"})]}),"\n",(0,t.jsxs)(e.li,{children:["2.",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7160465286036979748",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant 4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"})]}),"\n",(0,t.jsxs)(e.li,{children:["3.",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7165661072785932296",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？"})]}),"\n",(0,t.jsxs)(e.li,{children:["4.",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7169003604303413278",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，学会用 vue3 + ts 开发毫秒级渲染的倒计时组件，真是妙啊"})]}),"\n",(0,t.jsxs)(e.li,{children:["5.",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7171227417246171149",rel:"noopener noreferrer",target:"_blank",children:"vant 4.0 正式发布了，分析其源码学会用 vue3 写一个图片懒加载组件！"})]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["这次我们来学习倒计时组件，",(0,t.jsx)(e.a,{href:"https://vant-contrib.gitee.io/vant/v4/#/zh-CN/count-down",rel:"noopener noreferrer",target:"_blank",children:(0,t.jsx)(e.code,{children:"countdown"})}),"。"]}),"\n",(0,t.jsx)(e.p,{children:"学完本文，你将学到："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"1. 如何开发一个更优雅的毫秒级渲染的倒计时组件\n2. 学会使用 requestAnimationFrame\n3. 等等\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"2-准备工作",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-准备工作",children:"#"}),"2. 准备工作"]}),"\n",(0,t.jsxs)(e.p,{children:["看一个开源项目，我们可以先看 ",(0,t.jsx)(e.a,{href:"https://github.com/youzan/vant",rel:"noopener noreferrer",target:"_blank",children:"README.md"})," 再看 ",(0,t.jsx)(e.a,{href:"https://github.com/youzan/vant/blob/main/.github/CONTRIBUTING.md",rel:"noopener noreferrer",target:"_blank",children:"github/CONTRIBUTING.md"})]}),"\n",(0,t.jsxs)(e.h3,{id:"21-克隆源码",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#21-克隆源码",children:"#"}),"2.1 克隆源码"]}),"\n",(0,t.jsxs)(e.p,{children:["You will need ",(0,t.jsx)(e.a,{href:"https://nodejs.org",rel:"noopener noreferrer",target:"_blank",children:"Node.js >= 14"})," and ",(0,t.jsx)(e.a,{href:"https://pnpm.io",rel:"noopener noreferrer",target:"_blank",children:"pnpm"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# 推荐克隆我的项目\ngit clone https://github.com/ruochuan12/vant-analysis\ncd vant-analysis/vant\n\n# 或者克隆官方仓库\ngit clone git@github.com:vant-ui/vant.git\ncd vant\n\n# 安装依赖，如果没安装 pnpm，可以用 npm i pnpm -g 安装，或者查看官网通过其他方式安装\npnpm i\n\n# 启动服务\npnpm dev\n"})}),"\n",(0,t.jsxs)(e.p,{children:["执行 ",(0,t.jsx)(e.code,{children:"pnpm dev"})," 后，这时我们打开倒计时组件 ",(0,t.jsx)(e.code,{children:"http://localhost:5173/#/zh-CN/count-down"}),"。"]}),"\n",(0,t.jsxs)(e.h2,{id:"3-倒计时组件可谓是十分常用",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-倒计时组件可谓是十分常用",children:"#"}),"3. 倒计时组件可谓是十分常用"]}),"\n",(0,t.jsxs)(e.p,{children:["在各种电商类或者其他的移动端页面中，倒计时真的是太常见了。我们自己也基本能够快速的写一个倒计时组件。代码实现参考这里，主要是 ",(0,t.jsx)(e.code,{children:"JavaScript"}),"。",(0,t.jsx)(e.a,{href:"https://code.juejin.cn/pen/7167966535649230883",rel:"noopener noreferrer",target:"_blank",children:"码上掘金倒计时初步代码@若川"})]}),"\n",(0,t.jsxs)(e.p,{children:["代码中，我直接使用的 ",(0,t.jsx)(e.code,{children:"setInterval"})," 和每秒钟执行一次。把倒计时的时候减去",(0,t.jsx)(e.code,{children:"1s"}),"，当倒计时毫秒数不足时用 ",(0,t.jsx)(e.code,{children:"clearInterval"})," 清除停止定时器。"]}),"\n",(0,t.jsxs)(e.p,{children:["但如果要实现毫秒级的倒计时这种方法行不通。\n另外 ",(0,t.jsx)(e.code,{children:"setInterval"})," 这种做法，并不是最优的。\n那么，",(0,t.jsx)(e.code,{children:"vant"})," 倒计时组件中，是如何处理毫秒级和实现倒计时呢。"]}),"\n",(0,t.jsxs)(e.p,{children:["带着问题我们直接找到 ",(0,t.jsx)(e.code,{children:"countdown demo"})," 文件：",(0,t.jsx)(e.code,{children:"vant/packages/vant/src/count-down/demo/index.vue"}),"。为什么是这个文件，我在之前文章",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7160465286036979748#heading-3",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"}),"分析了其原理，感兴趣的小伙伴点击查看。这里就不赘述了。"]}),"\n",(0,t.jsxs)(e.h2,{id:"4-利用-demo-调试源码",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-利用-demo-调试源码",children:"#"}),"4. 利用 demo 调试源码"]}),"\n",(0,t.jsxs)(e.p,{children:["组件源码中的 ",(0,t.jsx)(e.code,{children:"TS"})," 代码我不会过多解释。没学过 ",(0,t.jsx)(e.code,{children:"TS"})," 的小伙伴，推荐学这个",(0,t.jsx)(e.a,{href:"http://ts.xcatliu.com/",rel:"noopener noreferrer",target:"_blank",children:"TypeScript 入门教程"}),"。\n另外，",(0,t.jsx)(e.code,{children:"vant"})," 使用了 ",(0,t.jsx)(e.a,{href:"https://www.npmjs.com/package/@vue/babel-plugin-jsx",rel:"noopener noreferrer",target:"_blank",children:"@vue/babel-plugin-jsx"})," 插件来支持 ",(0,t.jsx)(e.code,{children:"JSX、TSX"}),"。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae7e1662c40449ef9a815dfe6c4d6e19~tplv-k3u1fbpfcp-watermark.image?",alt:"倒计时组件"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'// vant/packages/vant/src/count-down/demo/index.vue\n<script setup lang="ts">\nimport VanGrid from \'../../grid\';\nimport VanGridItem from \'../../grid-item\';\nimport VanCountDown, { type CountDownInstance } from \'..\';\nimport { ref } from \'vue\';\nimport { useTranslate } from \'../../../docs/site\';\nimport { showToast } from \'../../toast\';\n\nconst t = useTranslate({\n  \'zh-CN\': {\n    reset: \'重置\',\n    pause: \'暂停\',\n    start: \'开始\',\n    finished: \'倒计时结束\',\n    millisecond: \'毫秒级渲染\',\n    customStyle: \'自定义样式\',\n    customFormat: \'自定义格式\',\n    manualControl: \'手动控制\',\n    formatWithDay: \'DD 天 HH 时 mm 分 ss 秒\',\n  },\n});\n\nconst time = ref(30 * 60 * 60 * 1000);\nconst countDown = ref<CountDownInstance>();\n\n// 开始\nconst start = () => {\n  countDown.value?.start();\n};\n// 暂停\nconst pause = () => {\n  countDown.value?.pause();\n};\n// 重置\nconst reset = () => {\n  countDown.value?.reset();\n};\nconst onFinish = () => showToast(t(\'finished\'));\n<\/script>\n\n<template>\n\n  \x3c!-- 基本使用 --\x3e\n  <demo-block :title="t(\'basicUsage\')">\n    <van-count-down :time="time" />\n  </demo-block>\n\n  \x3c!-- 自定义渲染 --\x3e\n  <demo-block :title="t(\'customFormat\')">\n    <van-count-down :time="time" :format="t(\'formatWithDay\')" />\n  </demo-block>\n\n  \x3c!-- 毫秒级渲染 --\x3e\n  <demo-block :title="t(\'millisecond\')">\n    <van-count-down millisecond :time="time" format="HH:mm:ss:SS" />\n  </demo-block>\n\n  \x3c!-- 自定义样式--\x3e\n  <demo-block :title="t(\'customStyle\')">\n    <van-count-down :time="time">\n      <template #default="currentTime">\n        <span class="block">{{ currentTime.hours }}</span>\n        <span class="colon">:</span>\n        <span class="block">{{ currentTime.minutes }}</span>\n        <span class="colon">:</span>\n        <span class="block">{{ currentTime.seconds }}</span>\n      </template>\n    </van-count-down>\n  </demo-block>\n\n  \x3c!-- 手动控制 --\x3e\n  <demo-block :title="t(\'manualControl\')">\n    <van-count-down\n      ref="countDown"\n      millisecond\n      :time="3000"\n      :auto-start="false"\n      format="ss:SSS"\n      @finish="onFinish"\n    />\n    <van-grid clickable :column-num="3">\n      <van-grid-item icon="play-circle-o" :text="t(\'start\')" @click="start" />\n      <van-grid-item icon="pause-circle-o" :text="t(\'pause\')" @click="pause" />\n      <van-grid-item icon="replay" :text="t(\'reset\')" @click="reset" />\n    </van-grid>\n  </demo-block>\n</template>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["从 ",(0,t.jsx)(e.code,{children:"demo"})," 文件中，我们可以看出 ",(0,t.jsx)(e.code,{children:"import VanCountDown, { type CountDownInstance } from '..';"}),"，引入自 ",(0,t.jsx)(e.code,{children:"vant/packages/vant/src/count-down/index.ts"}),"。我们继续来看入口 ",(0,t.jsx)(e.code,{children:"index.ts"}),"。"]}),"\n",(0,t.jsxs)(e.h2,{id:"5-入口-indexts",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-入口-indexts",children:"#"}),"5. 入口 index.ts"]}),"\n",(0,t.jsx)(e.p,{children:"主要就是导出一下类型和变量等。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant/src/count-down/index.ts\nimport { withInstall } from '../utils';\nimport _CountDown from './CountDown';\n\nexport const CountDown = withInstall(_CountDown);\n// 默认导出\n// import xxx from 'vant'\nexport default CountDown;\nexport { countDownProps } from './CountDown';\nexport type { CountDownProps } from './CountDown';\nexport type {\n  CountDownInstance,\n  CountDownThemeVars,\n  CountDownCurrentTime,\n} from './types';\n\ndeclare module 'vue' {\n  export interface GlobalComponents {\n    VanCountDown: typeof CountDown;\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"withInstall"})," 函数在之前文章",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7160465286036979748#heading-10",rel:"noopener noreferrer",target:"_blank",children:"5.1 withInstall 给组件对象添加 install 方法"})," 也有分析，这里就不赘述了。"]}),"\n",(0,t.jsxs)(e.p,{children:["我们可以在这些文件，任意位置加上 ",(0,t.jsx)(e.code,{children:"debugger"})," 调试源码。"]}),"\n",(0,t.jsx)(e.p,{children:"截两张调试图。"}),"\n",(0,t.jsxs)(e.p,{children:["调试 ",(0,t.jsx)(e.code,{children:"Countdown"})," ",(0,t.jsx)(e.code,{children:"setup"}),"。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73eb51d983894281b6f4bf40f8f9e19a~tplv-k3u1fbpfcp-watermark.image?",alt:"调试 setup"})}),"\n",(0,t.jsxs)(e.p,{children:["调试 ",(0,t.jsx)(e.code,{children:"useCountDown"}),"。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fc529f702df4d7c8c103b11d79daa9b~tplv-k3u1fbpfcp-watermark.image?",alt:"调试 useCountDown"})}),"\n",(0,t.jsxs)(e.p,{children:["我们跟着调试，继续分析 ",(0,t.jsx)(e.code,{children:"Countdown"}),"。"]}),"\n",(0,t.jsxs)(e.h2,{id:"6-主文件-countdown",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6-主文件-countdown",children:"#"}),"6. 主文件 Countdown"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant/src/count-down/CountDown.tsx\nimport { watch, computed, defineComponent, type ExtractPropTypes } from 'vue';\n\n// Utils\nimport {\n  truthProp,\n  makeStringProp,\n  makeNumericProp,\n  createNamespace,\n} from '../utils';\nimport { parseFormat } from './utils';\n\n// Composables\nimport { useCountDown } from '@vant/use';\nimport { useExpose } from '../composables/use-expose';\n\nconst [name, bem] = createNamespace('count-down');\n\nexport const countDownProps = {\n  time: makeNumericProp(0),\n  format: makeStringProp('HH:mm:ss'),\n  autoStart: truthProp,\n  millisecond: Boolean,\n};\n\nexport type CountDownProps = ExtractPropTypes<typeof countDownProps>;\n\nexport default defineComponent({\n  name,\n\n  props: countDownProps,\n\n  emits: ['change', 'finish'],\n\n  setup(props, { emit, slots }) {\n    // 代码省略，下文叙述\n  },\n});\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"61-setup-部分",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#61-setup-部分",children:"#"}),"6.1 setup 部分"]}),"\n",(0,t.jsxs)(e.p,{children:["这一部分主要使用了",(0,t.jsx)(e.code,{children:"useCountDown"}),"。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"setup(props, { emit, slots }) {\n  // useCountDown 组合式 API\n  const { start, pause, reset, current } = useCountDown({\n    // 传入的时间毫秒数，+ 是字符串转数字\n    time: +props.time,\n    // 毫秒级渲染\n    millisecond: props.millisecond,\n    // 回调事件，onChange, onFinish\n    onChange: (current) => emit('change', current),\n    onFinish: () => emit('finish'),\n  });\n\n  // 格式化时间\n  const timeText = computed(() => parseFormat(props.format, current.value));\n\n  // 重置，重新开始\n  const resetTime = () => {\n    reset(+props.time);\n\n    if (props.autoStart) {\n      start();\n    }\n  };\n\n  watch(() => props.time, resetTime, { immediate: true });\n\n  // 导出 start、pause、reset\n  useExpose({\n    start,\n    pause,\n    reset: resetTime,\n  });\n\n  return () => (\n    // 有传入插槽，使用插槽，支持自定义样式，传入解析后的时间对象\n    <div role=\"timer\" class={bem()}>\n      {slots.default ? slots.default(current.value) : timeText.value}\n    </div>\n  );\n},\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"62-useexpose-暴露",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#62-useexpose-暴露",children:"#"}),"6.2 useExpose 暴露"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"import { getCurrentInstance } from 'vue';\nimport { extend } from '../utils';\n\n// expose public api\nexport function useExpose<T = Record<string, any>>(apis: T) {\n  const instance = getCurrentInstance();\n  // 合并到 getCurrentInstance().proxy 上\n  if (instance) {\n    extend(instance.proxy as object, apis);\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["通过 ",(0,t.jsx)(e.code,{children:"ref"})," 可以获取到 ",(0,t.jsx)(e.code,{children:"Countdown"})," 实例并调用实例方法，详见",(0,t.jsx)(e.a,{href:"https://vant-contrib.gitee.io/vant/v4/#/zh-CN/advanced-usage",rel:"noopener noreferrer",target:"_blank",children:"组件实例方法"}),"。"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Vant"})," 中的许多组件提供了实例方法，调用实例方法时，我们需要通过 ",(0,t.jsx)(e.code,{children:"ref"})," 来注册组件引用信息，引用信息将会注册在父组件的 ",(0,t.jsx)(e.code,{children:"$refs"})," 对象上。注册完成后，我们可以通过 ",(0,t.jsx)(e.code,{children:"this.$refs.xxx"})," 或者"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"const xxxRef = ref();\nxxxRef.value.xxx();\n"})}),"\n",(0,t.jsx)(e.p,{children:"访问到对应的组件实例，并调用上面的实例方法。"}),"\n",(0,t.jsxs)(e.h2,{id:"7-usecountdown-组合式-api",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7-usecountdown-组合式-api",children:"#"}),"7. useCountDown 组合式 API"]}),"\n",(0,t.jsxs)(e.h3,{id:"71-parsetime-解析时间",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#71-parsetime-解析时间",children:"#"}),"7.1 parseTime 解析时间"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant-use/src/useCountDown/index.ts\nimport {\n  ref,\n  computed,\n  onActivated,\n  onDeactivated,\n  onBeforeUnmount,\n} from 'vue';\nimport { raf, cancelRaf, inBrowser } from '../utils';\n\nexport type CurrentTime = {\n  days: number;\n  hours: number;\n  total: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n};\n\nexport type UseCountDownOptions = {\n  time: number;\n  // 毫秒\n  millisecond?: boolean;\n  onChange?: (current: CurrentTime) => void;\n  onFinish?: () => void;\n};\n\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\n\n// 解析时间\nfunction parseTime(time: number): CurrentTime {\n  const days = Math.floor(time / DAY);\n  const hours = Math.floor((time % DAY) / HOUR);\n  const minutes = Math.floor((time % HOUR) / MINUTE);\n  const seconds = Math.floor((time % MINUTE) / SECOND);\n  const milliseconds = Math.floor(time % SECOND);\n\n  return {\n    total: time,\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n  };\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["以上这大段代码，",(0,t.jsx)(e.code,{children:"parseTime"})," 是主要函数，解析时间，生成天数、小时、分钟、秒、毫秒的对象。"]}),"\n",(0,t.jsxs)(e.h3,{id:"72-usecountdown-真实逻辑",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#72-usecountdown-真实逻辑",children:"#"}),"7.2 useCountDown 真实逻辑"]}),"\n",(0,t.jsx)(e.p,{children:"真实逻辑这一段可以不用细看。可以调试时再细看。"}),"\n",(0,t.jsxs)(e.p,{children:["主要就是利用 ",(0,t.jsx)(e.code,{children:"Date.now()"})," 会自己走的原理。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"初始化开始：结束时间 = 当前时间戳 + 剩余时间\n获取：剩余时间 = 结束时间 - 当前时间戳\n加上自己定时器逻辑循环\n剩余时间就是真实流逝的时间\n如果是毫秒级渲染，就直接赋值剩余时间\n如果不是，那就判断是同一秒才赋值\n"})}),"\n",(0,t.jsx)(e.p,{children:"设计的十分巧妙，看到这里，我们可能感慨：不得不佩服。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// 简化版 一\nconst useCountDown = (options) => {\n  let endTime;\n  let remain = options.time;\n  const getCurrentRemain = () => Math.max(endTime - Date.now(), 0);\n  const start = () => {\n    endTime = Date.now() + remain;\n  }\n  const setRemain = (value) => {\n    remain = value;\n  };\n  return {\n    start,\n  }\n}\nconst { start } = useCountDown({time: 3 * 1000});\nstart();\n"})}),"\n",(0,t.jsx)(e.p,{children:"码上掘金倒计时简化版二"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://code.juejin.cn/pen/7168892330752081928",rel:"noopener noreferrer",target:"_blank",children:"码上掘金倒计时简化版二@若川"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant-use/src/useCountDown/index.ts\nfunction isSameSecond(time1: number, time2: number): boolean {\n  return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);\n}\n\nexport function useCountDown(options: UseCountDownOptions) {\n  let rafId: number;\n  let endTime: number;\n  let counting: boolean;\n  let deactivated: boolean;\n\n  const remain = ref(options.time);\n  const current = computed(() => parseTime(remain.value));\n\n  const pause = () => {\n    counting = false;\n    cancelRaf(rafId);\n  };\n\n  const getCurrentRemain = () => Math.max(endTime - Date.now(), 0);\n\n  const setRemain = (value: number) => {\n    remain.value = value;\n    options.onChange?.(current.value);\n\n    if (value === 0) {\n      pause();\n      options.onFinish?.();\n    }\n  };\n\n  const microTick = () => {\n    rafId = raf(() => {\n      // in case of call reset immediately after finish\n      if (counting) {\n        setRemain(getCurrentRemain());\n\n        if (remain.value > 0) {\n          microTick();\n        }\n      }\n    });\n  };\n\n  const macroTick = () => {\n    rafId = raf(() => {\n      // in case of call reset immediately after finish\n      if (counting) {\n        const remainRemain = getCurrentRemain();\n\n        if (!isSameSecond(remainRemain, remain.value) || remainRemain === 0) {\n          setRemain(remainRemain);\n        }\n\n        if (remain.value > 0) {\n          macroTick();\n        }\n      }\n    });\n  };\n\n  const tick = () => {\n    // should not start counting in server\n    // see: https://github.com/vant-ui/vant/issues/7807\n    if (!inBrowser) {\n      return;\n    }\n\n    if (options.millisecond) {\n      microTick();\n    } else {\n      macroTick();\n    }\n  };\n\n  const start = () => {\n    if (!counting) {\n      endTime = Date.now() + remain.value;\n      counting = true;\n      tick();\n    }\n  };\n\n  const reset = (totalTime: number = options.time) => {\n    pause();\n    remain.value = totalTime;\n  };\n\n  // 组件被卸载之前被调用\n  onBeforeUnmount(pause);\n\n  // 激活\n  onActivated(() => {\n    if (deactivated) {\n      counting = true;\n      deactivated = false;\n      tick();\n    }\n  });\n\n  onDeactivated(() => {\n    if (counting) {\n      pause();\n      deactivated = true;\n    }\n  });\n\n  // 返回方法和当前时间对象\n  return {\n    start,\n    pause,\n    reset,\n    current,\n  };\n}\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["我们继续来看 ",(0,t.jsx)(e.code,{children:"raf"})," 和 ",(0,t.jsx)(e.code,{children:"cancelRaf"}),"，是如何实现的。"]}),"\n",(0,t.jsxs)(e.h2,{id:"8-rafcancelrafinbrowser-实现",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8-rafcancelrafinbrowser-实现",children:"#"}),"8. raf、cancelRaf、inBrowser 实现"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// 判断是不是浏览器环境，你可能会问，为啥要判断？因为 SSR （服务端渲染）不是浏览器环境。\nexport const inBrowser = typeof window !== 'undefined';\n\n// Keep forward compatible\n// should be removed in next major version\nexport const supportsPassive = true;\n\nexport function raf(fn: FrameRequestCallback): number {\n  return inBrowser ? requestAnimationFrame(fn) : -1;\n}\n\nexport function cancelRaf(id: number) {\n  if (inBrowser) {\n    cancelAnimationFrame(id);\n  }\n}\n\n// double raf for animation\nexport function doubleRaf(fn: FrameRequestCallback): void {\n  raf(() => raf(fn));\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["上文代码，主要一个 ",(0,t.jsx)(e.code,{children:"API"}),"，",(0,t.jsx)(e.code,{children:"requestAnimationFrame、cancelAnimationFrame"}),"。"]}),"\n",(0,t.jsxs)(e.p,{children:["我们这里简单理解为 ",(0,t.jsx)(e.code,{children:"window.requestAnimationFrame()"})," 中的回调函数，每 ",(0,t.jsx)(e.code,{children:"16.67ms"})," 执行一次回调函数即可。"]}),"\n",(0,t.jsxs)(e.p,{children:["也就是类似 ",(0,t.jsx)(e.code,{children:"setTimeout、clearTimeout"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"const timeId = setTimeout( () => {\n  // 16.67ms 执行一次\n  console.log('16.67ms 执行一次');\n}, 16.67);\n\nclearTimeout(timeId);\n"})}),"\n",(0,t.jsxs)(e.p,{children:["也可以自行搜索这个 ",(0,t.jsx)(e.code,{children:"API"})," 查阅更多资料。比如 ",(0,t.jsx)(e.code,{children:"MDN"})," 上的解释。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",rel:"noopener noreferrer",target:"_blank",children:"mdn window.requestAnimationFrame"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"window.requestAnimationFrame()"})," 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行"]}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"回调函数执行次数通常是每秒 60 次，但在大多数遵循 W3C 建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。"}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["备注： 若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用 ",(0,t.jsx)(e.code,{children:"window.requestAnimationFrame()"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"9-支持格式化时间默认-hhmmss",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#9-支持格式化时间默认-hhmmss",children:"#"}),"9. 支持格式化时间，默认 HH:mm:ss"]}),"\n",(0,t.jsxs)(e.h3,{id:"91-parseformat-处理格式化",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#91-parseformat-处理格式化",children:"#"}),"9.1 parseFormat 处理格式化"]}),"\n",(0,t.jsx)(e.p,{children:"再来看看，组件中，是如何格式化时间的。这个值得我们参考。我们很多时候可能都是写死天数、小时等文案。不支持自定义格式化。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant/src/count-down/utils.ts\nimport { padZero } from '../utils';\nimport { CurrentTime } from '@vant/use';\n\nexport function parseFormat(format: string, currentTime: CurrentTime): string {\n  const { days } = currentTime;\n  let { hours, minutes, seconds, milliseconds } = currentTime;\n\n  // 有 DD 参数，补零替换，没有则小时数加上天数\n  if (format.includes('DD')) {\n    format = format.replace('DD', padZero(days));\n  } else {\n    hours += days * 24;\n  }\n\n  // 有 HH 参数，补零替换，没有则分钟数加上小时数\n  if (format.includes('HH')) {\n    format = format.replace('HH', padZero(hours));\n  } else {\n    minutes += hours * 60;\n  }\n\n  // 有 mm 参数，补零替换，没有则秒数加上分钟数\n  if (format.includes('mm')) {\n    format = format.replace('mm', padZero(minutes));\n  } else {\n    seconds += minutes * 60;\n  }\n\n  // 有 mm 参数，补零替换，没有则毫秒数加上秒数\n  if (format.includes('ss')) {\n    format = format.replace('ss', padZero(seconds));\n  } else {\n    milliseconds += seconds * 1000;\n  }\n\n  // 毫秒数 默认补三位数，按照格式最终给出对应的位数\n  if (format.includes('S')) {\n    const ms = padZero(milliseconds, 3);\n\n    if (format.includes('SSS')) {\n      format = format.replace('SSS', ms);\n    } else if (format.includes('SS')) {\n      format = format.replace('SS', ms.slice(0, 2));\n    } else {\n      format = format.replace('S', ms.charAt(0));\n    }\n  }\n\n  // 最终返回格式化的数据\n  return format;\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"92-padzero-补零",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#92-padzero-补零",children:"#"}),"9.2 padZero 补零"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// vant/packages/vant-compat/node_modules/vant/src/utils/format.ts\n// 补零操作\nexport function padZero(num: Numeric, targetLength = 2): string {\n  let str = num + '';\n\n  while (str.length < targetLength) {\n    str = '0' + str;\n  }\n\n  return str;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"行文自此，我们就分析完了毫秒级渲染的倒计时组件的实现。"}),"\n",(0,t.jsxs)(e.h2,{id:"10-总结",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#10-总结",children:"#"}),"10. 总结"]}),"\n",(0,t.jsxs)(e.p,{children:["我们来简单总结下。通过 ",(0,t.jsx)(e.code,{children:"demo"})," 文件调试，入口文件，主文件，",(0,t.jsx)(e.code,{children:"useCountDown"})," 组合式 API，插槽等。\n分析了自定义格式、毫秒级渲染、自定义样式（利用插槽）等功能的实现。"]}),"\n",(0,t.jsxs)(e.p,{children:["其中毫秒级渲染，主要就是利用 ",(0,t.jsx)(e.code,{children:"Date.now()"})," 和 （",(0,t.jsx)(e.code,{children:"window.requestAnimationFrame"}),"）每 ",(0,t.jsx)(e.code,{children:"16.67ms"})," 执行一次回调函数。"]}),"\n",(0,t.jsx)(e.p,{children:"大致流程如下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"初始化开始：结束时间 = 当前时间戳 + 剩余时间\n获取：剩余时间 = 结束时间 - 当前时间戳\n加上自己定时器逻辑循环（`window.requestAnimationFrame`）每 16.67ms 执行一次回调函数\n剩余时间就是真实流逝的时间\n如果是毫秒级渲染，就直接赋值剩余时间\n如果不是，那就判断是同一秒才赋值\n"})}),"\n",(0,t.jsxs)(e.p,{children:["看完这篇源码文章，再去看 ",(0,t.jsx)(e.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/count-down",rel:"noopener noreferrer",target:"_blank",children:"CountDown 组件文档"}),"，可能就会有豁然开朗的感觉。再看其他组件，可能就可以猜测出大概实现的代码了。"]}),"\n",(0,t.jsxs)(e.p,{children:["如果是使用 ",(0,t.jsx)(e.code,{children:"react"}),"、",(0,t.jsx)(e.code,{children:"Taro"})," 技术栈，感兴趣也可以看看 ",(0,t.jsx)(e.code,{children:"taroify"})," ",(0,t.jsx)(e.code,{children:"CountDown"})," 组件的实现 ",(0,t.jsx)(e.a,{href:"https://taroify.gitee.io/taroify.com/components/countdown",rel:"noopener noreferrer",target:"_blank",children:"文档"}),"，",(0,t.jsx)(e.a,{href:"https://github.com/mallfoundry/taroify/tree/main/packages/core/src/countdown",rel:"noopener noreferrer",target:"_blank",children:"源码"}),"。"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"如果看完有收获，欢迎点赞、评论、分享支持。你的支持和肯定，是我写作的动力"}),"。"]}),"\n",(0,t.jsxs)(e.h2,{id:"11-加源码共读群交流",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11-加源码共读群交流",children:"#"}),"11. 加源码共读群交流"]}),"\n",(0,t.jsxs)(e.p,{children:["最后可以持续关注我",(0,t.jsx)(e.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"。我会写一个",(0,t.jsx)(e.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,t.jsxs)(e.p,{children:["我倾力持续组织了一年",(0,t.jsx)(e.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(e.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(e.code,{children:"ruochuan02"})," 参与"]}),"。"]}),"\n",(0,t.jsxs)(e.p,{children:["另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(e.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.2k+人）第一的专栏，写有20余篇源码文章。包含",(0,t.jsx)(e.code,{children:"jQuery"}),"、",(0,t.jsx)(e.code,{children:"underscore"}),"、",(0,t.jsx)(e.code,{children:"lodash"}),"、",(0,t.jsx)(e.code,{children:"vuex"}),"、",(0,t.jsx)(e.code,{children:"sentry"}),"、",(0,t.jsx)(e.code,{children:"axios"}),"、",(0,t.jsx)(e.code,{children:"redux"}),"、",(0,t.jsx)(e.code,{children:"koa"}),"、",(0,t.jsx)(e.code,{children:"vue-devtools"}),"、",(0,t.jsx)(e.code,{children:"vuex4"}),"、",(0,t.jsx)(e.code,{children:"koa-compose"}),"、",(0,t.jsx)(e.code,{children:"vue 3.2 发布"}),"、",(0,t.jsx)(e.code,{children:"vue-this"}),"、",(0,t.jsx)(e.code,{children:"create-vue"}),"、",(0,t.jsx)(e.code,{children:"玩具vite"}),"、",(0,t.jsx)(e.code,{children:"create-vite"})," 等20余篇源码文章。"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["vant%2Fcount-down%2FREADME.juejin.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-准备工作",text:"2. 准备工作",depth:2},{id:"21-克隆源码",text:"2.1 克隆源码",depth:3},{id:"3-倒计时组件可谓是十分常用",text:"3. 倒计时组件可谓是十分常用",depth:2},{id:"4-利用-demo-调试源码",text:"4. 利用 demo 调试源码",depth:2},{id:"5-入口-indexts",text:"5. 入口 index.ts",depth:2},{id:"6-主文件-countdown",text:"6. 主文件 Countdown",depth:2},{id:"61-setup-部分",text:"6.1 setup 部分",depth:3},{id:"62-useexpose-暴露",text:"6.2 useExpose 暴露",depth:3},{id:"7-usecountdown-组合式-api",text:"7. useCountDown 组合式 API",depth:2},{id:"71-parsetime-解析时间",text:"7.1 parseTime 解析时间",depth:3},{id:"72-usecountdown-真实逻辑",text:"7.2 useCountDown 真实逻辑",depth:3},{id:"8-rafcancelrafinbrowser-实现",text:"8. raf、cancelRaf、inBrowser 实现",depth:2},{id:"9-支持格式化时间默认-hhmmss",text:"9. 支持格式化时间，默认 HH:mm:ss",depth:2},{id:"91-parseformat-处理格式化",text:"9.1 parseFormat 处理格式化",depth:3},{id:"92-padzero-补零",text:"9.2 padZero 补零",depth:3},{id:"10-总结",text:"10. 总结",depth:2},{id:"11-加源码共读群交流",text:"11. 加源码共读群交流",depth:2}],title:"",headingTitle:"",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(n,e,r){r.d(e,{Z:()=>c});var t=r(52676),s=r(75271),o=r(92815);r(18544);let a={"zh-CN":n=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${n.minutes>=1?`${Math.ceil(n.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function i(n,e,r){let t=Object.keys(a).includes(e)?e:r;return a[t](n)}let c=n=>{let{defaultLocale:e="en-US"}=n,r=(0,o.Vi)().page.readingTimeData,a=(0,o.Jr)(),c=(0,o.e7)(),[d,l]=(0,s.useState)(i(r,a,e));return(0,s.useEffect)(()=>{l(i(r,a,e))},[a,r]),(0,t.jsx)("span",{"data-dark":String(c),className:"rp-reading-time",children:d})}}}]);