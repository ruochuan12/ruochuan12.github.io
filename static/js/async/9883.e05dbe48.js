"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["9883"],{60332:function(e,r,n){e.exports=n.p+"static/image/wechat-official-accounts-mini.44481959.png"},28603:function(e,r,n){n.r(r),n.d(r,{default:()=>a});var t=n(52676),s=n(40453),o=n(20713),c=n(60332);function d(e){let r=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",code:"code",pre:"pre",h2:"h2",h3:"h3",strong:"strong",em:"em",img:"img"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"javascript-对象所有api解析2020版",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#javascript-对象所有api解析2020版",children:"#"}),"JavaScript 对象所有API解析【2020版】"]}),"\n",(0,t.jsx)(o.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["大家好，我是",(0,t.jsx)(r.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,t.jsx)(r.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(r.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(r.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(r.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"写于 2017年08月20日"}),"，虽然是2017年写的文章，但现在即将",(0,t.jsx)(r.code,{children:"2020年"}),"依旧不过时，现在补充了",(0,t.jsx)(r.code,{children:"2019年"}),"新增的",(0,t.jsx)(r.code,{children:"ES10"})," ",(0,t.jsx)(r.code,{children:"Object.fromEntries()"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["近日发现有挺多人对对象基础",(0,t.jsx)(r.code,{children:"API"}),"不熟悉，举个开发中常见的需求，经常会有类似的封装",(0,t.jsx)(r.code,{children:"http"}),"到原型",(0,t.jsx)(r.code,{children:"Vue.prototype"}),"，一般人是这样封装的，但容易被篡改。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"function Vue(){\n console.log('test vue');\n}\nfunction http(){\n  console.log('我是调用接口的http');\n}\nVue.prototype.$http = http;\nvar vm = new Vue();\nvm.$http()\nvm.$http = 1; // 一旦被修改，虽然一般正常情况下不会被修改\nvm.$http(); // 再次调用报错\n"})}),"\n",(0,t.jsxs)(r.p,{children:["熟悉",(0,t.jsx)(r.code,{children:"Object.defineProperty"}),"或者说熟悉对象",(0,t.jsx)(r.code,{children:"API"}),"的人，一般是如下代码写的，则不会出现被修改的问题。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"function Vue(){\n console.log('test vue');\n};\nfunction http(){\n  console.log('我是调用接口的http');\n};\nObject.defineProperty(Vue.prototype, '$http', {\n    get(){\n     return http;\n    }\n});\nvar vm = new Vue();\nvm.$http();\nvm.$http = 1; // 这里无法修改\nvm.$http(); // 调用正常\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://github.com/vuejs/vue-router/blob/dev/src/install.js#L38-L44",rel:"noopener noreferrer",target:"_blank",children:"vue-router 源码里就是类似这样写的"}),"，",(0,t.jsx)(r.code,{children:"this.$router"}),"，",(0,t.jsx)(r.code,{children:"this.$route"}),"无法修改。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// vue-router 源码\nObject.defineProperty(Vue.prototype, '$router', {\n	get () { return this._routerRoot._router }\n})\nObject.defineProperty(Vue.prototype, '$route', {\n	get () { return this._routerRoot._route }\n})\n"})}),"\n",(0,t.jsx)(r.p,{children:"以下是正文~"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["之前看到",(0,t.jsx)(r.a,{href:"http://louiszhai.github.io/2017/04/28/array/",rel:"noopener noreferrer",target:"_blank",children:"【深度长文】JavaScript数组所有API全解密"}),"和",(0,t.jsx)(r.a,{href:"http://louiszhai.github.io/2016/01/12/js.String/",rel:"noopener noreferrer",target:"_blank",children:"JavaScript字符串所有API全解密"}),"这两篇高质量的文章。发现没写对象API解析（估计是博主觉得简单，就没写）。刚好我看到《JavaScript面向对象编程指南（第2版）》，觉得有必要写（或者说chao）一下，也好熟悉下对象的所有API用法。"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"创建对象的两种方式："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var o = new Object();\nvar o = {}; // 推荐\n"})}),"\n",(0,t.jsx)(r.p,{children:"该构造器可以接受任何类型的参数，并且会自动识别参数的类型，并选择更合适的构造器来完成相关操作。比如："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var o = new Object('something');\no.constructor; // ƒ String() { [native code] }\nvar n = new Object(123);\nn.constructor; // ƒ Number() { [native code] }\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"一object构造器的成员",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#一object构造器的成员",children:"#"}),"一、Object构造器的成员"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototype",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototype",children:"#"}),"Object.prototype"]}),"\n",(0,t.jsxs)(r.p,{children:["该属性是所有对象的原型（包括 ",(0,t.jsx)(r.code,{children:"Object"}),"对象本身），语言中的其他对象正是通过对该属性上添加东西来实现它们之间的继承关系的。所以要小心使用。\n比如："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var s = new String('若川');\nObject.prototype.custom = 1;\nconsole.log(s.custom); // 1\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"二objectprototype-的成员",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#二objectprototype-的成员",children:"#"}),"二、Object.prototype 的成员"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypeconstructor",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypeconstructor",children:"#"}),"Object.prototype.constructor"]}),"\n",(0,t.jsxs)(r.p,{children:["该属性指向用来构造该函数对象的构造器，在这里为",(0,t.jsx)(r.code,{children:"Object()"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.prototype.constructor === Object; // true\nvar o = new Object();\no.constructor === Object; // true\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypetostringradix",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypetostringradix",children:"#"}),"Object.prototype.toString(radix)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法返回的是一个用于描述目标对象的字符串。特别地，当目标是一个Number对象时，可以传递一个用于进制数的参数",(0,t.jsx)(r.code,{children:"radix"}),"，该参数",(0,t.jsx)(r.code,{children:"radix"}),"，该参数的默认值为10。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var o = {prop:1};\no.toString(); // '[object Object]'\nvar n = new Number(255);\nn.toString(); // '255'\nn.toString(16); // 'ff'\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypetolocalestring",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypetolocalestring",children:"#"}),"Object.prototype.toLocaleString()"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法的作用与",(0,t.jsx)(r.code,{children:"toString()"}),"基本相同，只不过它做一些本地化处理。该方法会根据当前对象的不同而被重写，例如",(0,t.jsx)(r.code,{children:"Date()"}),",",(0,t.jsx)(r.code,{children:"Number()"}),",",(0,t.jsx)(r.code,{children:"Array()"}),",它们的值都会以本地化的形式输出。当然，对于包括",(0,t.jsx)(r.code,{children:"Object()"}),"在内的其他大多数对象来说，该方法与",(0,t.jsx)(r.code,{children:"toString()"}),"是基本相同的。\n在浏览器环境下，可以通过",(0,t.jsx)(r.code,{children:"BOM"}),"对象",(0,t.jsx)(r.code,{children:"Navigator"}),"的",(0,t.jsx)(r.code,{children:"language"}),"属性（在",(0,t.jsx)(r.code,{children:"IE"}),"中则是",(0,t.jsx)(r.code,{children:"userLanguage"}),"）来了解当前所使用的语言："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"navigator.language; //'en-US'\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypevalueof",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypevalueof",children:"#"}),"Object.prototype.valueOf()"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法返回的是用基本类型所表示的",(0,t.jsx)(r.code,{children:"this"}),"值，如果它可以用基本类型表示的话。如果",(0,t.jsx)(r.code,{children:"Number"}),"对象返回的是它的基本数值，而",(0,t.jsx)(r.code,{children:"Date"}),"对象返回的是一个时间戳（",(0,t.jsx)(r.code,{children:"timestamp"}),"）。如果无法用基本数据类型表示，该方法会返回",(0,t.jsx)(r.code,{children:"this"}),"本身。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// Object\nvar o = {};\ntypeof o.valueOf(); // 'object'\no.valueOf() === o; // true\n// Number\nvar n = new Number(101);\ntypeof n; // 'object'\ntypeof n.vauleOf; // 'function'\ntypeof n.valueOf(); // 'number'\nn.valueOf() === n; // false\n// Date\nvar d = new Date();\ntypeof d.valueOf(); // 'number'\nd.valueOf(); // 1503146772355\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypehasownpropertyprop",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypehasownpropertyprop",children:"#"}),"Object.prototype.hasOwnProperty(prop)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法仅在目标属性为对象自身属性时返回",(0,t.jsx)(r.code,{children:"true"}),",而当该属性是从原型链中继承而来或根本不存在时，返回",(0,t.jsx)(r.code,{children:"false"}),"。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var o = {prop:1};\no.hasOwnProperty('prop'); // true\no.hasOwnProperty('toString'); // false\no.hasOwnProperty('formString'); // false\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypeisprototypeofobj",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypeisprototypeofobj",children:"#"}),"Object.prototype.isPrototypeOf(obj)"]}),"\n",(0,t.jsxs)(r.p,{children:["如果目标对象是当前对象的原型，该方法就会返回",(0,t.jsx)(r.code,{children:"true"}),"，而且，当前对象所在原型上的所有对象都能通过该测试，并不局限与它的直系关系。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var s = new String('');\nObject.prototype.isPrototypeOf(s); // true\nString.prototype.isPrototypeOf(s); // true\nArray.prototype.isPrototypeOf(s); // false\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectprototypepropertyisenumerableprop",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectprototypepropertyisenumerableprop",children:"#"}),"Object.prototype.propertyIsEnumerable(prop)"]}),"\n",(0,t.jsxs)(r.p,{children:["如果目标属性能在",(0,t.jsx)(r.code,{children:"for in"}),"循环中被显示出来，该方法就返回",(0,t.jsx)(r.code,{children:"true"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var a = [1,2,3];\na.propertyIsEnumerable('length'); // false\na.propertyIsEnumerable(0); // true\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"三在es5中附加的object属性",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#三在es5中附加的object属性",children:"#"}),"三、在",(0,t.jsx)(r.code,{children:"ES5"}),"中附加的",(0,t.jsx)(r.code,{children:"Object"}),"属性"]}),"\n",(0,t.jsxs)(r.p,{children:["在",(0,t.jsx)(r.code,{children:"ES3"}),"中，除了一些内置属性（如：",(0,t.jsx)(r.code,{children:"Math.PI"}),"），对象的所有的属性在任何时候都可以被修改、插入、删除。在",(0,t.jsx)(r.code,{children:"ES5"}),"中，我们可以设置属性是否可以被改变或是被删除——在这之前，它是内置属性的特权。",(0,t.jsx)(r.code,{children:"ES5"}),"中引入了",(0,t.jsx)(r.strong,{children:"属性描述符"}),"的概念，我们可以通过它对所定义的属性有更大的控制权。这些",(0,t.jsx)(r.strong,{children:"属性描述符"}),"（特性）包括："]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"value"}),"——当试图获取属性时所返回的值。\n",(0,t.jsx)(r.code,{children:"writable"}),"——该属性是否可写。\n",(0,t.jsx)(r.code,{children:"enumerable"}),"——该属性在",(0,t.jsx)(r.code,{children:"for in"}),"循环中是否会被枚举\n",(0,t.jsx)(r.code,{children:"configurable"}),"——该属性是否可被删除。\n",(0,t.jsx)(r.code,{children:"set()"}),"——该属性的更新操作所调用的函数。\n",(0,t.jsx)(r.code,{children:"get()"}),"——获取属性值时所调用的函数。\n另外，",(0,t.jsx)(r.strong,{children:"数据描述符"}),"（其中属性为：",(0,t.jsx)(r.code,{children:"enumerable"}),"，",(0,t.jsx)(r.code,{children:"configurable"}),"，",(0,t.jsx)(r.code,{children:"value"}),"，",(0,t.jsx)(r.code,{children:"writable"}),"）与",(0,t.jsx)(r.strong,{children:"存取描述符"}),"（其中属性为",(0,t.jsx)(r.code,{children:"enumerable"}),"，",(0,t.jsx)(r.code,{children:"configurable"}),"，",(0,t.jsx)(r.code,{children:"set()"}),"，",(0,t.jsx)(r.code,{children:"get()"}),"）之间是有互斥关系的。在定义了",(0,t.jsx)(r.code,{children:"set()"}),"和",(0,t.jsx)(r.code,{children:"get()"}),"之后，描述符会认为存取操作已被 定义了，其中再定义",(0,t.jsx)(r.code,{children:"value"}),"和",(0,t.jsx)(r.code,{children:"writable"}),"会",(0,t.jsx)(r.strong,{children:"引起错误"}),"。\n以下是",(0,t.jsx)(r.em,{children:"ES3"}),"风格的属性定义方式："]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var person = {};\nperson.legs = 2;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["以下是等价的ES5通过",(0,t.jsx)(r.strong,{children:"数据描述符"}),"定义属性的方式："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var person = {};\nObject.defineProperty(person, 'legs', {\n    value: 2,\n    writable: true,\n    configurable: true,\n    enumerable: true\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:["其中， 除了value的默认值为",(0,t.jsx)(r.code,{children:"undefined"}),"以外，其他的默认值都为",(0,t.jsx)(r.code,{children:"false"}),"。这就意味着，如果想要通过这一方式定义一个可写的属性，必须显示将它们设为",(0,t.jsx)(r.code,{children:"true"}),"。\n或者，我们也可以通过",(0,t.jsx)(r.code,{children:"ES5"}),"的存储描述符来定义："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var person = {};\nObject.defineProperty(person, 'legs', {\n    set:function(v) {\n        return this.value = v;\n    },\n    get: function(v) {\n        return this.value;\n    },\n    configurable: true,\n    enumerable: true\n});\nperson.legs = 2;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["这样一来，多了许多可以用来描述属性的代码，如果想要防止别人篡改我们的属性，就必须要用到它们。此外，也不要忘了浏览器向后兼容",(0,t.jsx)(r.code,{children:"ES3"}),"方面所做的考虑。例如，跟添加",(0,t.jsx)(r.code,{children:"Array.prototype"}),"属性不一样，我们不能再旧版的浏览器中使用",(0,t.jsx)(r.code,{children:"shim"}),"这一特性。\n另外，我们还可以（通过定义",(0,t.jsx)(r.code,{children:"nonmalleable"}),"属性），在具体行为中运用这些描述符："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var person = {};\nObject.defineProperty(person, 'heads', {value: 1});\nperson.heads = 0; // 0\nperson.heads; // 1  (改不了)\ndelete person.heads; // false\nperson.heads // 1 (删不掉)\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectdefinepropertyobj-prop-descriptor-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectdefinepropertyobj-prop-descriptor-es5",children:"#"}),"Object.defineProperty(obj, prop, descriptor) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:["具体用法可参见上文，或者查看MDN。\n",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",rel:"noopener noreferrer",target:"_blank",children:"MDN Object.defineProperty(obj, descriptor)"})]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Vue.js文档：",(0,t.jsx)(r.a,{href:"https://cn.vuejs.org/v2/guide/reactivity.html",rel:"noopener noreferrer",target:"_blank",children:(0,t.jsx)(r.strong,{children:"如何追踪变化"})})," 把一个普通 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。Object.defineProperty 是仅 ES5 支持，且无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。"]}),"\n"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectdefinepropertiesobj-props-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectdefinepropertiesobj-props-es5",children:"#"}),"Object.defineProperties(obj, props) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法的作用与",(0,t.jsx)(r.code,{children:"defineProperty()"}),"基本相同，只不过它可以用来一次定义多个属性。\n比如："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var glass = Object.defineProperties({}, {\n    'color': {\n        value: 'transparent',\n        writable: true\n    },\n    'fullness': {\n        value: 'half',\n        writable: false\n    }\n});\nglass.fullness; // 'half'\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectgetprototypeofobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetprototypeofobj-es5",children:"#"}),"Object.getPrototypeOf(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:["之前在",(0,t.jsx)(r.code,{children:"ES3"}),"中，我们往往需要通过",(0,t.jsx)(r.code,{children:"Object.prototype.isPrototypeOf()"}),"去猜测某个给定的对象的原型是什么，如今在",(0,t.jsx)(r.code,{children:"ES5"}),"中，我们可以直接询问该对象“你的原型是什么？”"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.getPrototypeOf([]) === Array.prototype; // true\nObject.getPrototypeOf(Array.prototype) === Object.prototype; // true\nObject.getPrototypeOf(Object.prototype) === null; // true\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectcreateobj-descr-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectcreateobj-descr-es5",children:"#"}),"Object.create(obj, descr) (ES5)"]}),"\n",(0,t.jsx)(r.p,{children:"该方法主要用于创建一个新对象，并为其设置原型，用（上述）属性描述符来定义对象的原型属性。"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var parent = {hi: 'Hello'};\nvar o = Object.create(parent, {\n    prop: {\n        value: 1\n    }\n});\no.hi; // 'Hello'\n// 获得它的原型\nObject.getPrototypeOf(parent) === Object.prototype; // true 说明parent的原型是Object.prototype\nObject.getPrototypeOf(o); // {hi: \"Hello\"} // 说明o的原型是{hi: \"Hello\"}\no.hasOwnProperty('hi'); // false 说明hi是原型上的\no.hasOwnProperty('prop'); // true 说明prop是原型上的自身上的属性。\n"})}),"\n",(0,t.jsxs)(r.p,{children:["现在，我们甚至可以用它来创建一个完全空白的对象，这样的事情在",(0,t.jsx)(r.code,{children:"ES3"}),"中可是做不到的。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var o = Object.create(null);\ntypeof o.toString(); // 'undefined'\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectgetownpropertydesciptorobj-property-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetownpropertydesciptorobj-property-es5",children:"#"}),"Object.getOwnPropertyDesciptor(obj, property) (ES5)"]}),"\n",(0,t.jsx)(r.p,{children:"该方法可以让我们详细查看一个属性的定义。甚至可以通过它一窥那些内置的，之前不可见的隐藏属性。"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.getOwnPropertyDescriptor(Object.prototype, 'toString');\n// {writable: true, enumerable: false, configurable: true, value: ƒ toString()}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectgetownpropertynamesobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetownpropertynamesobj-es5",children:"#"}),"Object.getOwnPropertyNames(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法返回一个数组，其中包含了当前对象所有属性的名称（字符串），不论它们是否可枚举。当然，也可以用",(0,t.jsx)(r.code,{children:"Object.keys()"}),"来单独返回可枚举的属性。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'Object.getOwnPropertyNames(Object.prototype);\n// ["__defineGetter__", "__defineSetter__", "hasOwnProperty", "__lookupGetter__", "__lookupSetter__", "propertyIsEnumerable", "toString", "valueOf", "__proto__", "constructor", "toLocaleString", "isPrototypeOf"]\nObject.keys(Object.prototype);\n// []\nObject.getOwnPropertyNames(Object);\n// ["length", "name", "arguments", "caller", "prototype", "assign", "getOwnPropertyDescriptor", "getOwnPropertyDescriptors", "getOwnPropertyNames", "getOwnPropertySymbols", "is", "preventExtensions", "seal", "create", "defineProperties", "defineProperty", "freeze", "getPrototypeOf", "setPrototypeOf", "isExtensible", "isFrozen", "isSealed", "keys", "entries", "values"]\nObject.keys(Object);\n// []\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"objectpreventextensionsobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectpreventextensionsobj-es5",children:"#"}),"Object.preventExtensions(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectisextensibleobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectisextensibleobj-es5",children:"#"}),"Object.isExtensible(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"preventExtensions()"}),"方法用于禁止向某一对象添加更多属性，而",(0,t.jsx)(r.code,{children:"isExtensible()"}),"方法则用于检查某对象是否还可以被添加属性。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var deadline = {};\nObject.isExtensible(deadline); // true\ndeadline.date = 'yesterday'; // 'yesterday'\nObject.preventExtensions(deadline);\nObject.isExtensible(deadline); // false\ndeadline.date = 'today';\ndeadline.date; // 'today'\n// 尽管向某个不可扩展的对象中添加属性不算是一个错误操作，但它没有任何作用。\ndeadline.report = true;\ndeadline.report; // undefined\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectsealobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectsealobj-es5",children:"#"}),"Object.seal(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectissealobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectissealobj-es5",children:"#"}),"Object.isSeal(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"seal()"}),"方法可以让一个对象密封，并返回被密封后的对象。\n",(0,t.jsx)(r.code,{children:"seal()"}),"方法的作用与",(0,t.jsx)(r.code,{children:"preventExtensions()"}),"基本相同，但除此之外，它还会将现有属性\n设置成不可配置。也就是说，在这种情况下，我们只能变更现有属性的值，但不能删除或（用",(0,t.jsx)(r.code,{children:"defineProperty()"}),"）重新配置这些属性，例如不能将一个可枚举的属性改成不可枚举。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var person = {legs:2};\n// person === Object.seal(person); // true\nObject.isSealed(person); // true\nObject.getOwnPropertyDescriptor(person, 'legs');\n// {value: 2, writable: true, enumerable: true, configurable: false}\ndelete person.legs; // false (不可删除，不可配置)\nObject.defineProperty(person, 'legs',{value:2});\nperson.legs; // 2\nperson.legs = 1;\nperson.legs; // 1 (可写)\nObject.defineProperty(person, \"legs\", { get: function() { return \"legs\"; } });\n// 抛出TypeError异常\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectfreezeobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectfreezeobj-es5",children:"#"}),"Object.freeze(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectisfrozenobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectisfrozenobj-es5",children:"#"}),"Object.isFrozen(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"freeze()"}),"方法用于执行一切不受",(0,t.jsx)(r.code,{children:"seal()"}),"方法限制的属性值变更。",(0,t.jsx)(r.code,{children:"Object.freeze()"})," 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var deadline = Object.freeze({date: 'yesterday'});\ndeadline.date = 'tomorrow';\ndeadline.excuse = 'lame';\ndeadline.date; // 'yesterday'\ndeadline.excuse; // undefined\nObject.isSealed(deadline); // true;\nObject.isFrozen(deadline); // true\nObject.getOwnPropertyDescriptor(deadline, 'date');\n// {value: \"yesterday\", writable: false, enumerable: true, configurable: false} (不可配置，不可写)\nObject.keys(deadline); // ['date'] (可枚举)\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectkeysobj-es5",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectkeysobj-es5",children:"#"}),"Object.keys(obj) (ES5)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法是一种特殊的",(0,t.jsx)(r.code,{children:"for-in"}),"循环。它只返回当前对象的属性（不像",(0,t.jsx)(r.code,{children:"for-in"}),"），而且这些属性也必须是可枚举的（这点和",(0,t.jsx)(r.code,{children:"Object.getOwnPropertyNames()"}),"不同，不论是否可以枚举）。返回值是一个字符串数组。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'Object.prototype.customProto = 101;\nObject.getOwnPropertyNames(Object.prototype);\n// [..., "constructor", "toLocaleString", "isPrototypeOf", "customProto"]\nObject.keys(Object.prototype); // [\'customProto\']\nvar o = {own: 202};\no.customProto; // 101\nObject.keys(o); // [\'own\']\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"四在es6中附加的object属性",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#四在es6中附加的object属性",children:"#"}),"四、在",(0,t.jsx)(r.code,{children:"ES6"}),"中附加的",(0,t.jsx)(r.code,{children:"Object"}),"属性"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectisvalue1-value2-es6",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectisvalue1-value2-es6",children:"#"}),"Object.is(value1, value2) (ES6)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法用来比较两个值是否严格相等。它与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是",(0,t.jsx)(r.code,{children:"+0"}),"不等于",(0,t.jsx)(r.code,{children:"-0"}),"，而是",(0,t.jsx)(r.code,{children:"NaN"}),"等于自身。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.is('若川', '若川'); // true\nObject.is({},{}); // false\nObject.is(+0, -0); // false\n+0 === -0; // true\nObject.is(NaN, NaN); // true\nNaN === NaN; // false\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"ES5"}),"可以通过以下代码部署",(0,t.jsx)(r.code,{children:"Object.is"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.defineProperty(Object, 'is', {\n    value: function() {x, y} {\n        if (x === y) {\n           // 针对+0不等于-0的情况\n           return x !== 0 || 1 / x === 1 / y;\n        }\n        // 针对 NaN的情况\n        return x !== x && y !== y;\n    },\n    configurable: true,\n    enumerable: false,\n    writable: true\n});\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectassigntarget-sources-es6",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectassigntarget-sources-es6",children:"#"}),"Object.assign(target, ...sources) (ES6)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法用来源对象（",(0,t.jsx)(r.code,{children:"source"}),"）的所有可枚举的属性复制到目标对象（",(0,t.jsx)(r.code,{children:"target"}),"）。它至少需要两个对象作为参数，第一个参数是目标对象",(0,t.jsx)(r.code,{children:"target"}),"，后面的参数都是源对象（",(0,t.jsx)(r.code,{children:"source"}),"）。只有一个参数不是对象，就会抛出",(0,t.jsx)(r.code,{children:"TypeError"}),"错误。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var target = {a: 1};\nvar source1 = {b: 2};\nvar source2 = {c: 3};\nobj = Object.assign(target, source1, source2);\ntarget; // {a:1,b:2,c:3}\nobj; // {a:1,b:2,c:3}\ntarget === obj; // true\n// 如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\nvar source3 = {a:2,b:3,c:4};\nObject.assign(target, source3);\ntarget; // {a:2,b:3,c:4}\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Object.assign"}),"只复制自身属性，不可枚举的属性（",(0,t.jsx)(r.code,{children:"enumerable"}),"为",(0,t.jsx)(r.code,{children:"false"}),"）和继承的属性不会被复制。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.assign({b: 'c'},\n    Object.defineProperty({}, 'invisible', {\n        enumerable: false,\n        value: 'hello'\n    })\n);\n// {b: 'c'}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["属性名为",(0,t.jsx)(r.code,{children:"Symbol"}),"值的属性，也会被",(0,t.jsx)(r.code,{children:"Object.assign()"}),"复制。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.assign({a: 'b'}, {[Symbol('c')]: 'd'});\n// {a: 'b', Symbol(c): 'd'}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["对于嵌套的对象，",(0,t.jsx)(r.code,{children:"Object.assign()"}),"的处理方法是替换，而不是添加。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.assign({a: {b:'c',d:'e'}}, {a:{b:'hello'}});\n// {a: {b:'hello'}}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["对于数组，",(0,t.jsx)(r.code,{children:"Object.assign()"}),"把数组视为属性名为0、1、2的对象。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.assign([1,2,3], [4,5]);\n// [4,5,3]\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectgetownpropertysymbolsobj-es6",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetownpropertysymbolsobj-es6",children:"#"}),"Object.getOwnPropertySymbols(obj) (ES6)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法会返回一个数组，该数组包含了指定对象自身的（非继承的）所有 ",(0,t.jsx)(r.code,{children:"symbol"})," 属性键。\n该方法和 ",(0,t.jsx)(r.code,{children:"Object.getOwnPropertyNames()"})," 类似，但后者返回的结果只会包含字符串类型的属性键，也就是传统的属性名。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.getOwnPropertySymbols({a: 'b', [Symbol('c')]: 'd'});\n// [Symbol(c)]\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectsetprototypeofobj-prototype-es6",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectsetprototypeofobj-prototype-es6",children:"#"}),"Object.setPrototypeOf(obj, prototype) (ES6)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法设置一个指定的对象的原型 ( 即, 内部",(0,t.jsx)(r.code,{children:"[[Prototype]]"}),"属性）到另一个对象或  ",(0,t.jsx)(r.code,{children:"null"}),"。\n",(0,t.jsx)(r.code,{children:"__proto__"}),"属性用来读取或设置当前对象的",(0,t.jsx)(r.code,{children:"prototype"}),"对象。目前，所有浏览器（包括",(0,t.jsx)(r.code,{children:"IE11"}),"）都部署了这个属性。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// ES6写法\nvar obj = {\n    method: function(){\n        // code ...\n    }\n};\n// obj.__proto__ = someOtherObj;\n// ES5写法\nvar obj = Object.create(someOtherObj);\nobj.method = function(){\n    // code ...\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["该属性没有写入",(0,t.jsx)(r.code,{children:"ES6"}),"的正文，而是写入了附录。",(0,t.jsx)(r.code,{children:"__proto__"}),"前后的双下划线说明它本质上是一个内部属性，而不是正式对外的一个API。无论从语义的角度，还是从兼容性的角度，都不要使用这个属性。而是使用",(0,t.jsx)(r.code,{children:"Object.setPrototypeOf()"}),"（写操作），",(0,t.jsx)(r.code,{children:"Object.getPrototypeOf()"}),"（读操作），或",(0,t.jsx)(r.code,{children:"Object.create()"}),"（生成操作）代替。\n在实现上，",(0,t.jsx)(r.code,{children:"__proto__"}),"调用的",(0,t.jsx)(r.code,{children:"Object.prototype.__proto__"}),"。\n",(0,t.jsx)(r.code,{children:"Object.setPrototypeOf()"}),"方法的作用与",(0,t.jsx)(r.code,{children:"__proto__"}),"作用相同，用于设置一个对象的",(0,t.jsx)(r.code,{children:"prototype"}),"对象。它是",(0,t.jsx)(r.code,{children:"ES6"}),"正式推荐的设置原型对象的方法。"]}),"\n",(0,t.jsxs)(r.h2,{id:"五在es8中附加的object属性",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#五在es8中附加的object属性",children:"#"}),"五、在",(0,t.jsx)(r.code,{children:"ES8"}),"中附加的",(0,t.jsx)(r.code,{children:"Object"}),"属性"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectgetownpropertydescriptorsobj-es8",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetownpropertydescriptorsobj-es8",children:"#"}),"Object.getOwnPropertyDescriptors(obj) (ES8)"]}),"\n",(0,t.jsxs)(r.p,{children:["该方法基本与",(0,t.jsx)(r.code,{children:"Object.getOwnPropertyDescriptor(obj, property)"}),"用法一致，只不过它可以用来获取一个对象的所有自身属性的描述符。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"Object.getOwnPropertyDescriptor(Object.prototype, 'toString');\n// {writable: true, enumerable: false, configurable: true, value: ƒ toString()}\nObject.getOwnPropertyDescriptors(Object.prototype); // 可以自行在浏览器控制台查看效果。\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectvaluesobj-es8",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectvaluesobj-es8",children:"#"}),"Object.values(obj) (ES8)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Object.values()"})," 方法与",(0,t.jsx)(r.code,{children:"Object.keys"}),"类似。返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用",(0,t.jsx)(r.code,{children:"for...in"}),"循环的顺序相同 ( 区别在于",(0,t.jsx)(r.code,{children:"for-in"}),"循环枚举原型链中的属性 )。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var obj = {a:1,b:2,c:3};\nObject.keys(obj); // ['a','b','c']\nObject.values(obj); // [1,2,3]\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"objectentriesobj-es8",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectentriesobj-es8",children:"#"}),"Object.entries(obj) (ES8)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Object.entries()"})," 方法返回一个给定对象自己的可枚举属性",(0,t.jsx)(r.code,{children:"[key，value]"}),"对的数组，数组中键值对的排列顺序和使用 ",(0,t.jsx)(r.code,{children:"for...in"})," 循环遍历该对象时返回的顺序一致（区别在于一个",(0,t.jsx)(r.code,{children:"for-in"}),"循环也枚举原型链中的属性）。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var obj = {a:1,b:2,c:3};\nObject.keys(obj); // ['a','b','c']\nObject.values(obj); // [1,2,3]\nObject.entries(obj); // [['a',1],['b',2],['c',3]]\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"六在es10中附加的object属性",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#六在es10中附加的object属性",children:"#"}),"六、在",(0,t.jsx)(r.code,{children:"ES10"}),"中附加的",(0,t.jsx)(r.code,{children:"Object"}),"属性"]}),"\n",(0,t.jsxs)(r.h3,{id:"objectfromentriesiterable-es10",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#objectfromentriesiterable-es10",children:"#"}),"Object.fromEntries(iterable) (ES10)"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Object.fromEntries()"}),"方法返回一个给定可迭代对象（类似",(0,t.jsx)(r.code,{children:"Array"}),"、",(0,t.jsx)(r.code,{children:"Map"}),"或其他可迭代对象）对应属性的新对象。"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Object.fromEntries()"})," 是 ",(0,t.jsx)(r.code,{children:"Object.entries()"}),"的逆操作。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var arr = [['a',1],['b',2],['c',3]];\nObject.fromEntries(obj); // {a: 1, b: 2, c: 3}\nvar entries = new Map([\n  ['name', '若川'],\n  ['age', 18]\n]);\nObject.fromEntries(entries) // {name: '若川', age: 18}\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"小结",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"}),"小结"]}),"\n",(0,t.jsxs)(r.p,{children:["细心的读者可能会发现",(0,t.jsx)(r.code,{children:"MDN"}),"上还有一些",(0,t.jsx)(r.code,{children:"API"}),"，本文没有列举到。因为那些是非标准的",(0,t.jsx)(r.code,{children:"API"}),"。熟悉对象的API对理解原型和原型链相关知识会有一定帮助。常用的API主要有",(0,t.jsx)(r.code,{children:"Object.prototype.toString()"}),"，",(0,t.jsx)(r.code,{children:"Object.prototype.hasOwnProperty()"}),"， ",(0,t.jsx)(r.code,{children:"Object.getPrototypeOf(obj)"}),"，",(0,t.jsx)(r.code,{children:"Object.create()"}),"，",(0,t.jsx)(r.code,{children:"Object.defineProperty"}),"，",(0,t.jsx)(r.code,{children:"Object.keys(obj)"}),"，",(0,t.jsx)(r.code,{children:"Object.assign()"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"参考资料",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考资料",children:"#"}),"参考资料"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",rel:"noopener noreferrer",target:"_blank",children:"MDN Object API"}),"\n",(0,t.jsx)(r.a,{href:"https://book.douban.com/subject/26302623/",rel:"noopener noreferrer",target:"_blank",children:"JavaScript面向对象编程指南（第2版）（豆瓣读书链接）"}),"\n",(0,t.jsx)(r.a,{href:"http://es6.ruanyifeng.com/",rel:"noopener noreferrer",target:"_blank",children:"阮一峰 ES6标准入门2"})]}),"\n",(0,t.jsxs)(r.h2,{id:"关于",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#关于",children:"#"}),"关于"]}),"\n",(0,t.jsxs)(r.p,{children:["作者：常以",(0,t.jsx)(r.strong,{children:"若川"}),"为名混迹于江湖。前端路上 | PPT爱好者 | 所知甚少，唯善学。","\n",(0,t.jsx)(r.a,{href:"https://ruochuan12.github.io/",rel:"noopener noreferrer",target:"_blank",children:"个人博客"}),"\n",(0,t.jsx)(r.a,{href:"https://juejin.im/user/1415826704971918/posts",rel:"noopener noreferrer",target:"_blank",children:"掘金专栏"}),"，欢迎关注~","\n",(0,t.jsxs)(r.a,{href:"https://segmentfault.com/blog/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:[(0,t.jsx)(r.code,{children:"segmentfault"}),"前端视野专栏"]}),"，开通了",(0,t.jsx)(r.strong,{children:"前端视野"}),"专栏，欢迎关注~","\n",(0,t.jsx)(r.a,{href:"https://zhuanlan.zhihu.com/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:"知乎前端视野专栏"}),"，开通了",(0,t.jsx)(r.strong,{children:"前端视野"}),"专栏，欢迎关注~","\n",(0,t.jsx)(r.a,{href:"https://github.com/ruochuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"github blog"}),"，相关源码和资源都放在这里，求个",(0,t.jsx)(r.code,{children:"star"}),"^_^~"]}),"\n",(0,t.jsxs)(r.h2,{id:"微信公众号--若川视野",children:[(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#微信公众号--若川视野",children:"#"}),"微信公众号  若川视野"]}),"\n",(0,t.jsxs)(r.p,{children:["可能比较有趣的微信公众号，长按扫码关注。也可以加微信 ",(0,t.jsx)(r.code,{children:"ruochuan12"}),"，注明来源，拉您进【前端视野交流群】。"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"若川视野",src:c})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,t.jsx)(r,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["js-object-api%2Findex.md"]={toc:[{id:"一object构造器的成员",text:"一、Object构造器的成员",depth:2},{id:"objectprototype",text:"Object.prototype",depth:3},{id:"二objectprototype-的成员",text:"二、Object.prototype 的成员",depth:2},{id:"objectprototypeconstructor",text:"Object.prototype.constructor",depth:3},{id:"objectprototypetostringradix",text:"Object.prototype.toString(radix)",depth:3},{id:"objectprototypetolocalestring",text:"Object.prototype.toLocaleString()",depth:3},{id:"objectprototypevalueof",text:"Object.prototype.valueOf()",depth:3},{id:"objectprototypehasownpropertyprop",text:"Object.prototype.hasOwnProperty(prop)",depth:3},{id:"objectprototypeisprototypeofobj",text:"Object.prototype.isPrototypeOf(obj)",depth:3},{id:"objectprototypepropertyisenumerableprop",text:"Object.prototype.propertyIsEnumerable(prop)",depth:3},{id:"三在es5中附加的object属性",text:"三、在`ES5`中附加的`Object`属性",depth:2},{id:"objectdefinepropertyobj-prop-descriptor-es5",text:"Object.defineProperty(obj, prop, descriptor) (ES5)",depth:3},{id:"objectdefinepropertiesobj-props-es5",text:"Object.defineProperties(obj, props) (ES5)",depth:3},{id:"objectgetprototypeofobj-es5",text:"Object.getPrototypeOf(obj) (ES5)",depth:3},{id:"objectcreateobj-descr-es5",text:"Object.create(obj, descr) (ES5)",depth:3},{id:"objectgetownpropertydesciptorobj-property-es5",text:"Object.getOwnPropertyDesciptor(obj, property) (ES5)",depth:3},{id:"objectgetownpropertynamesobj-es5",text:"Object.getOwnPropertyNames(obj) (ES5)",depth:3},{id:"objectpreventextensionsobj-es5",text:"Object.preventExtensions(obj) (ES5)",depth:3},{id:"objectisextensibleobj-es5",text:"Object.isExtensible(obj) (ES5)",depth:3},{id:"objectsealobj-es5",text:"Object.seal(obj) (ES5)",depth:3},{id:"objectissealobj-es5",text:"Object.isSeal(obj) (ES5)",depth:3},{id:"objectfreezeobj-es5",text:"Object.freeze(obj) (ES5)",depth:3},{id:"objectisfrozenobj-es5",text:"Object.isFrozen(obj) (ES5)",depth:3},{id:"objectkeysobj-es5",text:"Object.keys(obj) (ES5)",depth:3},{id:"四在es6中附加的object属性",text:"四、在`ES6`中附加的`Object`属性",depth:2},{id:"objectisvalue1-value2-es6",text:"Object.is(value1, value2) (ES6)",depth:3},{id:"objectassigntarget-sources-es6",text:"Object.assign(target, ...sources) (ES6)",depth:3},{id:"objectgetownpropertysymbolsobj-es6",text:"Object.getOwnPropertySymbols(obj) (ES6)",depth:3},{id:"objectsetprototypeofobj-prototype-es6",text:"Object.setPrototypeOf(obj, prototype) (ES6)",depth:3},{id:"五在es8中附加的object属性",text:"五、在`ES8`中附加的`Object`属性",depth:2},{id:"objectgetownpropertydescriptorsobj-es8",text:"Object.getOwnPropertyDescriptors(obj) (ES8)",depth:3},{id:"objectvaluesobj-es8",text:"Object.values(obj) (ES8)",depth:3},{id:"objectentriesobj-es8",text:"Object.entries(obj) (ES8)",depth:3},{id:"六在es10中附加的object属性",text:"六、在`ES10`中附加的`Object`属性",depth:2},{id:"objectfromentriesiterable-es10",text:"Object.fromEntries(iterable) (ES10)",depth:3},{id:"小结",text:"小结",depth:2},{id:"参考资料",text:"参考资料",depth:2},{id:"关于",text:"关于",depth:2},{id:"微信公众号--若川视野",text:"微信公众号  若川视野",depth:2}],title:"JavaScript 对象所有API解析【2020版】",headingTitle:"JavaScript 对象所有API解析【2020版】",frontmatter:{}}},20713:function(e,r,n){n.d(r,{Z:()=>i});var t=n(52676),s=n(75271),o=n(92815);n(18544);let c={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,r,n){let t=Object.keys(c).includes(r)?r:n;return c[t](e)}let i=e=>{let{defaultLocale:r="en-US"}=e,n=(0,o.Vi)().page.readingTimeData,c=(0,o.Jr)(),i=(0,o.e7)(),[a,j]=(0,s.useState)(d(n,c,r));return(0,s.useEffect)(()=>{j(d(n,c,r))},[c,n]),(0,t.jsx)("span",{"data-dark":String(i),className:"rp-reading-time",children:a})}}}]);