"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["2278"],{60332:function(e,n,r){e.exports=r.p+"static/image/wechat-official-accounts-mini.44481959.png"},58330:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var c=r(52676),s=r(40453),d=r(20713),i=r(60332);function l(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",code:"code",strong:"strong",h2:"h2",pre:"pre",h3:"h3",img:"img"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"javascript语言精粹-修订版-读书笔记",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#javascript语言精粹-修订版-读书笔记",children:"#"}),"《JavaScript语言精粹 修订版》 读书笔记"]}),"\n",(0,c.jsx)(d.Z,{defaultLocale:"zh-CN"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.code,{children:"写于2017年07月23日"})}),"\n"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["大家好，我是",(0,c.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,c.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,c.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,c.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,c.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]}),"\n"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["之前看到这篇文章，",(0,c.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/23265155?refer=dreawer",rel:"noopener noreferrer",target:"_blank",children:"前端网老姚浅谈：怎么学JavaScript？"}),"，说到怎么学习JavaScript，那就是",(0,c.jsx)(n.strong,{children:"看书、分析源码。"}),"\n",(0,c.jsx)(n.strong,{children:"10本书读2遍的好处，应该大于一本书读20遍。"}),"\n",(0,c.jsx)(n.strong,{children:"看书主动学习，看视频是被动学习。"}),"\n",(0,c.jsx)(n.strong,{children:"看书和分析源码的时机"}),"。但已经工作一年半载时，正是提高的好时候，此时可以去看书了。全面系统的梳理知识点，扫清自己的盲区。如果只是靠项目经验是不够的，通过项目来学习，那>肯定是必须的，工作本身就是一个学习的过程。\n**怎么把一本书看完呢？**很简单，敲。文字加代码都敲。\n比较认同老姚的说法。去年毕业到现在，我也算是工作一年了，是时候看书查缺补漏了。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["于是我就先把这本薄的经典书《JavaScript语言精粹 修订版》",(0,c.jsx)(n.a,{href:"https://book.douban.com/subject/11874748/",rel:"noopener noreferrer",target:"_blank",children:"豆瓣读书本书简介"}),"（总共10章，除去附录，才100页），读完并记录了一些笔记。基本算是摘抄书本的，自己联想到了一些知识和资料也扩展了一下。总体写下来近一万字。读书笔记还可以分享给别人看。回顾时，书不在身边还可以看看自己的笔记。想想这类经典书记一遍动手敲一遍也是很值得的。不过这读书笔记中可能会有一些错别字，阅读时如果发现欢迎指正。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第1章-精华",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第1章-精华",children:"#"}),"第1章 精华"]}),"\n",(0,c.jsxs)(n.p,{children:["大多数语言都有精华和糟粕。",(0,c.jsx)(n.code,{children:"JavaScript"}),"令人诡异的事情是，在对这门语言没有的太多了解，甚至对编程都没有太多了解的情况下，你也能用它来完成工作。\n看到这里不禁想起："]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["张鑫旭大牛在",(0,c.jsx)(n.a,{href:"http://www.zhangxinxu.com/wordpress/2017/06/ten-question-about-frontend-zhihu/",rel:"noopener noreferrer",target:"_blank",children:"《我对知乎前端相关问题的十问十答》"}),"\n非计算机专业背景学习JS要点有这一条：\n所有继承和原型相关内容跳过，注意，是跳过，不要看！没有这些JS一样可以活得很好，你的日常工作一样玩得飞起，当然，你没忍住看了相关知识也没关系，因为你会发现自己看不懂的；"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"JavaScript"}),"的函数是（主要）基于",(0,c.jsx)(n.strong,{children:"词法作用域"}),"的顶级对象。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["译注：",(0,c.jsx)(n.code,{children:"JavaScript"}),"中的函数是根据词法来划分作用域的，而不是动态划分作用域的。具体内容参见《",(0,c.jsx)(n.code,{children:"JavaScript"}),"权威指南》中译第5版相关章节“8.8.1 词法作用域”。\nJavaScript有非常强大的对象字面量表示法。这种表示法是JSON的灵感来源。\n原型继承是JavaScript中一个有争议的特性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["《",(0,c.jsx)(n.code,{children:"ECMAScript"}),"编程语言》第3版定义了",(0,c.jsx)(n.code,{children:"JavaScript"}),"的标准。\n",(0,c.jsx)(n.a,{href:"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf",rel:"noopener noreferrer",target:"_blank",children:"ES3标准"}),"\n",(0,c.jsx)(n.strong,{children:"扩展："}),(0,c.jsx)(n.a,{href:"http://yanhaijing.com/es5/ECMAScript%E8%A7%84%E8%8C%83-%E7%AC%AC%E4%B8%89%E7%89%88_%E4%B8%AD%E6%96%87%E7%89%88.pdf",rel:"noopener noreferrer",target:"_blank",children:"颜海镜大牛整理的ES3中文版"}),"\n",(0,c.jsx)(n.a,{href:"http://yanhaijing.com/es5/#about",rel:"noopener noreferrer",target:"_blank",children:"颜海镜大牛整理的ES5中文版"}),"\n",(0,c.jsx)(n.a,{href:"https://www.w3.org/html/ig/zh/wiki/ES5#.E7.A8.8B.E5.BA.8F",rel:"noopener noreferrer",target:"_blank",children:"W3c ES5中文版"}),"\n",(0,c.jsx)(n.a,{href:"http://es6.ruanyifeng.com/",rel:"noopener noreferrer",target:"_blank",children:"阮一峰大牛的书籍《ES6标准入门2》"}),"\n更多内容可参见这篇文章：",(0,c.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/27537439",rel:"noopener noreferrer",target:"_blank",children:"ECMAScript 2018 标准导读"})]}),"\n",(0,c.jsx)(n.p,{children:"一个简单的例子："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Function.prototype.method = function(name, func) {\n  this.prototype[name] = func;\n  return this;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["书中贯彻始终都会用到这个",(0,c.jsx)(n.code,{children:"method"}),"方案，作者将会在第4章解释它。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第2章-语法",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第2章-语法",children:"#"}),"第2章 语法"]}),"\n",(0,c.jsxs)(n.p,{children:["本章主要用铁路图（语法图）表示语法。\n主要有：空白、标识符、数字、字符串、语句、表达式、字面量、函数。\n",(0,c.jsx)(n.code,{children:"typeof"})," 运算符产生的值有",(0,c.jsx)(n.code,{children:"'number'"}),", ",(0,c.jsx)(n.code,{children:"'string'"}),",",(0,c.jsx)(n.code,{children:"'boolean'"}),",",(0,c.jsx)(n.code,{children:"'undefined'"}),",",(0,c.jsx)(n.code,{children:"'function'"}),",",(0,c.jsx)(n.code,{children:"'object'"}),"。如果运算数是一个数组或者是",(0,c.jsx)(n.code,{children:"null"}),",那么结果是",(0,c.jsx)(n.code,{children:"'object'"}),",这其实是不对的。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第3章-对象",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第3章-对象",children:"#"}),"第3章 对象"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"JavaScript"}),"简单数据类型包括数字、字符串、布尔值，",(0,c.jsx)(n.code,{children:"null"}),"值和",(0,c.jsx)(n.code,{children:"undefined"}),"值。其他所有值都是对象。\n数组、字符串和布尔值“貌似”对象，因为它们拥有方法（包装对象），但它们是不可变的。\n对象是属性的容器，其中每个属性都拥有名字和值。属性名可以是包括空字符串在内的所有字符串，属性值可以是除了",(0,c.jsx)(n.code,{children:"undefined"}),"值之外的任何值。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"JavaScript"}),"包含一种原型链的特性，允许对象继承到另一个对象的属性。正确地使用它能减少对象初始化时的消耗的时间和内存。\n",(0,c.jsx)(n.strong,{children:"检索"}),"\n",(0,c.jsx)(n.code,{children:"."}),",",(0,c.jsx)(n.code,{children:"[]"}),"两种检索方式，推荐点",(0,c.jsx)(n.code,{children:"."}),"表示法。\n尝试重",(0,c.jsx)(n.code,{children:"undefined"}),"的成员属性中取值将会导致",(0,c.jsx)(n.code,{children:"TypeError"}),"异常，这时可以通过",(0,c.jsx)(n.code,{children:"&&"}),"来避免错误。\n",(0,c.jsx)(n.strong,{children:"更新"}),"\n如果属性名已经存在对象里。那么属性的值会被替换。如果之前没有拥有那个属性名，那么该属性将被扩充到对象中。\n",(0,c.jsx)(n.strong,{children:"引用"}),"\n对象通过引用来传递。它们永远不会被复制。\n",(0,c.jsx)(n.strong,{children:"原型"}),"\n所有通过对象字面量创建的对象都链接到",(0,c.jsx)(n.code,{children:"Object.prototype"}),"。\n创建新对象时，可以选择某个对象作为它的原型。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"if (typeof Object.create !== 'function') {\n  Object.create = function(o) {\n    var F = function () {};\n    F.prototype = o;\n    return new F();\n  };\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["原型连接只有在检索值的时候才被用到。如果尝试去获取对象的某个属性值，但对象没有此属性名，那么",(0,c.jsx)(n.code,{children:"JavaScript"}),"会试着从原型对象中获取属性值。如果那个原型对象也没有该属性，那么再从它的原型中寻找，依此类推，直到该过程最后达到终点",(0,c.jsx)(n.code,{children:"Object.prototype"}),"。如果想要的属性完全不存在原型链中，那么结果就是 ",(0,c.jsx)(n.code,{children:"undefined"}),"值。这个过程称为",(0,c.jsx)(n.strong,{children:"委托"}),"。\n原型关系是一种动态的关系。\n",(0,c.jsx)(n.strong,{children:"反射"}),"\n原型链上的所有属性都会产生值。有两种方案可以处理掉对象上不需要的属性。\n①程序检查时丢弃值为函数的属性。但有可能有些值确实是函数，所以该方法不可靠。\n②使用",(0,c.jsx)(n.code,{children:"hasOwnProperty"}),"方法，如果是对象拥有独有的属性，则返回",(0,c.jsx)(n.code,{children:"true"}),"。该方法不会检查原型链。\n",(0,c.jsx)(n.strong,{children:"枚举"}),"\n① ",(0,c.jsx)(n.code,{children:"for in"}),"可以遍历一个对象中所有的属性名。但包含函数和一些不关心的原型中属性。而且顺序不确定，可以用 ",(0,c.jsx)(n.code,{children:"hasOwnProperty"}),"方法和",(0,c.jsx)(n.code,{children:"typeof"}),"排除函数。\n②",(0,c.jsx)(n.code,{children:"for"})," 循环不会出现",(0,c.jsx)(n.code,{children:"for in"}),"那些情况。\n",(0,c.jsx)(n.strong,{children:"删除"}),"\ndelete运算符可以用来删除对象的属性。\n",(0,c.jsx)(n.strong,{children:"减少全局变量的污染"}),"\n可以把全局性的资源纳入一个名称空间之下。这样做能减少冲突。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第4章-函数",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第4章-函数",children:"#"}),"第4章 函数"]}),"\n",(0,c.jsxs)(n.p,{children:["函数用于①代码复用②信息隐藏③组合调用。一般来说，所谓编程，就是将一组需求分节成一组函数与数据结构的技能。\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"的函数就是对象。\n函数对象连接到",(0,c.jsx)(n.code,{children:"Function.prototype"}),"(该原型对象本身连接到",(0,c.jsx)(n.code,{children:"Object.prototype"}),")。\n每个函数在创建时会附加两个隐藏属性，函数的上下文和实现函数行为的代码。\n每个函数对象在创建时也随配有一个",(0,c.jsx)(n.code,{children:"prototype"}),"属性。它的值是一个拥有",(0,c.jsx)(n.code,{children:"constructor"}),"属性且值为该函数的对象。\n",(0,c.jsx)(n.strong,{children:"函数字面量"}),"\n函数字面量包括4个部分。①保留字",(0,c.jsx)(n.code,{children:"function"}),"②函数名，可以省略，③一组参数④一组语句。\n函数字面量可以出现在任何允许表达式出现的地方。一个内部函数除了可以访问自己的参数和变量，同时也可以自由访问把它嵌套在其中的父函数的参数和变量。通过函数字面量创建的函数对象包含一个连接到外部上下文的连接。这被称为",(0,c.jsx)(n.strong,{children:"闭包"}),"。\n",(0,c.jsx)(n.strong,{children:"调用"}),"\n除了声明时定义的形式参数，每一个函数还接收两个附加的参数：",(0,c.jsx)(n.code,{children:"this"}),"和",(0,c.jsx)(n.code,{children:"argument"}),"。在",(0,c.jsx)(n.code,{children:"JavaScript"}),"中一共有四种调用模式。①方法调用模式，②函数调用模式③构造器调用模式④",(0,c.jsx)(n.code,{children:"apply"}),"调用模式。"]}),"\n",(0,c.jsxs)(n.p,{children:["（",(0,c.jsx)(n.code,{children:"this"}),"指向问题一直困扰很多人。我一般是这样记的，谁调用",(0,c.jsx)(n.code,{children:"this"}),"就指向谁。）"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"方法调用模式"}),"\n对象的方法执行,",(0,c.jsx)(n.code,{children:"this"}),"指向该对象。比如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var myObj = {\n  value: 0,\n  showValue: function() {\n    console.log('value:', this.value);\n  }\n}\nmyObj.showValue();  // value: 0\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"函数调用模式"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var add = function(a,b) {\n    return a + b;\n}\nadd(3,4);  //7\nwindow.add(3,4);  //7\n// 这种this被绑定到全局对象（window）。\n// 可以理解是window.add(3,4);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["有种简单的办法就是",(0,c.jsx)(n.code,{children:"var that = this;"}),"把",(0,c.jsx)(n.code,{children:"this"}),"存储下。\n例："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var myObj = {\n  value: 0,\n  age: 20,\n  showValue: function() {\n    console.log('value:',this.value);\n    var  that = this;\n    var showAge = function() {\n        // window上没有age，所以是undefined\n        console.log('这里的this是window ---age:', this.age);  // undefined\n        console.log('age:', that.age);  // 20\n     }\n     showAge();\n  }\n}\nmyObj.showValue();  // 0， undefined，\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"构造器调用模式"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"是一门基于原型继承的语言。\n如果在一个函数前面带上",(0,c.jsx)(n.code,{children:"new"})," 来调用。那么背地利将会创建一个连接到该函数的",(0,c.jsx)(n.code,{children:"prototype"}),"成员的新对象，同时this会被绑定到那个新对象上。\n",(0,c.jsx)(n.code,{children:"new"})," 前缀也会改变",(0,c.jsx)(n.code,{children:"return"})," 语句的行为。\n例："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var Quo = function (string) {\n  this.status = string;\n}\nQuo.prototype.get_status = function () {\n  return this.status;\n}\nvar myQuo = new Quo('confused'); // 'confused'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["一个函数，如果创建的目的就是希望结合",(0,c.jsx)(n.code,{children:"new"})," 前缀来调用。那么它就被称为构造器函数。按照约定，它们保存在以大写函数命名的变量里。如果调用构造器函数时没有在前面加上",(0,c.jsx)(n.code,{children:"new"}),",可能会发生非常糟糕的事情，既没有编译时的警告，也没有运行时广告，所以大写约定非常重要。\n作者不推荐这种形式的构造器函数。有更好的替代方式。\n",(0,c.jsx)(n.strong,{children:"Apply调用模式"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"是一门函数式的面向对象编程语言，所以对象可以拥有方法。\n",(0,c.jsx)(n.code,{children:"apply"}),"方法让我们构建一个参数数组传递给调用函数，它也允许我们选择",(0,c.jsx)(n.code,{children:"this"}),"的值。\n",(0,c.jsx)(n.strong,{children:"参数"}),"\n",(0,c.jsx)(n.code,{children:"arguments"}),"，虽然拥有",(0,c.jsx)(n.code,{children:"length"}),"属性，但不是真正的数组。而是类似数组（",(0,c.jsx)(n.code,{children:"array-like"}),"）的对象。\n",(0,c.jsx)(n.strong,{children:"返回"}),"\n",(0,c.jsx)(n.code,{children:"return"})," 可用来是函数提前返回。当",(0,c.jsx)(n.code,{children:"return"})," 被执行时，函数立即返回而不再执行余下的语句。\n一个函数总会返回一个值，如果没指定，那就是返回",(0,c.jsx)(n.code,{children:"undefined"}),"值。\n如果函数调用时在前面加上了",(0,c.jsx)(n.code,{children:"new"})," 前缀，且返回值不是一个对象，则返回",(0,c.jsx)(n.code,{children:"this"}),"（该新对象）。\n",(0,c.jsx)(n.strong,{children:"异常"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"提供了一套异常处理机制。\n",(0,c.jsx)(n.code,{children:"throw"}),"语句和",(0,c.jsx)(n.code,{children:"try catch"}),",",(0,c.jsx)(n.code,{children:"try catch"}),"中",(0,c.jsx)(n.code,{children:"finally"}),"是可选的。\n",(0,c.jsx)(n.strong,{children:"扩展类型的功能"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"允许给语言的基本类型扩充功能。在第3章中我们已经看到，可以通过",(0,c.jsx)(n.code,{children:"Object.prototype"}),"添加方法，可以让该方法对所有对象都可用。这样的方式对函数、数组、字符串、数字、正则表达式和布尔值同样适用。"]}),"\n",(0,c.jsx)(n.p,{children:"例如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Function.prototype.method = function () {\n  this.prototype[name]  = func;\n  return this;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"基本类型的原型是公用结构，所以在类库混用时务必小心。一个保险的做法就是只在确认没有该方法时才添加它。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Function.prototype.methods = function(name, func) {\n  if (!this.prototype[name]) {\n      this.prototype[name] = func;\n  }\n  return this;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"递归"}),"\n递归函数就是会直接或间接地调用自身的一种函数。递归是一种强大的编程技术，递归是用一般的方式去解决每一个子问题。书中举了一个",(0,c.jsx)(n.strong,{children:"汉诺塔"}),"的例子，是程序设计中经典递归问题。详细说明可以参见 ",(0,c.jsx)(n.a,{href:"http://baike.baidu.com/view/191666.htm",rel:"noopener noreferrer",target:"_blank",children:"百度百科“汉诺塔”词条"}),"。\n一些语言提供了尾递归优化。尾递归是一种在函数的最后执行调用语句的特殊形式的递归。参见",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Tail_call",rel:"noopener noreferrer",target:"_blank",children:"Tail call"}),"。 ES6版本扩展了尾递归。参见阮一峰老师的《ES6标准入门》中的",(0,c.jsx)(n.a,{href:"http://es6.ruanyifeng.com/#docs/function",rel:"noopener noreferrer",target:"_blank",children:"尾调用优化"}),"\n",(0,c.jsx)(n.strong,{children:"作用域"}),"\n在编程语言中，作用域控制着变量与参数的可见性和声明周期。\n书中指出当前",(0,c.jsx)(n.code,{children:"JavaScript"}),"没有块级作用域。因为没有块级作用域，所以最好的做法是在函数体的顶部声明函数中可能用到的所有变量。不过",(0,c.jsx)(n.code,{children:"ES6"}),"扩展了有块级作用域。\n",(0,c.jsx)(n.strong,{children:"闭包"}),"\n作用域的好处是内部函数可以访问定义它们的外部函数的参数和变量（除了",(0,c.jsx)(n.code,{children:"this"}),"和",(0,c.jsx)(n.code,{children:"arguments"}),"）。\n例子："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul class="list">\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 点击相应节点时，显示对应的序号。可以使用闭包来解决。\nvar add_the_handlers = function() {\n    var helper = function(i) {\n        return function(e) {\n            alert(i);\n        }\n    }\n    var i;\n    for (i = 0; i < nodes.length; i += 1) {\n        nodes[i].onclick = helper(i);\n    }\n}\n// 扩展 另外可以用let i = 0，或者把nodes类数组转成数组等方案实现。\n// 闭包特性：1、函数内再嵌套函数，2、内部函数可以调用外层的参数和变量，3、参数和变量不会被垃圾回收机制回收。\n// 闭包优点 灵活和方便，便于封装。缺点：空间浪费、内存泄露、性能消耗。\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"回调"}),"\n发起异步请求，提供一个当服务器响应到达时随即出发的回调函数。异步函数立即返回，这样客户端就不会被阻塞。\n",(0,c.jsx)(n.strong,{children:"模块"}),"\n我们可以使用函数和闭包来构造模块。模块是一个提供接口却隐藏状态与实现的函数或对象。\n举例：给",(0,c.jsx)(n.code,{children:"String"}),"添加一个",(0,c.jsx)(n.code,{children:"deentityify"}),"方法。它的任务是寻找字符串中的",(0,c.jsx)(n.code,{children:"HTML"}),"字符实体并把它们替换成对应的字符。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"String.method('deentityify', function () {\n    // 字符实体表。它映射字符实体的名字到对应的字符。\n    var entity = {\n        quot: '\"',\n        lt: '<',\n        gt: '>'\n    };\n    // 返回 deentityify方法\n    return function () {\n        return this.replace(/&([^&;]+);)/g,\n        function (a,b) {\n            var r = entity[b];\n            return typeof r === 'string'? r : a;\n        }\n    };\n}());\n"})}),"\n",(0,c.jsxs)(n.p,{children:["模块模式利用了函数作用域和闭包来创建被绑定对象与私有成员的关联，在上面例子中，只有",(0,c.jsx)(n.code,{children:"deentityify"}),"方法有权访问字符实体表这个数据对象。\n模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把它们保存到一个可以访问的地方。\n使用模块模式就可以摒弃全局变量的使用。它促进了信息隐藏和其他优秀的设计实践。对于应用程序的封装，或者构造其他单例对象，模块模式非常有效。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["单例译注\n模块模式通常结合单例模式使用。",(0,c.jsx)(n.code,{children:"JavaScript"}),"的单例就是用对象字面量表示法创建的对象，对象的属性值可以是数值或函数，并且属性值在该对象的生命周期中不会发生变化。更多内容参见：",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F",rel:"noopener noreferrer",target:"_blank",children:"单例模式"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"级联"}),"\n有一些方法没有返回值。如果我们让这些方法返回",(0,c.jsx)(n.code,{children:"this"}),"而不是",(0,c.jsx)(n.code,{children:"undefined"}),"，就可以启用级联。\n在一个级联中，我们可以在单独一条语句中依次调用同一个对象的很多方法。比如",(0,c.jsx)(n.code,{children:"jQuery"}),"获取元素、操作样式、添加事件、添加动画等。\n",(0,c.jsx)(n.strong,{children:"柯里化"}),"\n柯里化，是把多参数函数转换为一系列单参数函数并进行调用的技术。更多详情可参见：",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96",rel:"noopener noreferrer",target:"_blank",children:"柯里化"}),"\n函数也是值。柯里化允许我们把函数与传递给它的参数相结合，产生一个新的函数。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var add1 = add.curry(1);\ndocument.writeln(add1(6));\n"})}),"\n",(0,c.jsx)(n.p,{children:"JavaScript并没有curry方法，但可以扩展该功能。\narguments不是真正的数组，所以使用了Array.prototype.slice方法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Function.method('curry',function(){\n    var slice = Array.prototype.slice,\n    args = slice.apply(arguments),\n    that = this;\n    return function() {\n        return that.apply(null, args.concat(slice.apply(arguments)));\n    }\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"记忆"}),"\n函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化称作记忆。\n比如说，我们想要一个递归函数来计算",(0,c.jsx)(n.code,{children:"Fibonacci"}),"(斐波那契)数列，它的特点是，前面相邻两项之和等于后一项的值。更多参考：",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91",rel:"noopener noreferrer",target:"_blank",children:"斐波那契"}),"。最前面两个数字是0和1。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var fibonacci = function() {\n    return n < 2? n : fibonacci(n-1) + fibonacci(n-2);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"这样虽然能完成工作，但它做了很多无谓的工作。\n构造一个带有记忆功能的函数："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var memoizer = function(mome, formula) {\n    var recur = function(n) {\n        var result = meno[n];\n        if (typeof result !== 'number') {\n            result = formula(recur, n);\n            meno[n] = result;\n        }\n        return result;\n    };\n    return recur;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["再用这个",(0,c.jsx)(n.code,{children:"memoizer"}),"函数来定义",(0,c.jsx)(n.code,{children:"fibonacci"}),"函数，提供其初始的",(0,c.jsx)(n.code,{children:"memo"}),"数组和",(0,c.jsx)(n.code,{children:"formula"}),"函数。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var fibonacci = memoizer([0,1],function(recur, n){\n    return recur(n-1) + recur (n-2);\n})\n"})}),"\n",(0,c.jsx)(n.p,{children:"极大的减少了我们的工作量。例如要产生一个记忆的阶乘函数，只需要提供基本的阶乘公式即可："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var factorial = meoizer([1,1], function(recur, n){\n    return n * recur(n-1);\n});\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"第5章-继承",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第5章-继承",children:"#"}),"第5章 继承"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"伪类"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"的原型存在诸多矛盾。它不直接让对象从其他对象继承，反而插入了一个多余的间接层：通过构造器函数产生对象。\n",(0,c.jsx)(n.code,{children:"Function"}),"构造器产生的函数对象会运行类似这样的一些代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"this.prototype =  {constructor:this}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["新函数对象被赋予一个",(0,c.jsx)(n.code,{children:"prototype"}),"属性，这个",(0,c.jsx)(n.code,{children:"prototype"}),"对象是存放继承特征的地方。"]}),"\n",(0,c.jsxs)(n.p,{children:["当采用构造器调用模式，即用",(0,c.jsx)(n.code,{children:"new"}),"前缀去调用一个函数时，函数执行的方式会被修改。如果",(0,c.jsx)(n.code,{children:"new "}),"运算符是一个方法而不是一个运算符，它可能像这样执行："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Function.method('new',function(){\n    // 创建一个新对象，它继承自构造器函数的原型对象。\n    var that = Object.create(this.prototype);\n    // 调用构造器函数，绑定 -this- 到新对象上。\n    var other = this.apply(that,arguments);\n    // 如果它的返回值不是一个对象，就返回该新对象。\n    return (typeof other === 'object' && other) || that;\n});\n\n"})}),"\n",(0,c.jsxs)(n.p,{children:["所有构造器函数都约定命名成大写字母。一种更好的备选方案就是根本不使用",(0,c.jsx)(n.code,{children:"new"}),"。\n",(0,c.jsx)(n.strong,{children:"对象说明符"}),"\n就是指传多个参数时，可以直接传递一个对象。\n",(0,c.jsx)(n.strong,{children:"原型"}),"\n可以用",(0,c.jsx)(n.code,{children:"Object.create"}),"方法构造出更多实例来。\n",(0,c.jsx)(n.strong,{children:"函数化"}),"\n迄今为止，我们所看到的继承模式的一个弱点就是没法保护隐私。对象的所有属性都是可见的。我们无法得到私有变量和私有函数。\n幸运的是，我们有一个更好的选择，那就是",(0,c.jsx)(n.strong,{children:"应用模块模式"}),"。\n我们从构造一个生成对象的函数开始。我们以小写字母开头来命名。\n该函数包括以下四个步骤\n1、创建一个新对象。\n2、有选择地私有实例变量和方法。\n3、给这个新对象扩充方法。\n4、返回那个新对象。\n以下是一个函数化构造器的伪代码模板"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var constructor = function (spec, my) {\n    var that, 其他的私有实例变量；\n    my = my || {};\n    把共享的变量和函数添加到my中\n    that = 一个新对象\n    添加给 that 的特权方法\n    return that;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["函数化模式有很大的灵活性。它相比伪类模式不仅带来的工作更少，还让我们更好的封装和信息隐藏，以及访问父类方法的能力。\n",(0,c.jsx)(n.strong,{children:"部件"}),"\n我们可以从一套部件中把对象组装出来。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第6章-数组",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第6章-数组",children:"#"}),"第6章 数组"]}),"\n",(0,c.jsxs)(n.p,{children:["数组是一段线性分配的内存，它通过整数计算偏移并访问其中的元素。\n数组是一种性能出色的数据结构。不幸的是，",(0,c.jsx)(n.code,{children:"JavaScript"}),"没有像此类数组一样的数据结构。\n",(0,c.jsx)(n.strong,{children:"数组字面量"}),"\n对象字面量\n数组继承了",(0,c.jsx)(n.code,{children:"Array.prototype"}),"大量有用的方法。而对象字面量是继承自",(0,c.jsx)(n.code,{children:"Object.prototype"}),"。\n数组有",(0,c.jsx)(n.code,{children:"length"}),"属性，而对象没有。\n",(0,c.jsx)(n.strong,{children:"长度"}),"\n每个数组都有一个",(0,c.jsx)(n.code,{children:"length"}),"属性。\n可以直接设置",(0,c.jsx)(n.code,{children:"length"}),"的值。设置更大的length不会给数组分配更多的空间，而设小导致所有下标大于等于新length的属性被删除。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var arr = [1,2,3];\narr.length = 1;\nconsole.log(arr) // [1]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["也可以通过",(0,c.jsx)(n.code,{children:"length"}),"来通过添加值"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var arr = [1,2,3];\narr[arr.length] = 4;\nconsole.log(arr) // [1,2,3,4]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["有时用",(0,c.jsx)(n.code,{children:"push"}),"方法更方便。\n",(0,c.jsx)(n.strong,{children:"删除"}),"\n由于",(0,c.jsx)(n.code,{children:"JavaScript"}),"的数组也是对象，所以",(0,c.jsx)(n.code,{children:"delete"}),"运算符可以用来从数组中移出元素。移除后，长度不变，原位置上变成了",(0,c.jsx)(n.code,{children:"undefined"}),"。\n可以使用",(0,c.jsx)(n.code,{children:"Array.prototype.splice"}),"方法删除数组。\n",(0,c.jsx)(n.strong,{children:"枚举"}),"\nJS数组就是对象，所以",(0,c.jsx)(n.code,{children:"for in"}),"语句可以用来遍历数据的所有属性。\n",(0,c.jsx)(n.strong,{children:"不过"}),"，",(0,c.jsx)(n.code,{children:"for in"}),"无法保证属性顺序。并且可能从原型链中得到意外的属性。\n",(0,c.jsx)(n.code,{children:"for"}),"循环可以避免以上问题。\n",(0,c.jsx)(n.strong,{children:"容易混淆的地方"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'typeof [] === "object"; // true\ntypeof {} === "object"; // true\n'})}),"\n",(0,c.jsx)(n.p,{children:"识别是否是数组。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 方法一、\nvar is_array = function (value) {\n  return value && typeof value === 'object' && value.constructor === Array;\n};\n"})}),"\n",(0,c.jsx)(n.p,{children:"但它在识别从不同窗口（window）或帧（frame）里的构造的数组时会失败。\n有一个更好的方式："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 方法二、\nvar is_array = function (value) {\n  return Object.prototype.toString.apply(value) === '[object Array]';\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"扩展"}),"：\nES5 提供了Array.isArray()的方法。不过兼容性是IE9+。\n要做到兼容，可以用如下方法。MDN上提供的。",(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",rel:"noopener noreferrer",target:"_blank",children:"MDN Array.isArray"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 方法三、\nif (!Array.isArray){\n  Array.isArray = function(arg){\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var arr = [];\n// 方法四\narr instanceof Array;\n// 方法五\nArray.prototype.isPrototypeOf(arr);\n// 方法六\nObject.getPrototypeOf(arr) === Array.prototype;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["方法四、",(0,c.jsxs)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",rel:"noopener noreferrer",target:"_blank",children:[(0,c.jsx)(n.strong,{children:"instanceof"})," 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。"]}),"\n方法五、",(0,c.jsxs)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",rel:"noopener noreferrer",target:"_blank",children:[(0,c.jsx)(n.strong,{children:"isPrototypeOf()"})," 方法用于测试一个对象是否存在于另一个对象的原型链上。"]}),"\n方法六、",(0,c.jsxs)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf",rel:"noopener noreferrer",target:"_blank",children:[(0,c.jsx)(n.strong,{children:"Object.getPrototypeOf()"})," 方法返回指定对象的原型（即, 内部[[Prototype]]属性的值）。"]}),"\n小结：除了方法二、三外，面对复杂的环境，其他的都不能准确的判断是否是数组。\n",(0,c.jsx)(n.strong,{children:"方法"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"提供了一套数组可用的方法，这些方法是被存储在Array.prototype中的函数。\n",(0,c.jsx)(n.code,{children:"Object.prototype"}),"是可以扩充的。\n",(0,c.jsx)(n.code,{children:"Array.prototype"}),"也是可以扩充的。\n",(0,c.jsx)(n.code,{children:"ES5"}),"中提供的",(0,c.jsx)(n.code,{children:"Object.create"}),"方法。这方法用在数组是没有意义的，因为它产生的是一个对象，而不是一个数组，产生的对象将继承这个数组的值和方法，但它没有",(0,c.jsx)(n.code,{children:"length"}),"特殊属性。\n",(0,c.jsx)(n.strong,{children:"指定初始值"}),"\n",(0,c.jsx)(n.code,{children:"JavaScript"}),"的数组通常不会预设值。书中写了一个循环来扩展，生成初始值。\n",(0,c.jsx)(n.strong,{children:"扩展："}),(0,c.jsx)(n.code,{children:"ES6"}),"中提供了",(0,c.jsx)(n.code,{children:"fill"}),"来填充。比如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"['a','b','c'].fill(0);   // [0,0,0]\nnew Array(3).fill(0);   // [0,0,0]\n\n// fill方法还可以接受第二、第三个参数，用于指定填充的起始位置和结束位置（不包含）。\nnew Array(3).fill(0,1,2); // [ ,0, ,]  空位不是undefined。空位没有任何值。ES6则是明确将空位转为undefined。\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"第7章-正则表达式",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第7章-正则表达式",children:"#"}),"第7章 正则表达式"]}),"\n",(0,c.jsxs)(n.p,{children:["正则表达式对字符串中的信息实现查找、替换和提取操作。\n可处理正则表达式的方法有",(0,c.jsx)(n.code,{children:"regexp.exec"}),"、",(0,c.jsx)(n.code,{children:"regexp.test"}),"、",(0,c.jsx)(n.code,{children:"string.match"}),"、",(0,c.jsx)(n.code,{children:"string.search"}),"和",(0,c.jsx)(n.code,{children:"string.split"}),"。通常来说，正则相较于等效的字符串处理有着显著的性能优势。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"一个例子"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// 正则表达式必须写在一行中\nvar parse_url = /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\nvar url = "http://www.ora.com:80/goodparts?q#fragment";\nvar result = parse_url.exec(url);\n// ……\n'})}),"\n",(0,c.jsx)(n.p,{children:"依次匹配到的是："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"url: 'http://www.ora.com:80/goodparts?q#fragment',\nscheme: 'http',\nslash: '//'\nhost: 'www.ora.com'\nport:'80'\npath:'goodparts'\nquery: 'q'\nhash: 'fragment'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["个人扩展：这里推荐 ",(0,c.jsx)(n.a,{href:"https://regex101.com/",rel:"noopener noreferrer",target:"_blank",children:"在线测试正则表达式的网站regex101"}),"，默认是PHP语言，选择JavaScript语言。\n",(0,c.jsx)(n.a,{href:"https://regexper.com/#%5Cd%2B",rel:"noopener noreferrer",target:"_blank",children:"在线图形化RegExp工具"}),"\n",(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",rel:"noopener noreferrer",target:"_blank",children:"MDN RegExp.prototype.exec()"}),"\n大概解释下这个正则，\n这里的",(0,c.jsx)(n.code,{children:"^"})," 起始位置，",(0,c.jsx)(n.code,{children:"$"}),"结束位置\n",(0,c.jsx)(n.code,{children:"()"})," 分组捕获 ",(0,c.jsx)(n.code,{children:"?:"}),"不捕获\n",(0,c.jsx)(n.code,{children:"."}),"表示除换行以外的任意单个字符，对于码点大于",(0,c.jsx)(n.code,{children:"0xFFFF"}),"的",(0,c.jsx)(n.code,{children:"Unicode"}),"字符，点(",(0,c.jsx)(n.code,{children:"."}),")不能识别（",(0,c.jsx)(n.code,{children:"ES6"}),"中加",(0,c.jsx)(n.code,{children:"u"}),"修饰符才可识别），",(0,c.jsx)(n.code,{children:"+"}),"表示一个或多个，",(0,c.jsx)(n.code,{children:"*"}),"表示零个或多个，",(0,c.jsx)(n.code,{children:"?"}),"表示",(0,c.jsx)(n.code,{children:"0"}),"个或一个。[]表示或者，里面符合一个即可。\n",(0,c.jsx)(n.code,{children:"\\d"}),"表示数字",(0,c.jsx)(n.code,{children:"0-9"}),"。\n不严谨的正则表达式是一个常见的安全漏洞的发源地。在执行某些匹配时，嵌套的正则表达式也能导致极其恶劣的性能问题。因此简单是最好的策略。"]}),"\n",(0,c.jsxs)(n.p,{children:["再看一个 ",(0,c.jsx)(n.strong,{children:"匹配数字"}),"的例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var parse_number = /^-?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d+)?$/i;\nparse_number.test('1'); // true\nparse_number.test('number'); // false\nparse_number.test('98.6'); // true\nparse_number.test('132.21.86.100'); // false\nparse_number.test('123.45E-67'); // true\nparse_number.test('123.45D-67'); // false\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"结构"}),"\n有两个方法来创建一个",(0,c.jsx)(n.code,{children:"RegExp"}),"对象。优先考虑的是正则表达式字面量，还有一种方式是",(0,c.jsx)(n.code,{children:"new RegExp('','g')"}),"。\n正则表达式标识：",(0,c.jsx)(n.code,{children:"g"}),"全局(匹配多次，不同的方法对",(0,c.jsx)(n.code,{children:"g"}),"标识的处理防范各不相同)，",(0,c.jsx)(n.code,{children:"i"}),"忽略大小写。",(0,c.jsx)(n.code,{children:"m"}),"多行\n",(0,c.jsx)(n.strong,{children:"元素"}),"\n",(0,c.jsx)(n.strong,{children:"正则表达式分支"}),"\n",(0,c.jsx)(n.code,{children:"|"}),"表示或，也表示分支 比如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'\'info\'.match(/in|int/)  // 匹配成功，["in", index: 0, input: "info"]\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"正则表达式序列"}),"\n一个正则表达式序列饱和一个或多个正则表达式因子。每一个因子能选择是否跟随一个量词，这个量词决定着这个因子被允许出现的次数，若没指定，这个因子则只匹配一次。\n",(0,c.jsx)(n.strong,{children:"正则表达式因子"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"\\ / [ ] () { } ? + * | . ^ $\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"正则表达式转义"}),"\n",(0,c.jsx)(n.code,{children:"\\"})," 表转义 ",(0,c.jsx)(n.code,{children:"\\f"})," 分页 ",(0,c.jsx)(n.code,{children:"\\n"})," 换行 ",(0,c.jsx)(n.code,{children:"\\r"}),"回车 ",(0,c.jsx)(n.code,{children:"\\t"})," 制表\n",(0,c.jsx)(n.code,{children:"\\u"})," 允许制定一个 Unicode 字符来表示一个十六进制的常量。\n",(0,c.jsx)(n.code,{children:"\\d"})," 等同于[0-9] \\D 取反等同于 ",(0,c.jsx)(n.code,{children:"[^0-9]"}),"\n",(0,c.jsx)(n.code,{children:"\\s"})," ",(0,c.jsx)(n.code,{children:"Unicode"})," 空白符一个不完全子集。 \\S 与\\s相反\n",(0,c.jsx)(n.code,{children:"\\w"})," ",(0,c.jsx)(n.code,{children:"[0-9A-Z_a-z]"})," \\W 与其相反 ",(0,c.jsx)(n.code,{children:"[^0-9A-Z_a-z]"}),"\n",(0,c.jsx)(n.code,{children:"\\b"})," 表示 字边界\n",(0,c.jsx)(n.code,{children:"\\1"})," 表示 分组1所捕获的文本的一个引用，所以它能被再次匹配。\n",(0,c.jsx)(n.code,{children:"\\2"})," 表示 指向分组2的引用，",(0,c.jsx)(n.code,{children:"\\3"})," 是表示分组3的引用，以此类推。\n",(0,c.jsx)(n.strong,{children:"正则表达式分组"}),"\n捕获型 ()\n非捕获型",(0,c.jsx)(n.code,{children:"?:"}),"\n向前正向匹配",(0,c.jsx)(n.code,{children:"?="}),"\n有一个",(0,c.jsx)(n.code,{children:"(?="}),"前缀。它类似于非捕获类型分组，但在这个组匹配后，文本会倒回到它它开始的地方，实际上并不匹配任何东西。也可以理解为匹配位置。\n向后负向匹配\n有一个",(0,c.jsx)(n.code,{children:"(?!"}),"前缀。它类似于向前正向匹配分组，但只有当它匹配失败时它才继续向前进行匹配。这不是一个好的特性。\n",(0,c.jsx)(n.strong,{children:"正则表达式字符集"}),"\n正则表达式字符集是一种指定一组字符的便利方式。例如，要匹配一个元音字母，",(0,c.jsx)(n.code,{children:"(?:a|e|i|o|u)"}),",可以方便的写成",(0,c.jsx)(n.code,{children:"[aeiou]"}),"。\n类提供另外两个便利：①指定字符范围\n所以，一组由",(0,c.jsx)(n.code,{children:"32"}),"个",(0,c.jsx)(n.code,{children:"ASCII"}),"的特殊组合，可以写成",(0,c.jsx)(n.code,{children:"[!-\\/:-@\\[-"}),"{-~]`\n②类的取反\n取反"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"[^!-\\/:-@\\[-`{-~]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"正则表达式字符转义"}),"\n字符类内部的转义规则和正则表达式因子的相比稍有不同。下面是在字符类中需要被转义的特殊字符。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"- / [ \\ ]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"正则表达式量词"}),"\n量词后缀决定正则表达式因子应该被匹配的次数。\n",(0,c.jsx)(n.code,{children:"{3}"}),"三次\n",(0,c.jsx)(n.code,{children:"{3,6}"})," 3、4、5、6次\n",(0,c.jsx)(n.code,{children:"{3,}"}),"3次或更多次\n",(0,c.jsx)(n.code,{children:"?"}),"等同于",(0,c.jsx)(n.code,{children:"{0,1}"}),"，",(0,c.jsx)(n.code,{children:"*"}),"等同于",(0,c.jsx)(n.code,{children:"{0,}"}),"，",(0,c.jsx)(n.code,{children:"+"}),"等同于",(0,c.jsx)(n.code,{children:"{1,}"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"第8章-方法",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第8章-方法",children:"#"}),"第8章 方法"]}),"\n",(0,c.jsxs)(n.h3,{id:"array",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#array",children:"#"}),"Array"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.concat(item...)"}),"\n",(0,c.jsx)(n.code,{children:"concat"})," 方法产生一个新数组，它包含一份",(0,c.jsx)(n.code,{children:"array"}),"的浅复制并把一个或多个参数",(0,c.jsx)(n.code,{children:"item"}),"附加在其后。如果",(0,c.jsx)(n.code,{children:"item"}),"是数组，那么每个元素分别被添加。后面有和它功能类似的",(0,c.jsx)(n.code,{children:"array.push(item...)"}),"方法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = ['a','b','c'];\nvar b = ['x','y','z'];\nvar c = a.concat(b, true);\n// c => ['a','b','c','x','y','z',true]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"扩展："})," ",(0,c.jsx)(n.code,{children:"ES6"})," 有更便捷的扩展运算符",(0,c.jsx)(n.code,{children:"..."})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = ['a','b','c'];\nvar b = ['x','y','z'];\nvar c = [...a,true,...b];   // [\"a\", \"b\", \"c\", true, \"x\", \"y\", \"z\"]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.join(separator)"}),"\n",(0,c.jsx)(n.code,{children:"join"}),"方法把一个",(0,c.jsx)(n.code,{children:"array"}),"构造成一个字符串。\n",(0,c.jsx)(n.code,{children:"separator"})," 默认值就是逗号",(0,c.jsx)(n.code,{children:"','"}),"。\n如果你想把大量的字符串片段组装成一个字符串，把这些片段放在一个数组中，并用",(0,c.jsx)(n.code,{children:"join"}),"方法连接起来通常比用",(0,c.jsx)(n.code,{children:"+"}),"元素运算符连接起来要快。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["译注：对于",(0,c.jsx)(n.code,{children:"IE6/7"}),"，使用join连接大量字符串效率确实优于加号运算符。但目前主流浏览器，包括",(0,c.jsx)(n.code,{children:"IE8"}),"以后的版本，都对",(0,c.jsx)(n.code,{children:"+"}),"元素运算符连接字符串做了优化，性能已经显著高于",(0,c.jsx)(n.code,{children:"Array.join()"}),"。所以目前大多数情况下，建议首选使用+ 连接字符串。更多参看《高性能网站建设进阶指南》中字符串优化相关章节。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.pop()"}),"\n",(0,c.jsx)(n.code,{children:"pop"}),"方法移除",(0,c.jsx)(n.code,{children:"array"}),"中的最后一个元素，并返回这个元素。如果",(0,c.jsx)(n.code,{children:"array"}),"为空，则返回",(0,c.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = ['a','b','c'];\nvar c = a.pop(); // a 是 ['a','b']  c是 'c'\n// pop 可以像这样实现。\n// 这里的 Array.method()在第一章例子中已经定义了，并且贯穿全书。其实就是相当于Array.prototype\nArray.method('pop', function () {\n    return this.splice(this.length-1,1)[0];\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.push(item...)"}),"\n与",(0,c.jsx)(n.code,{children:"concat"}),"不同的是，它会修改array，如果参数",(0,c.jsx)(n.code,{children:"item"}),"是数组，它会把参数数组作为单个元素整个添加到数组中。并返回这个",(0,c.jsx)(n.code,{children:"array"}),"的新长度值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = [1,2,3];\nvar b = [4,5,6];\nvar c = a.push(b,true);\n// a 是 [1,2,3,[4,5,6],true]\n// c 是 5\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"push"}),"可以像这样实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Array.method('push', function () {\n  this.splice.apply(\n  this,\n  [this.length,0].\n  concat(Array.prototype.slice.apply(arguments)));\n  return this.length;\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.reverse()"}),"\n",(0,c.jsx)(n.code,{children:"reverse"}),"反转",(0,c.jsx)(n.code,{children:"array"}),"元素顺序，并返回",(0,c.jsx)(n.code,{children:"array"}),"本身。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = [1,2,3];\nvar b = a.reverse();\n// a 和 b都是 [3,2,1]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.shift()"}),"\n",(0,c.jsx)(n.code,{children:"shift"}),"移除",(0,c.jsx)(n.code,{children:"array"}),"的第一个元素并返回这个元素。如果",(0,c.jsx)(n.code,{children:"array"}),"为空，则返回",(0,c.jsx)(n.code,{children:"undefined"}),"。",(0,c.jsx)(n.code,{children:"shift"}),"通常比",(0,c.jsx)(n.code,{children:"pop"}),"慢的多。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = [1,2,3];\nvar c = a.shift(); // a 是[2,3] , c 是1\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"shift"}),"可以这样实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"Array.method('shift', function(){\n    return this.splice(0,1)[0];\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.slice(start[, end])"}),"\n",(0,c.jsx)(n.code,{children:"slice"}),"是对",(0,c.jsx)(n.code,{children:"array"}),"中的一段做浅复制。",(0,c.jsx)(n.code,{children:"end"}),"是可选的。默认是",(0,c.jsx)(n.code,{children:"array.length"}),",如果两个参数任何一个是负数，",(0,c.jsx)(n.code,{children:"array.length"}),"会和相加。如果",(0,c.jsx)(n.code,{children:"start"}),"大于",(0,c.jsx)(n.code,{children:"array.length"}),",获得一个",(0,c.jsx)(n.code,{children:"[]"}),",字符串也有",(0,c.jsx)(n.code,{children:"Sting.slice"}),"这个同名方法。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.sort"}),"\n默认不能给一组数字排序。默认把要被排序的元素都视为字符串。\n幸运的是，可以使用自己的比较函数替换默认的比较函数。\n比较函数应该接受两个参数，并且如果这两个参数相等则返回0，如果第1个参数应该排列在前面，则返回一个负数，如果第二个参数应该排列在前面，则返回一个正数。\n",(0,c.jsx)(n.code,{children:"sort"}),"方法是不稳定的。",(0,c.jsx)(n.code,{children:"JavaScript"}),"的",(0,c.jsx)(n.code,{children:"sort"}),"方法的稳定性根据不同浏览器的实现而不一致。\n可参见",(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",rel:"noopener noreferrer",target:"_blank",children:"MDN sort"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.splice(start, deleteCount,item...)"}),"\n",(0,c.jsx)(n.code,{children:"splice"}),"方法从array中移除一个或多个元素，并用新的",(0,c.jsx)(n.code,{children:"item"}),"替换它们。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// splice 可以像这样实现\nArray.method('splice',function (start, deleteCount) {\n    var max = Math.max,\n        min = Math.min,\n        delta,\n        element,\n        insertCount = max(arguments.length - 2, 0),\n        k = 0,\n        len = this.length,\n        new_len,\n        result = [],\n        shift_count;\n    start = start || 0;\n    if (start < 0) {\n        start += len;\n    }\n    start = max(min(start, len), 0);\n    deleteCount = max(min(typeof deleteCount === 'number' ? deleteCount : len, len - start), 0);\n    delta = insertCount - deleteCount;\n    new_len = len + delta;\n    while (k < deleteCount) {\n        element = this[start + k];\n        if (element !== undefined) {\n            result[k] = element;\n        }\n        k += 1;\n    }\n    shift_count = len - start - deleteCount;\n    if (delta < 0) {\n        k = start + insertCount;\n        while (shift_count) {\n            this[k] = this[k - delta];\n            k += 1;\n            shift_count -= 1;\n        }\n        this.length = new_len;\n    } else if (delta > 0) {\n        k = 1;\n        while (shift_count) {\n            this[new_len - k] = this[len - k];\n            k += 1;\n            shift_count -= 1;\n        }\n        this.length = new_len;\n    }\n    for (k = 0; k < insertCount; k += 1) {\n        this[start + k] = arguments[k + 2];\n    }\n    return result;\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"array.unshift(item...)"}),"\n",(0,c.jsx)(n.code,{children:"unshift"})," 方法像",(0,c.jsx)(n.code,{children:"push"}),"方法一样，不过是用于把元素添加到数组的开始部分，返回新",(0,c.jsx)(n.code,{children:"array"}),"的",(0,c.jsx)(n.code,{children:"length"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// unshift 可以像这样实现\nArray.method('unshift', function(){\n    this.splice.apply(this,\n    [0,0].concat(Array.prototype.slice.apply(arguments)));\n    return this.length;\n});\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"function",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function",children:"#"}),"Function"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"function.apply(thisArg,argArray)"}),"\n",(0,c.jsx)(n.code,{children:"apply"}),"方法调用",(0,c.jsx)(n.code,{children:"function"}),",传递一个会被绑定到",(0,c.jsx)(n.code,{children:"this"}),"上的对象和一个可选的数组作为参数。"]}),"\n",(0,c.jsxs)(n.h3,{id:"number",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#number",children:"#"}),"Number"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"number.toExponential(fractionDigits)"}),"\n",(0,c.jsx)(n.code,{children:"toExponential"}),"方法 把这个",(0,c.jsx)(n.code,{children:"number"}),"转换成一个指数形式的字符串。可选参数控制其小数点后的数字位数。它的值必须在",(0,c.jsx)(n.code,{children:"0~20"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"number.toFixed(fractionDigits)"}),"\n",(0,c.jsx)(n.code,{children:"toFixed"}),"方法把这个number转换成一个十进制数形式的字符串。可选参数控制其小数点后的数字位数。它的值必须在0~20。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"number.toPrecision(precision)"}),"\n",(0,c.jsx)(n.code,{children:"toPrecision"}),"方法把这个",(0,c.jsx)(n.code,{children:"number"}),"转换成一个十进制数形式的字符串。可选参数控制数字的精度。它的值必须在",(0,c.jsx)(n.code,{children:"0~21"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"number.toString(radix)"}),"\n把",(0,c.jsx)(n.code,{children:"number"}),"转换成字符串。可选参数控制基数。它的值必须是",(0,c.jsx)(n.code,{children:"2~36"}),"。默认的",(0,c.jsx)(n.code,{children:"radix"}),"是以",(0,c.jsx)(n.code,{children:"10"}),"为基数的。",(0,c.jsx)(n.code,{children:"radix"}),"参数最常用的是整数，但是它可以用任意的数字。"]}),"\n",(0,c.jsxs)(n.h3,{id:"object",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#object",children:"#"}),"Object"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"object.hasOwnProperty(name)"}),"\n如果这个",(0,c.jsx)(n.code,{children:"object"}),"包含名为",(0,c.jsx)(n.code,{children:"name"}),"的属性，那么返回",(0,c.jsx)(n.code,{children:"true"}),"。原型链中的同名方法不会被检测。这个方法对",(0,c.jsx)(n.code,{children:"name"}),"就是",(0,c.jsx)(n.code,{children:"“hasOwnProperty”"}),"时不起作用。"]}),"\n",(0,c.jsxs)(n.h3,{id:"regexp",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#regexp",children:"#"}),"RegExp"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"regexp.exec(string)"}),"\n",(0,c.jsx)(n.code,{children:"exec"}),"是正则中最强大(和最慢）的方法。\n如果成功匹配，它会返回一个数组。下标为0 的元素包含正则匹配的子字符串。下标为1的则是分组1捕获的文本。下标为2的则是分组2捕获的文本。以此类推。如果匹配失败则返回",(0,c.jsx)(n.code,{children:"null"}),"。\n",(0,c.jsx)(n.strong,{children:"regexp.test(string)"}),"\n",(0,c.jsx)(n.code,{children:"test"}),"是最简单(和最快)的方法。匹配成功，返回",(0,c.jsx)(n.code,{children:"true"}),",否则返回",(0,c.jsx)(n.code,{children:"false"}),"。不要对这个方法使用",(0,c.jsx)(n.code,{children:"g"}),"标识。\n比如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var reg = /\\w+/g;\nreg.test('ab'); // true\n// 再执行一遍就是false了。\nreg.test('ab'); // false\n// 再执行一遍就是true了。\nreg.test('ab'); // true\n// 再执行一遍又是false了，如此反复，所以用g标识后，看起来很诡异。因为每次匹配开始位置变了。\nreg.test('ab'); // false\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"test"}),"可以像这样实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"RegExp.method('test', function(string){\n    return this.exec(string) !== null;\n});\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"string",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#string",children:"#"}),"String"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.charAt(pos)"}),"\n返回在",(0,c.jsx)(n.code,{children:"string"}),"中的",(0,c.jsx)(n.code,{children:"pos"}),"位置处的字符。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.charCodeAt(pos)"}),"\n与",(0,c.jsx)(n.code,{children:"charAt"}),"一样，不过返回整数形式表示字符码位。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.concat(string)"}),"\n很少用，用",(0,c.jsx)(n.code,{children:"+"}),"号运算符更方便。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.indexOf(searchString,position)"}),"\n在",(0,c.jsx)(n.code,{children:"string"}),"中查找第一个参数，如果被找到返回该字符的位置，否则返回",(0,c.jsx)(n.code,{children:"-1"}),"。",(0,c.jsx)(n.code,{children:"position"}),"可设置指定位置开始查找。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.lastIndexOf(searchString,position)"}),"\n",(0,c.jsx)(n.code,{children:"lastIndexOf"})," 方法和",(0,c.jsx)(n.code,{children:"indexOf"}),"方法类似，不过它是从末尾开始查找，不是从头开始。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.localeCompare(that)"}),"\n比较两个字符串。类似于",(0,c.jsx)(n.code,{children:"array.sort"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.match(regexp)"}),"\n如果没有",(0,c.jsx)(n.code,{children:"g"}),"标识，那么调用",(0,c.jsx)(n.code,{children:"string.match(regexp)"}),"和调用",(0,c.jsx)(n.code,{children:"regexp.exec(string)"}),"结果相同。如果带有",(0,c.jsx)(n.code,{children:"g"}),"标识，那么它生成一个包含所有匹配（除捕获分组之外）的数组。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.replace(searchValue,replaceValue)"}),"\n对",(0,c.jsx)(n.code,{children:"string"}),"进行查找和替换操作，并返回一个新的字符串。参数",(0,c.jsx)(n.code,{children:"searchvalue"}),"可以是一个字符串也可以是一个正则表达式对象。参数",(0,c.jsx)(n.code,{children:"replaceValue"}),"可以是一个字符串或一个函数。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.search(regexp)"}),"\n和",(0,c.jsx)(n.code,{children:"indexOf"}),"类似，不过它接收正则为参数。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.slice(start, end)"}),"\n",(0,c.jsx)(n.code,{children:"slice"}),"方法复制",(0,c.jsx)(n.code,{children:"string"}),"的一部分来构造一个新的字符串。如果",(0,c.jsx)(n.code,{children:"start"}),"参数是负数，它将与",(0,c.jsx)(n.code,{children:"string.length"}),"相加。",(0,c.jsx)(n.code,{children:"end"}),"参数是可选的。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.split(separator,limit)"}),"\n把",(0,c.jsx)(n.code,{children:"string"}),"分割成片段来创建一个字符串数组。可选参数",(0,c.jsx)(n.code,{children:"limit"}),"可以限制分割的片段数量。",(0,c.jsx)(n.code,{children:"separator"}),"参数可以是字符串或者正则。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.substring(start,end)"}),"\n与",(0,c.jsx)(n.code,{children:"slice"}),"方法一样，不过它不能处理负数参数。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.toLocaleLowerCase()"}),"\n它使用本地化的规则把这个",(0,c.jsx)(n.code,{children:"string"}),"中的字母转换成小写格式。这个方法主要用在土耳其语上。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.toLocaleUpperCase()"}),"\n它使用本地化的规则把这个",(0,c.jsx)(n.code,{children:"string"}),"中的字母转换成大写格式。这个方法主要用在土耳其语上。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.toLowerCase()"}),"\n返回新字符串，所有字母转成小写格式。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"string.toUpperCase()"}),"\n返回新字符串，所有字母转成大写格式。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"String.fromCharCode(char...)"}),"\n根据一串数字编码返回一个字符串。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"var a = String.fromCharCode(67,97,116) // a是'Cat'\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"第9章-代码风格",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第9章-代码风格",children:"#"}),"第9章 代码风格"]}),"\n",(0,c.jsx)(n.p,{children:"这一章中，简短的说了一些代码风格。事实证明代码风格在编程中是很重要的。"}),"\n",(0,c.jsxs)(n.h2,{id:"第10章-优美的特性",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第10章-优美的特性",children:"#"}),"第10章 优美的特性"]}),"\n",(0,c.jsxs)(n.p,{children:["精简的",(0,c.jsx)(n.code,{children:"JavaScript"}),"里都是好东西。\n包括：1、函数是顶级对象；2、基于原型继承的动态作用域；3、对象字面量和数组字面量。"]}),"\n",(0,c.jsx)(n.p,{children:"到此，读书笔记已完结。文章有什么不妥之处，欢迎指出~"}),"\n",(0,c.jsxs)(n.h2,{id:"关于",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关于",children:"#"}),"关于"]}),"\n",(0,c.jsxs)(n.p,{children:["作者：常以",(0,c.jsx)(n.strong,{children:"若川"}),"为名混迹于江湖。前端路上 | PPT爱好者 | 所知甚少，唯善学。","\n",(0,c.jsx)(n.a,{href:"https://ruochuan12.github.io/",rel:"noopener noreferrer",target:"_blank",children:"个人博客"}),"\n",(0,c.jsx)(n.a,{href:"https://juejin.im/user/1415826704971918/posts",rel:"noopener noreferrer",target:"_blank",children:"掘金专栏"}),"，欢迎关注~","\n",(0,c.jsxs)(n.a,{href:"https://segmentfault.com/blog/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:[(0,c.jsx)(n.code,{children:"segmentfault"}),"前端视野专栏"]}),"，开通了",(0,c.jsx)(n.strong,{children:"前端视野"}),"专栏，欢迎关注~","\n",(0,c.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:"知乎前端视野专栏"}),"，开通了",(0,c.jsx)(n.strong,{children:"前端视野"}),"专栏，欢迎关注~","\n",(0,c.jsx)(n.a,{href:"https://github.com/ruochuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"github blog"}),"，相关源码和资源都放在这里，求个",(0,c.jsx)(n.code,{children:"star"}),"^_^~"]}),"\n",(0,c.jsxs)(n.h2,{id:"微信公众号--若川视野",children:[(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#微信公众号--若川视野",children:"#"}),"微信公众号  若川视野"]}),"\n",(0,c.jsxs)(n.p,{children:["可能比较有趣的微信公众号，长按扫码关注。也可以加微信 ",(0,c.jsx)(n.code,{children:"ruochuan12"}),"，注明来源，拉您进【前端视野交流群】。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{alt:"若川视野",src:i})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,Object.assign({},e,{children:(0,c.jsx)(l,e)})):l(e)}let h=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["js-book%2Findex.md"]={toc:[{id:"第1章-精华",text:"第1章 精华",depth:2},{id:"第2章-语法",text:"第2章 语法",depth:2},{id:"第3章-对象",text:"第3章 对象",depth:2},{id:"第4章-函数",text:"第4章 函数",depth:2},{id:"第5章-继承",text:"第5章 继承",depth:2},{id:"第6章-数组",text:"第6章 数组",depth:2},{id:"第7章-正则表达式",text:"第7章 正则表达式",depth:2},{id:"第8章-方法",text:"第8章 方法",depth:2},{id:"array",text:"Array",depth:3},{id:"function",text:"Function",depth:3},{id:"number",text:"Number",depth:3},{id:"object",text:"Object",depth:3},{id:"regexp",text:"RegExp",depth:3},{id:"string",text:"String",depth:3},{id:"第9章-代码风格",text:"第9章 代码风格",depth:2},{id:"第10章-优美的特性",text:"第10章 优美的特性",depth:2},{id:"关于",text:"关于",depth:2},{id:"微信公众号--若川视野",text:"微信公众号  若川视野",depth:2}],title:"《JavaScript语言精粹 修订版》 读书笔记",headingTitle:"《JavaScript语言精粹 修订版》 读书笔记",frontmatter:{}}},20713:function(e,n,r){r.d(n,{Z:()=>t});var c=r(52676),s=r(75271),d=r(92815);r(18544);let i={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function l(e,n,r){let c=Object.keys(i).includes(n)?n:r;return i[c](e)}let t=e=>{let{defaultLocale:n="en-US"}=e,r=(0,d.Vi)().page.readingTimeData,i=(0,d.Jr)(),t=(0,d.e7)(),[h,o]=(0,s.useState)(l(r,i,n));return(0,s.useEffect)(()=>{o(l(r,i,n))},[i,r]),(0,c.jsx)("span",{"data-dark":String(t),className:"rp-reading-time",children:h})}}}]);