"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["1297"],{68522:function(e,n,s){e.exports=s.p+"static/image/release-terminal.86dde113.png"},78711:function(e,n,s){s.r(n),s.d(n,{default:()=>t});var r=s(52676),a=s(40453),i=s(20713),c=s(68522);function d(e){let n=Object.assign({h2:"h2",a:"a",p:"p",strong:"strong",code:"code",pre:"pre",img:"img",h3:"h3",h4:"h4",blockquote:"blockquote"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"1-前言",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,r.jsx)(i.Z,{defaultLocale:"zh-CN"}),"\n",(0,r.jsxs)(n.p,{children:["大家好，我是",(0,r.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。欢迎关注我的",(0,r.jsx)(n.a,{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650756550&idx=1&sn=9acc5e30325963e455f53ec2f64c1fdd&chksm=8866564abf11df5c41307dba3eb84e8e14de900e1b3500aaebe802aff05b0ba2c24e4690516b&token=1266363653&lang=zh_CN#rd",rel:"noopener noreferrer",target:"_blank",children:"公众号若川视野"}),"，最近组织了",(0,r.jsx)(n.strong,{children:"源码共读"}),"活动",(0,r.jsx)(n.a,{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650756550&idx=1&sn=9acc5e30325963e455f53ec2f64c1fdd&chksm=8866564abf11df5c41307dba3eb84e8e14de900e1b3500aaebe802aff05b0ba2c24e4690516b&token=1266363653&lang=zh_CN#rd",rel:"noopener noreferrer",target:"_blank",children:"1个月，200+人，一起读了4周源码"}),"，感兴趣的可以加我微信 ",(0,r.jsx)(n.a,{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650756550&idx=1&sn=9acc5e30325963e455f53ec2f64c1fdd&chksm=8866564abf11df5c41307dba3eb84e8e14de900e1b3500aaebe802aff05b0ba2c24e4690516b&token=1266363653&lang=zh_CN#rd",rel:"noopener noreferrer",target:"_blank",children:"ruochuan12"}),"，长期交流学习。"]}),"\n",(0,r.jsxs)(n.p,{children:["之前写的",(0,r.jsx)(n.a,{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MjQwMzQyNw==&action=getalbum&album_id=1342211915371675650&scene=173&from_msgid=2650756199&from_itemidx=1&count=3&nolastread=1#wechat_redirect",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"})," 包含",(0,r.jsx)(n.code,{children:"jQuery"}),"、",(0,r.jsx)(n.code,{children:"underscore"}),"、",(0,r.jsx)(n.code,{children:"lodash"}),"、",(0,r.jsx)(n.code,{children:"vuex"}),"、",(0,r.jsx)(n.code,{children:"sentry"}),"、",(0,r.jsx)(n.code,{children:"axios"}),"、",(0,r.jsx)(n.code,{children:"redux"}),"、",(0,r.jsx)(n.code,{children:"koa"}),"、",(0,r.jsx)(n.code,{children:"vue-devtools"}),"、",(0,r.jsx)(n.code,{children:"vuex4"}),"十篇源码文章。"]}),"\n",(0,r.jsx)(n.p,{children:"写相对很难的源码，耗费了自己的时间和精力，也没收获多少阅读点赞，其实是一件挺受打击的事情。从阅读量和读者受益方面来看，不能促进作者持续输出文章。"}),"\n",(0,r.jsxs)(n.p,{children:["所以转变思路，写一些相对通俗易懂的文章。",(0,r.jsx)(n.strong,{children:"其实源码也不是想象的那么难，至少有很多看得懂"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["最近尤雨溪发布了3.2版本。小版本已经是",(0,r.jsx)(n.code,{children:"3.2.4"}),"了。本文来学习下尤大是怎么发布",(0,r.jsx)(n.code,{children:"vuejs"}),"的，学习源码为自己所用。"]}),"\n",(0,r.jsxs)(n.p,{children:["本文涉及到的 ",(0,r.jsx)(n.code,{children:"vue-next/scripts/release.js"}),"文件，整个文件代码行数虽然只有 ",(0,r.jsx)(n.code,{children:"200"})," 余行，但非常值得我们学习。"]}),"\n",(0,r.jsx)(n.p,{children:"歌德曾说：读一本好书，就是在和高尚的人谈话。 同理可得：读源码，也算是和作者的一种学习交流的方式。"}),"\n",(0,r.jsx)(n.p,{children:"阅读本文，你将学到："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"1. 熟悉 vuejs 发布流程\n2. 学会调试 nodejs 代码\n3. 动手优化公司项目发布流程\n"})}),"\n",(0,r.jsxs)(n.p,{children:["环境准备之前，我们先预览下",(0,r.jsx)(n.code,{children:"vuejs"}),"的发布流程。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/2e7c8b98-6cb1-4ff3-8c2a-4160e3071d97.png",alt:"vue 发布流程"})}),"\n",(0,r.jsxs)(n.h2,{id:"2-环境准备",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-环境准备",children:"#"}),"2. 环境准备"]}),"\n",(0,r.jsxs)(n.p,{children:["打开 ",(0,r.jsx)(n.a,{href:"https://github.com/vuejs/vue-next",rel:"noopener noreferrer",target:"_blank",children:"vue-next"}),"，\n开源项目一般都能在 ",(0,r.jsx)(n.code,{children:"README.md"})," 或者 ",(0,r.jsx)(n.a,{href:"https://github.com/vuejs/vue-next/blob/master/.github/contributing.md",rel:"noopener noreferrer",target:"_blank",children:".github/contributing.md"})," 找到贡献指南。"]}),"\n",(0,r.jsx)(n.p,{children:"而贡献指南写了很多关于参与项目开发的信息。比如怎么跑起来，项目目录结构是怎样的。怎么投入开发，需要哪些知识储备等。"}),"\n",(0,r.jsxs)(n.p,{children:["你需要确保 ",(0,r.jsx)(n.a,{href:"http://nodejs.org/",rel:"noopener noreferrer",target:"_blank",children:"Node.js"})," 版本是 ",(0,r.jsx)(n.code,{children:"10+"}),", 而且 ",(0,r.jsx)(n.code,{children:"yarn"})," 的版本是 ",(0,r.jsx)(n.code,{children:"1.x"})," ",(0,r.jsx)(n.a,{href:"https://yarnpkg.com/en/docs/install",rel:"noopener noreferrer",target:"_blank",children:"Yarn 1.x"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["你安装的 ",(0,r.jsx)(n.code,{children:"Node.js"})," 版本很可能是低于 ",(0,r.jsx)(n.code,{children:"10"}),"。最简单的办法就是去官网重新安装。也可以使用 ",(0,r.jsx)(n.code,{children:"nvm"}),"等管理",(0,r.jsx)(n.code,{children:"Node.js"}),"版本。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node -v\n# v14.16.0\n# 全局安装 yarn\n# 克隆项目\ngit clone https://github.com/vuejs/vue-next.git\ncd vue-next\n\n# 或者克隆我的项目\ngit clone https://github.com/ruochuan12/vue-next-analysis.git\ncd vue-next-analysis/vue-next\n\n# 安装 yarn\nnpm install --global yarn\n# 安装依赖\nyarn # install the dependencies of the project\n# yarn release\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"21-严格校验使用-yarn-安装依赖",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-严格校验使用-yarn-安装依赖",children:"#"}),"2.1 严格校验使用 yarn 安装依赖"]}),"\n",(0,r.jsxs)(n.p,{children:["接着我们来看下 ",(0,r.jsx)(n.code,{children:"vue-next/package.json"})," 文件。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// vue-next/package.json\n{\n    "private": true,\n    "version": "3.2.4",\n    "workspaces": [\n        "packages/*"\n    ],\n    "scripts": {\n        // --dry 参数是我加的，如果你是调试 代码也建议加\n        // 不执行测试和编译 、不执行 推送git等操作\n        // 也就是说空跑，只是打印，后文再详细讲述\n        "release": "node scripts/release.js --dry",\n        "preinstall": "node ./scripts/checkYarn.js",\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如果你尝试使用 ",(0,r.jsx)(n.code,{children:"npm"})," 安装依赖，应该是会报错的。为啥会报错呢。\n因为 ",(0,r.jsx)(n.code,{children:"package.json"})," 有个前置 ",(0,r.jsx)(n.code,{children:"preinstall"}),"  ",(0,r.jsx)(n.code,{children:"node ./scripts/checkYarn.js"})," 判断强制要求是使用",(0,r.jsx)(n.code,{children:"yarn"}),"安装。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scripts/checkYarn.js"}),"文件如下，也就是在",(0,r.jsx)(n.code,{children:"process.env"}),"环境变量中找执行路径",(0,r.jsx)(n.code,{children:"npm_execpath"}),"，如果不是",(0,r.jsx)(n.code,{children:"yarn"}),"就输出警告，且进程结束。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// scripts/checkYarn.js\nif (!/yarn\\.js$/.test(process.env.npm_execpath || '')) {\n  console.warn(\n    '\\u001b[33mThis repository requires Yarn 1.x for scripts to work properly.\\u001b[39m\\n'\n  )\n  process.exit(1)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果你想忽略这个前置的钩子判断，可以使用",(0,r.jsx)(n.code,{children:"yarn --ignore-scripts"})," 命令。也有后置的钩子",(0,r.jsx)(n.code,{children:"post"}),"。",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v6/using-npm/scripts",rel:"noopener noreferrer",target:"_blank",children:"更多详细的可以查看 npm 文档"})]}),"\n",(0,r.jsxs)(n.h3,{id:"22-调试--vue-nextscriptsreleasejs-文件",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-调试--vue-nextscriptsreleasejs-文件",children:"#"}),"2.2 调试  vue-next/scripts/release.js 文件"]}),"\n",(0,r.jsxs)(n.p,{children:["接着我们来学习如何调试 ",(0,r.jsx)(n.code,{children:"vue-next/scripts/release.js"}),"文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["这里声明下我的 ",(0,r.jsx)(n.code,{children:"VSCode"})," 版本 是 ",(0,r.jsx)(n.code,{children:"1.59.0"})," 应该 ",(0,r.jsx)(n.code,{children:"1.50.0"})," 起就可以按以下步骤调试了。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"code -v\n# 1.59.0\n"})}),"\n",(0,r.jsxs)(n.p,{children:["找到 ",(0,r.jsx)(n.code,{children:"vue-next/package.json"})," 文件打开，然后在 ",(0,r.jsx)(n.code,{children:"scripts"})," 上方，会有",(0,r.jsx)(n.code,{children:"debug"}),"（调试）按钮，点击后，选择 ",(0,r.jsx)(n.code,{children:"release"}),"。即可进入调试模式。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/dc3d5a96-b130-4800-a7a8-48052464e774.png",alt:"debugger"})}),"\n",(0,r.jsxs)(n.p,{children:["这时终端会如下图所示，有 ",(0,r.jsx)(n.code,{children:"Debugger attached."})," 输出。这时放张图。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/0fbf603e-14d7-43e7-a3b3-3cc176270c79.png",alt:"terminal"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging",rel:"noopener noreferrer",target:"_blank",children:"更多 nodejs 调试相关  可以查看官方文档"})}),"\n",(0,r.jsx)(n.p,{children:"学会调试后，先大致走一遍流程，在关键地方多打上几个断点多走几遍，就能猜测到源码意图了。"}),"\n",(0,r.jsxs)(n.h2,{id:"3-文件开头的一些依赖引入和函数声明",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-文件开头的一些依赖引入和函数声明",children:"#"}),"3 文件开头的一些依赖引入和函数声明"]}),"\n",(0,r.jsx)(n.p,{children:"我们可以跟着断点来，先看文件开头的一些依赖引入和函数声明"}),"\n",(0,r.jsxs)(n.h3,{id:"31-第一部分",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-第一部分",children:"#"}),"3.1 第一部分"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue-next/scripts/release.js\nconst args = require('minimist')(process.argv.slice(2))\n// 文件模块\nconst fs = require('fs')\n// 路径\nconst path = require('path')\n// 控制台\nconst chalk = require('chalk')\nconst semver = require('semver')\nconst currentVersion = require('../package.json').version\nconst { prompt } = require('enquirer')\n\n// 执行子进程命令   简单说 就是在终端命令行执行 命令\nconst execa = require('execa')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["通过依赖，我们可以在 ",(0,r.jsx)(n.code,{children:"node_modules"})," 找到对应安装的依赖。也可以找到其",(0,r.jsx)(n.code,{children:"README"}),"和",(0,r.jsx)(n.code,{children:"github"}),"仓库。"]}),"\n",(0,r.jsxs)(n.h4,{id:"311-minimist--命令行参数解析",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#311-minimist--命令行参数解析",children:"#"}),"3.1.1 minimist  命令行参数解析"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/substack/minimist",rel:"noopener noreferrer",target:"_blank",children:"minimist"})}),"\n",(0,r.jsx)(n.p,{children:"简单说，这个库，就是解析命令行参数的。看例子，我们比较容易看懂传参和解析结果。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ node example/parse.js -a beep -b boop\n{ _: [], a: 'beep', b: 'boop' }\n\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ 'foo', 'bar', 'baz' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: 'boop' }\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const args = require('minimist')(process.argv.slice(2))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中",(0,r.jsx)(n.code,{children:"process.argv"}),"的第一和第二个元素是",(0,r.jsx)(n.code,{children:"Node"}),"可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。"]}),"\n",(0,r.jsxs)(n.h4,{id:"312-chalk-终端多色彩输出",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#312-chalk-终端多色彩输出",children:"#"}),"3.1.2 chalk 终端多色彩输出"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/chalk/chalk",rel:"noopener noreferrer",target:"_blank",children:"chalk"})}),"\n",(0,r.jsx)(n.p,{children:"简单说，这个是用于终端显示多色彩输出。"}),"\n",(0,r.jsxs)(n.h4,{id:"313-semver--语义化版本",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#313-semver--语义化版本",children:"#"}),"3.1.3 semver  语义化版本"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/npm/node-semver",rel:"noopener noreferrer",target:"_blank",children:"semver"})}),"\n",(0,r.jsxs)(n.p,{children:["语义化版本的nodejs实现，用于版本校验比较等。关于语义化版本可以看这个",(0,r.jsx)(n.a,{href:"https://semver.org/lang/zh-CN/",rel:"noopener noreferrer",target:"_blank",children:"语义化版本 2.0.0 文档"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["版本格式：主版本号.次版本号.修订号，版本号递增规则如下：","\n主版本号：当你做了不兼容的 API 修改，","\n次版本号：当你做了向下兼容的功能性新增，","\n修订号：当你做了向下兼容的问题修正。","\n先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"314-enquirer-交互式询问-cli",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#314-enquirer-交互式询问-cli",children:"#"}),"3.1.4 enquirer 交互式询问 CLI"]}),"\n",(0,r.jsx)(n.p,{children:"简单说就是交互式询问用户输入。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/enquirer/enquirer",rel:"noopener noreferrer",target:"_blank",children:"enquirer"})}),"\n",(0,r.jsxs)(n.h4,{id:"315-execa-执行命令",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#315-execa-执行命令",children:"#"}),"3.1.5 execa 执行命令"]}),"\n",(0,r.jsxs)(n.p,{children:["简单说就是执行命令的，类似我们自己在终端输入命令，比如 ",(0,r.jsx)(n.code,{children:"echo 若川"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/sindresorhus/execa",rel:"noopener noreferrer",target:"_blank",children:"execa"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 例子\nconst execa = require('execa');\n\n(async () => {\n  const {stdout} = await execa('echo', ['unicorns']);\n  console.log(stdout);\n  //=> 'unicorns'\n})();\n"})}),"\n",(0,r.jsx)(n.p,{children:"看完了第一部分，接着我们来看第二部分。"}),"\n",(0,r.jsxs)(n.h3,{id:"32-第二部分",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-第二部分",children:"#"}),"3.2 第二部分"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue-next/scripts/release.js\n\n// 对应 yarn run release --preid=beta\n// beta\nconst preId =\n  args.preid ||\n  (semver.prerelease(currentVersion) && semver.prerelease(currentVersion)[0])\n// 对应 yarn run release --dry\n// true\nconst isDryRun = args.dry\n// 对应 yarn run release --skipTests\n// true 跳过测试\nconst skipTests = args.skipTests\n// 对应 yarn run release --skipBuild\n// true\nconst skipBuild = args.skipBuild\n\n// 读取 packages 文件夹，过滤掉 不是 .ts文件 结尾 并且不是 . 开头的文件夹\nconst packages = fs\n  .readdirSync(path.resolve(__dirname, '../packages'))\n  .filter(p => !p.endsWith('.ts') && !p.startsWith('.'))\n"})}),"\n",(0,r.jsx)(n.p,{children:"第二部分相对简单，继续看第三部分。"}),"\n",(0,r.jsxs)(n.h3,{id:"33-第三部分",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-第三部分",children:"#"}),"3.3 第三部分"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue-next/scripts/release.js\n\n// 跳过的包\nconst skippedPackages = []\n\n// 版本递增\nconst versionIncrements = [\n  'patch',\n  'minor',\n  'major',\n  ...(preId ? ['prepatch', 'preminor', 'premajor', 'prerelease'] : [])\n]\n\nconst inc = i => semver.inc(currentVersion, i, preId)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这一块可能不是很好理解。",(0,r.jsx)(n.code,{children:"inc"}),"是生成一个版本。更多可以查看",(0,r.jsx)(n.a,{href:"https://github.com/npm/node-semver#prerelease-identifiers",rel:"noopener noreferrer",target:"_blank",children:"semver文档"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"semver.inc('3.2.4', 'prerelease', 'beta')\n// 3.2.5-beta.0\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"34-第四部分",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-第四部分",children:"#"}),"3.4 第四部分"]}),"\n",(0,r.jsx)(n.p,{children:"第四部分声明了一些执行脚本函数等"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue-next/scripts/release.js\n\n// 获取 bin 命令\nconst bin = name => path.resolve(__dirname, '../node_modules/.bin/' + name)\nconst run = (bin, args, opts = {}) =>\n  execa(bin, args, { stdio: 'inherit', ...opts })\nconst dryRun = (bin, args, opts = {}) =>\n  console.log(chalk.blue(`[dryrun] ${bin} ${args.join(' ')}`), opts)\nconst runIfNotDry = isDryRun ? dryRun : run\n\n// 获取包的路径\nconst getPkgRoot = pkg => path.resolve(__dirname, '../packages/' + pkg)\n\n// 控制台输出\nconst step = msg => console.log(chalk.cyan(msg))\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"341-bin-函数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#341-bin-函数",children:"#"}),"3.4.1 bin 函数"]}),"\n",(0,r.jsxs)(n.p,{children:["获取 ",(0,r.jsx)(n.code,{children:"node_modules/.bin/"})," 目录下的命令，整个文件就用了一次。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"bin('jest')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["相当于在命令终端，项目根目录 运行 ",(0,r.jsx)(n.code,{children:"./node_modules/.bin/jest"})," 命令。"]}),"\n",(0,r.jsxs)(n.h4,{id:"342-rundryrunrunifnotdry",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#342-rundryrunrunifnotdry",children:"#"}),"3.4.2 run、dryRun、runIfNotDry"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const run = (bin, args, opts = {}) =>\n  execa(bin, args, { stdio: 'inherit', ...opts })\nconst dryRun = (bin, args, opts = {}) =>\n  console.log(chalk.blue(`[dryrun] ${bin} ${args.join(' ')}`), opts)\nconst runIfNotDry = isDryRun ? dryRun : run\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"run"})," 真实在终端跑命令，比如 ",(0,r.jsx)(n.code,{children:"yarn build --release"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dryRun"})," 则是不跑，只是 ",(0,r.jsx)(n.code,{children:"console.log();"})," 打印 'yarn build --release'"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"runIfNotDry"})," 如果不是空跑就执行命令。isDryRun 参数是通过控制台输入的。",(0,r.jsx)(n.code,{children:"yarn run release --dry"}),"这样就是",(0,r.jsx)(n.code,{children:"true"}),"。",(0,r.jsx)(n.code,{children:"runIfNotDry"}),"就是只是打印，不执行命令。这样设计的好处在于，可以有时不想直接提交，要先看看执行命令的结果。不得不说，尤大就是会玩。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"main"})," 函数末尾，也可以看到类似的提示。可以用",(0,r.jsx)(n.code,{children:"git diff"}),"先看看文件修改。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"if (isDryRun) {\n  console.log(`\\nDry run finished - run git diff to see package changes.`)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["看完了文件开头的一些依赖引入和函数声明等，我们接着来看",(0,r.jsx)(n.code,{children:"main"}),"主入口函数。"]}),"\n",(0,r.jsxs)(n.h2,{id:"4-main-主流程",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-main-主流程",children:"#"}),"4 main 主流程"]}),"\n",(0,r.jsxs)(n.p,{children:["第4节，主要都是",(0,r.jsx)(n.code,{children:"main"})," 函数拆解分析。"]}),"\n",(0,r.jsxs)(n.h3,{id:"41-流程梳理-main-函数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-流程梳理-main-函数",children:"#"}),"4.1 流程梳理 main 函数"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const chalk = require('chalk')\nconst step = msg => console.log(chalk.cyan(msg))\n// 前面一堆依赖引入和函数定义等\nasync function main(){\n  // 版本校验\n\n  // run tests before release\n  step('\\nRunning tests...')\n  // update all package versions and inter-dependencies\n  step('\\nUpdating cross dependencies...')\n  // build all packages with types\n  step('\\nBuilding all packages...')\n\n  // generate changelog\n  step('\\nCommitting changes...')\n\n  // publish packages\n  step('\\nPublishing packages...')\n\n  // push to GitHub\n  step('\\nPushing to GitHub...')\n}\n\nmain().catch(err => {\n  console.error(err)\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面的",(0,r.jsx)(n.code,{children:"main"}),"函数省略了很多具体函数实现。接下来我们拆解 ",(0,r.jsx)(n.code,{children:"main"})," 函数。"]}),"\n",(0,r.jsxs)(n.h3,{id:"42-确认要发布的版本",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-确认要发布的版本",children:"#"}),"4.2 确认要发布的版本"]}),"\n",(0,r.jsx)(n.p,{children:"第一段代码虽然比较长，但是还好理解。\n主要就是确认要发布的版本。"}),"\n",(0,r.jsx)(n.p,{children:"调试时，我们看下这段的两张截图，就好理解啦。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/73fcc02e-9cea-4bcb-8312-e0d3f5f144e4.png",alt:"终端输出选择版本号"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/117dd9dc-48d1-42b1-9b92-eb4808f90880.png",alt:"终端输入确认版本号"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 根据上文 mini 这句代码意思是 yarn run release 3.2.4\n// 取到参数 3.2.4\nlet targetVersion = args._[0]\n\nif (!targetVersion) {\n  // no explicit version, offer suggestions\n  const { release } = await prompt({\n    type: 'select',\n    name: 'release',\n    message: 'Select release type',\n    choices: versionIncrements.map(i => `${i} (${inc(i)})`).concat(['custom'])\n  })\n\n// 选自定义\n  if (release === 'custom') {\n    targetVersion = (\n      await prompt({\n        type: 'input',\n        name: 'version',\n        message: 'Input custom version',\n        initial: currentVersion\n      })\n    ).version\n  } else {\n    // 取到括号里的版本号\n    targetVersion = release.match(/\\((.*)\\)/)[1]\n  }\n}\n\n// 校验 版本是否符合 规范\nif (!semver.valid(targetVersion)) {\n  throw new Error(`invalid target version: ${targetVersion}`)\n}\n\n// 确认要 release\nconst { yes } = await prompt({\n  type: 'confirm',\n  name: 'yes',\n  message: `Releasing v${targetVersion}. Confirm?`\n})\n\n// false 直接返回\nif (!yes) {\n  return\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"43-执行测试用例",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-执行测试用例",children:"#"}),"4.3 执行测试用例"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// run tests before release\nstep('\\nRunning tests...')\nif (!skipTests && !isDryRun) {\n  await run(bin('jest'), ['--clearCache'])\n  await run('yarn', ['test', '--bail'])\n} else {\n  console.log(`(skipped)`)\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"44-更新所有包的版本号和内部-vue-相关依赖版本号",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-更新所有包的版本号和内部-vue-相关依赖版本号",children:"#"}),"4.4 更新所有包的版本号和内部 vue 相关依赖版本号"]}),"\n",(0,r.jsxs)(n.p,{children:["这一部分，就是更新根目录下",(0,r.jsx)(n.code,{children:"package.json"})," 的版本号和所有 ",(0,r.jsx)(n.code,{children:"packages"})," 的版本号。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// update all package versions and inter-dependencies\nstep('\\nUpdating cross dependencies...')\nupdateVersions(targetVersion)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function updateVersions(version) {\n  // 1. update root package.json\n  updatePackage(path.resolve(__dirname, '..'), version)\n  // 2. update all packages\n  packages.forEach(p => updatePackage(getPkgRoot(p), version))\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"441-updatepackage-更新包的版本号",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#441-updatepackage-更新包的版本号",children:"#"}),"4.4.1 updatePackage 更新包的版本号"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function updatePackage(pkgRoot, version) {\n  const pkgPath = path.resolve(pkgRoot, 'package.json')\n  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))\n  pkg.version = version\n  updateDeps(pkg, 'dependencies', version)\n  updateDeps(pkg, 'peerDependencies', version)\n  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n')\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"主要就是三种修改。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"1. 自己本身 package.json 的版本号\n2. packages.json 中 dependencies 中 vue 相关的依赖修改\n3. packages.json 中 peerDependencies 中 vue 相关的依赖修改\n"})}),"\n",(0,r.jsxs)(n.p,{children:["一图胜千言。我们执行",(0,r.jsx)(n.code,{children:"yarn release --dry"})," 后 ",(0,r.jsx)(n.code,{children:"git diff"})," 查看的 ",(0,r.jsx)(n.code,{children:"git"})," 修改，部分截图如下。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/2699599b-c104-41df-a66e-4ffac66d4eda.png",alt:"更新的版本号举例"})}),"\n",(0,r.jsxs)(n.h4,{id:"442-updatedeps-更新内部-vue-相关依赖的版本号",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#442-updatedeps-更新内部-vue-相关依赖的版本号",children:"#"}),"4.4.2 updateDeps 更新内部 vue 相关依赖的版本号"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function updateDeps(pkg, depType, version) {\n  const deps = pkg[depType]\n  if (!deps) return\n  Object.keys(deps).forEach(dep => {\n    if (\n      dep === 'vue' ||\n      (dep.startsWith('@vue') && packages.includes(dep.replace(/^@vue\\//, '')))\n    ) {\n      console.log(\n        chalk.yellow(`${pkg.name} -> ${depType} -> ${dep}@${version}`)\n      )\n      deps[dep] = version\n    }\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["一图胜千言。我们在终端执行",(0,r.jsx)(n.code,{children:"yarn release --dry"}),"。会看到这样是输出。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"更新 Vue 相关依赖的终端输出",src:c})}),"\n",(0,r.jsx)(n.p,{children:"也就是这句代码输出的。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log(\n  chalk.yellow(`${pkg.name} -> ${depType} -> ${dep}@${version}`)\n)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"45-打包编译所有包",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#45-打包编译所有包",children:"#"}),"4.5 打包编译所有包"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// build all packages with types\nstep('\\nBuilding all packages...')\nif (!skipBuild && !isDryRun) {\n  await run('yarn', ['build', '--release'])\n  // test generated dts files\n  step('\\nVerifying type declarations...')\n  await run('yarn', ['test-dts-only'])\n} else {\n  console.log(`(skipped)`)\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"46-生成-changelog",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#46-生成-changelog",children:"#"}),"4.6 生成 changelog"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// generate changelog\nawait run(`yarn`, ['changelog'])\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"yarn changelog"})," 对应的脚本是",(0,r.jsx)(n.code,{children:"conventional-changelog -p angular -i CHANGELOG.md -s"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"47-提交代码",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#47-提交代码",children:"#"}),"4.7 提交代码"]}),"\n",(0,r.jsxs)(n.p,{children:["经过更新版本号后，有文件改动，于是",(0,r.jsx)(n.code,{children:"git diff"}),"。\n是否有文件改动，如果有提交。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"git add -A"}),"\n",(0,r.jsx)(n.code,{children:"git  commit -m 'release: v${targetVersion}'"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { stdout } = await run('git', ['diff'], { stdio: 'pipe' })\nif (stdout) {\n  step('\\nCommitting changes...')\n  await runIfNotDry('git', ['add', '-A'])\n  await runIfNotDry('git', ['commit', '-m', `release: v${targetVersion}`])\n} else {\n  console.log('No changes to commit.')\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"48-发布包",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#48-发布包",children:"#"}),"4.8 发布包"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// publish packages\nstep('\\nPublishing packages...')\nfor (const pkg of packages) {\n  await publishPackage(pkg, targetVersion, runIfNotDry)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这段函数比较长，可以不用细看，简单说就是 ",(0,r.jsx)(n.code,{children:"yarn publish"})," 发布包。\n我们 ",(0,r.jsx)(n.code,{children:"yarn release --dry"}),"后，这块函数在终端输出的如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/57203a44-ae3c-42d4-beeb-e294c30b11a2.png",alt:"发布终端输出命令"})}),"\n",(0,r.jsxs)(n.p,{children:["值得一提的是，如果是 ",(0,r.jsx)(n.code,{children:"vue"})," 默认有个 ",(0,r.jsx)(n.code,{children:"tag"})," 为 ",(0,r.jsx)(n.code,{children:"next"}),"。当 ",(0,r.jsx)(n.code,{children:"Vue 3.x"})," 是默认时删除。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"} else if (pkgName === 'vue') {\n  // TODO remove when 3.x becomes default\n  releaseTag = 'next'\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["也就是为什么我们现在安装 ",(0,r.jsx)(n.code,{children:"vue3"})," 还是 ",(0,r.jsx)(n.code,{children:"npm i vue@next"}),"命令。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"async function publishPackage(pkgName, version, runIfNotDry) {\n  // 如果在 跳过包里 则跳过\n  if (skippedPackages.includes(pkgName)) {\n    return\n  }\n  const pkgRoot = getPkgRoot(pkgName)\n  const pkgPath = path.resolve(pkgRoot, 'package.json')\n  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))\n  if (pkg.private) {\n    return\n  }\n\n  // For now, all 3.x packages except \"vue\" can be published as\n  // `latest`, whereas \"vue\" will be published under the \"next\" tag.\n  let releaseTag = null\n  if (args.tag) {\n    releaseTag = args.tag\n  } else if (version.includes('alpha')) {\n    releaseTag = 'alpha'\n  } else if (version.includes('beta')) {\n    releaseTag = 'beta'\n  } else if (version.includes('rc')) {\n    releaseTag = 'rc'\n  } else if (pkgName === 'vue') {\n    // TODO remove when 3.x becomes default\n    releaseTag = 'next'\n  }\n\n  // TODO use inferred release channel after official 3.0 release\n  // const releaseTag = semver.prerelease(version)[0] || null\n\n  step(`Publishing ${pkgName}...`)\n  try {\n    await runIfNotDry(\n      'yarn',\n      [\n        'publish',\n        '--new-version',\n        version,\n        ...(releaseTag ? ['--tag', releaseTag] : []),\n        '--access',\n        'public'\n      ],\n      {\n        cwd: pkgRoot,\n        stdio: 'pipe'\n      }\n    )\n    console.log(chalk.green(`Successfully published ${pkgName}@${version}`))\n  } catch (e) {\n    if (e.stderr.match(/previously published/)) {\n      console.log(chalk.red(`Skipping already published: ${pkgName}`))\n    } else {\n      throw e\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"49-推送到-github",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#49-推送到-github",children:"#"}),"4.9 推送到 github"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// push to GitHub\nstep('\\nPushing to GitHub...')\n// 打 tag\nawait runIfNotDry('git', ['tag', `v${targetVersion}`])\n// 推送 tag\nawait runIfNotDry('git', ['push', 'origin', `refs/tags/v${targetVersion}`])\n// git push 所有改动到 远程  - github\nawait runIfNotDry('git', ['push'])\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// yarn run release --dry\n\n// 如果传了这个参数则输出 可以用 git diff 看看更改\n\n// const isDryRun = args.dry\nif (isDryRun) {\n  console.log(`\\nDry run finished - run git diff to see package changes.`)\n}\n\n// 如果 跳过的包，则输出以下这些包没有发布。不过代码 `skippedPackages` 里是没有包。\n// 所以这段代码也不会执行。\n// 我们习惯写 arr.length !== 0 其实 0 就是 false 。可以不写。\nif (skippedPackages.length) {\n  console.log(\n    chalk.yellow(\n      `The following packages are skipped and NOT published:\\n- ${skippedPackages.join(\n        '\\n- '\n      )}`\n    )\n  )\n}\nconsole.log()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们 ",(0,r.jsx)(n.code,{children:"yarn release --dry"}),"后，这块函数在终端输出的如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/b4f2e3a8-ef6d-49bf-b46b-9426012954d9.png",alt:"发布到github"})}),"\n",(0,r.jsxs)(n.p,{children:["到这里我们就拆解分析完 ",(0,r.jsx)(n.code,{children:"main"})," 函数了。"]}),"\n",(0,r.jsx)(n.p,{children:"整个流程很清晰。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"1. 确认要发布的版本\n2. 执行测试用例\n3. 更新所有包的版本号和内部 vue 相关依赖版本号\n    3.1 updatePackage 更新包的版本号\n    3.2 updateDeps 更新内部 vue 相关依赖的版本号\n4. 打包编译所有包\n5. 生成 changelog\n6. 提交代码\n7. 发布包\n8. 推送到 github\n"})}),"\n",(0,r.jsx)(n.p,{children:"用一张图总结则是："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://files.mdnice.com/user/625/2e7c8b98-6cb1-4ff3-8c2a-4160e3071d97.png",alt:"vue 发布流程"})}),"\n",(0,r.jsxs)(n.p,{children:["看完",(0,r.jsx)(n.code,{children:"vue-next/scripts/release.js"}),"，感兴趣还可以看",(0,r.jsx)(n.code,{children:"vue-next/scripts"}),"文件夹下其他代码，相对行数不多，但收益较大。"]}),"\n",(0,r.jsxs)(n.h2,{id:"5-总结",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-总结",children:"#"}),"5. 总结"]}),"\n",(0,r.jsx)(n.p,{children:"通过本文学习，我们学会了这些。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"1. 熟悉 vuejs 发布流程\n2. 学会调试 nodejs 代码\n3. 动手优化公司项目发布流程\n"})}),"\n",(0,r.jsxs)(n.p,{children:["同时建议自己动手用 ",(0,r.jsx)(n.code,{children:"VSCode"})," 多调试，在终端多执行几次，多理解消化。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"vuejs"}),"发布的文件很多代码我们可以直接复制粘贴修改，优化我们自己发布的流程。比如写小程序，相对可能发布频繁，完全可以使用这套代码，配合",(0,r.jsx)(n.a,{href:"https://developers.weixin.qq.com/miniprogram/dev/devtools/ci.html",rel:"noopener noreferrer",target:"_blank",children:"miniprogram-ci"}),"，再加上一些自定义，加以优化。"]}),"\n",(0,r.jsxs)(n.p,{children:["当然也可以用开源的 ",(0,r.jsx)(n.a,{href:"https://github.com/release-it/release-it",rel:"noopener noreferrer",target:"_blank",children:"release-it"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"同时，我们可以："}),"\n",(0,r.jsxs)(n.p,{children:["引入 ",(0,r.jsx)(n.a,{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",rel:"noopener noreferrer",target:"_blank",children:"git flow"}),"，管理",(0,r.jsx)(n.code,{children:"git"}),"分支。估计很多人不知道",(0,r.jsx)(n.code,{children:"windows"})," ",(0,r.jsx)(n.code,{children:"git bash"}),"已经默认支持 ",(0,r.jsx)(n.code,{children:"git flow"}),"命令。"]}),"\n",(0,r.jsxs)(n.p,{children:["引入 ",(0,r.jsx)(n.a,{href:"https://github.com/typicode/husky",rel:"noopener noreferrer",target:"_blank",children:"husky"})," 和 ",(0,r.jsx)(n.a,{href:"https://github.com/okonet/lint-staged",rel:"noopener noreferrer",target:"_blank",children:"lint-staged"})," 提交",(0,r.jsx)(n.code,{children:"commit"}),"时用",(0,r.jsx)(n.code,{children:"ESLint"}),"等校验代码提交是否能够通过检测。"]}),"\n",(0,r.jsxs)(n.p,{children:["引入 单元测试 ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/jest",rel:"noopener noreferrer",target:"_blank",children:"jest"}),"，测试关键的工具函数等。"]}),"\n",(0,r.jsxs)(n.p,{children:["引入 ",(0,r.jsx)(n.a,{href:"https://github.com/conventional-changelog/conventional-changelog",rel:"noopener noreferrer",target:"_blank",children:"conventional-changelog"})]}),"\n",(0,r.jsxs)(n.p,{children:["引入 ",(0,r.jsx)(n.a,{href:"https://github.com/streamich/git-cz",rel:"noopener noreferrer",target:"_blank",children:"git-cz"})," 交互式",(0,r.jsx)(n.code,{children:"git commit"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["等等规范自己项目的流程。如果一个候选人，通过看",(0,r.jsx)(n.code,{children:"vuejs"}),"发布的源码，积极主动优化自己项目。我觉得面试官会认为这个候选人比较加分。"]}),"\n",(0,r.jsx)(n.p,{children:"看开源项目源码的好处在于：一方面可以拓展视野，另外一方面可以为自己所用，收益相对较高。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(d,e)})):d(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["vue-next-release%2FREADME.zhihu.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-环境准备",text:"2. 环境准备",depth:2},{id:"21-严格校验使用-yarn-安装依赖",text:"2.1 严格校验使用 yarn 安装依赖",depth:3},{id:"22-调试--vue-nextscriptsreleasejs-文件",text:"2.2 调试  vue-next/scripts/release.js 文件",depth:3},{id:"3-文件开头的一些依赖引入和函数声明",text:"3 文件开头的一些依赖引入和函数声明",depth:2},{id:"31-第一部分",text:"3.1 第一部分",depth:3},{id:"311-minimist--命令行参数解析",text:"3.1.1 minimist  命令行参数解析",depth:4},{id:"312-chalk-终端多色彩输出",text:"3.1.2 chalk 终端多色彩输出",depth:4},{id:"313-semver--语义化版本",text:"3.1.3 semver  语义化版本",depth:4},{id:"314-enquirer-交互式询问-cli",text:"3.1.4 enquirer 交互式询问 CLI",depth:4},{id:"315-execa-执行命令",text:"3.1.5 execa 执行命令",depth:4},{id:"32-第二部分",text:"3.2 第二部分",depth:3},{id:"33-第三部分",text:"3.3 第三部分",depth:3},{id:"34-第四部分",text:"3.4 第四部分",depth:3},{id:"341-bin-函数",text:"3.4.1 bin 函数",depth:4},{id:"342-rundryrunrunifnotdry",text:"3.4.2 run、dryRun、runIfNotDry",depth:4},{id:"4-main-主流程",text:"4 main 主流程",depth:2},{id:"41-流程梳理-main-函数",text:"4.1 流程梳理 main 函数",depth:3},{id:"42-确认要发布的版本",text:"4.2 确认要发布的版本",depth:3},{id:"43-执行测试用例",text:"4.3 执行测试用例",depth:3},{id:"44-更新所有包的版本号和内部-vue-相关依赖版本号",text:"4.4 更新所有包的版本号和内部 vue 相关依赖版本号",depth:3},{id:"441-updatepackage-更新包的版本号",text:"4.4.1 updatePackage 更新包的版本号",depth:4},{id:"442-updatedeps-更新内部-vue-相关依赖的版本号",text:"4.4.2 updateDeps 更新内部 vue 相关依赖的版本号",depth:4},{id:"45-打包编译所有包",text:"4.5 打包编译所有包",depth:3},{id:"46-生成-changelog",text:"4.6 生成 changelog",depth:3},{id:"47-提交代码",text:"4.7 提交代码",depth:3},{id:"48-发布包",text:"4.8 发布包",depth:3},{id:"49-推送到-github",text:"4.9 推送到 github",depth:3},{id:"5-总结",text:"5. 总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}},20713:function(e,n,s){s.d(n,{Z:()=>l});var r=s(52676),a=s(75271),i=s(92815);s(18544);let c={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,s){let r=Object.keys(c).includes(n)?n:s;return c[r](e)}let l=e=>{let{defaultLocale:n="en-US"}=e,s=(0,i.Vi)().page.readingTimeData,c=(0,i.Jr)(),l=(0,i.e7)(),[t,h]=(0,a.useState)(d(s,c,n));return(0,a.useEffect)(()=>{h(d(s,c,n))},[c,s]),(0,r.jsx)("span",{"data-dark":String(l),className:"rp-reading-time",children:t})}}}]);