"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["4273"],{14645:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var t=r(52676),s=r(40453),a=r(20713);let c=r.p+"static/image/taro-cli-npm-dist-tag.d3cb44d5.png",i=r.p+"static/image/taro-init-gif-high.8fe48ff0.gif",o=r.p+"static/image/taro-init-debugger.ba7cea95.png",l=r.p+"static/image/taro-init-0.2660ef9c.png",d=r.p+"static/image/taro-init-debugger-create.20d00c30.png",h=r.p+"static/image/taro-init-1.d1c83be3.png",p=r.p+"static/image/templates.71a37c85.png",j=r.p+"static/image/taro-init-debugger-write.a5eeea3b.png",m=r.p+"static/image/taro-init-debugger-rust.cbc90de8.png",x=r.p+"static/image/taro-init-2.bf0f5ca8.png",u=r.p+"static/image/handlebars-render.7242bdce.png",f=r.p+"static/image/taro-init.66d63ac9.png";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",input:"input",pre:"pre",blockquote:"blockquote",img:"img",h3:"h3",h4:"h4",strong:"strong",ol:"ol",hr:"hr"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"taro-源码揭秘3-每次创建新的-taro-项目taro-init的背后原理是什么",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#taro-源码揭秘3-每次创建新的-taro-项目taro-init的背后原理是什么",children:"#"}),"Taro 源码揭秘：3. 每次创建新的 taro 项目（taro init）的背后原理是什么"]}),"\n",(0,t.jsx)(a.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsxs)(n.h2,{id:"1-前言",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,t.jsxs)(n.p,{children:["大家好，我是",(0,t.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"，欢迎关注我的",(0,t.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。从 2021 年 8 月起，我持续组织了好几年的",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]}),"\n",(0,t.jsxs)(n.p,{children:["截至目前（",(0,t.jsx)(n.code,{children:"2024-07-17"}),"），",(0,t.jsx)(n.code,{children:"taro"})," 正式版是 ",(0,t.jsx)(n.code,{children:"3.6.34"}),"，",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7330792655125463067",rel:"noopener noreferrer",target:"_blank",children:"Taro 4.0 Beta 发布：支持开发鸿蒙应用、小程序编译模式、Vite 编译等"}),"。文章提到将于 2024 年第二季度，发布 ",(0,t.jsx)(n.code,{children:"4.x"}),"。目前已经发布 ",(0,t.jsx)(n.code,{children:"4.x"}),"。所以我们直接学习 ",(0,t.jsx)(n.code,{children:"main"})," 分支最新版本是 ",(0,t.jsx)(n.code,{children:"4.0.2"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["计划写一个 Taro 源码揭秘系列，博客地址：",(0,t.jsx)(n.a,{href:"https://ruochuan12.github.io/taro",rel:"noopener noreferrer",target:"_blank",children:"https://ruochuan12.github.io/taro"})," 可以加入书签，持续关注",(0,t.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。"]}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178",rel:"noopener noreferrer",target:"_blank",children:"1. 揭开整个架构的入口 CLI => taro init 初始化项目的秘密"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7380195796208205824",rel:"noopener noreferrer",target:"_blank",children:"2. 揭开整个架构的插件系统的秘密"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7390335741586931738",rel:"noopener noreferrer",target:"_blank",children:"3. 每次创建新的 taro 项目（taro init）的背后原理是什么"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7403193330271682612",rel:"noopener noreferrer",target:"_blank",children:"4. 每次 npm run dev:weapp 开发小程序，build 编译打包是如何实现的？"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7403915119448915977",rel:"noopener noreferrer",target:"_blank",children:"5. 高手都在用的发布订阅机制 Events 在 Taro 中是如何实现的？"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7407648740926291968",rel:"noopener noreferrer",target:"_blank",children:"6. 为什么通过 Taro.xxx 能调用各个小程序平台的 API，如何设计实现的?"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7415911762128797696",rel:"noopener noreferrer",target:"_blank",children:"7. Taro.request 和请求响应拦截器是如何实现的"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7434175547784020031",rel:"noopener noreferrer",target:"_blank",children:"8. Taro 是如何使用 webpack 打包构建小程序的？"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7439743635161710604",rel:"noopener noreferrer",target:"_blank",children:"9. Taro 是如何生成 webpack 配置进行构建小程序的？"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7452329275561279529",rel:"noopener noreferrer",target:"_blank",children:"10. Taro 到底是怎样转换成小程序文件的？"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","等等"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"学完本文，你将学到："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"1. taro init 初始化项目，背后原理是什么？\n2. 如何调试 taro cli init 源码\n3. nodejs 如何调用 rust 代码？\n4. 如何调试 rust 代码\n5. 如何使用 handlebars 模板引擎\n等等\n"})}),"\n",(0,t.jsxs)(n.p,{children:["关于克隆项目、环境准备、如何调试代码等，参考",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178#heading-1",rel:"noopener noreferrer",target:"_blank",children:"第一篇文章-准备工作、调试"}),"。后续文章基本不再过多赘述。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"文章中基本是先放源码，源码中不做过多解释。源码后面再做简单讲述。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["众所周知，我们最开始初始化项目时都是使用 ",(0,t.jsx)(n.code,{children:"taro init"})," 命令，本文我们继续来学习这个命令是如何实现的。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们可以通过 ",(0,t.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v6/commands/npm-dist-tag",rel:"noopener noreferrer",target:"_blank",children:"npm-dist-tag 文档"})," 命令来查看 ",(0,t.jsx)(n.code,{children:"@tarojs/cli"})," 包的所有 ",(0,t.jsx)(n.code,{children:"tag"})," 版本。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm dist-tag @tarojs/cli\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如图所示：\n",(0,t.jsx)(n.img,{alt:"npm dist-tag @tarojs/cli",src:c})]}),"\n",(0,t.jsxs)(n.p,{children:["目前 ",(0,t.jsx)(n.code,{children:"latest"})," 标签（默认版本）是 ",(0,t.jsx)(n.code,{children:"3.6.34"}),"，",(0,t.jsx)(n.code,{children:"next"})," 标签是 ",(0,t.jsx)(n.code,{children:"4.0.0"}),"。后续 ",(0,t.jsx)(n.code,{children:"latest"})," 标签会设置为 ",(0,t.jsx)(n.code,{children:"4.x"})," 版本。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们先用 ",(0,t.jsx)(n.code,{children:"@tarojs/cli@next"})," 初始化一个项目看看。全局安装相对麻烦，我们不全局安装，使用 ",(0,t.jsx)(n.code,{children:"npx"})," 来运行 ",(0,t.jsx)(n.code,{children:"next tag"})," 版本。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx @tarojs/cli@next init taro4-next\n"})}),"\n",(0,t.jsxs)(n.p,{children:["这个初始化完整的过程，我用 ",(0,t.jsx)(n.a,{href:"https://giphy.com/apps/giphycapture",rel:"noopener noreferrer",target:"_blank",children:"GIPHY CAPTURE"})," 工具录制了一个",(0,t.jsx)(n.code,{children:"gif"}),"，如下图所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"gif",src:i})}),"\n",(0,t.jsxs)(n.p,{children:["我们接下来就是一步步来分析这个 ",(0,t.jsx)(n.code,{children:"gif"})," 中的每一个步骤的实现原理。"]}),"\n",(0,t.jsxs)(n.h2,{id:"2-调试-taro-init",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-调试-taro-init",children:"#"}),"2. 调试 taro init"]}),"\n",(0,t.jsxs)(n.p,{children:["我们在 ",(0,t.jsx)(n.code,{children:".vscode/launch.json"})," 中的原有的 ",(0,t.jsx)(n.code,{children:"CLI debug"})," 命令行调试配置，添加 ",(0,t.jsx)(n.code,{children:"init"})," 配置如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",meta:"diff",children:'// .vscode/launch.json\n{\n  "version": "0.2.0",\n  "configurations": [{\n      "type": "node",\n      "request": "launch",\n      "name": "CLI debug",\n      "program": "${workspaceFolder}/packages/taro-cli/bin/taro",\n+     "console": "integratedTerminal",\n+     "args": [\n+       "init",\n+       "taro-init-test",\n+     ],\n      // 省略若干代码...\n      "skipFiles": ["<node_internals>/**"]\n    }]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["其中 ",(0,t.jsx)(n.code,{children:'"console": "integratedTerminal",'})," 配置是为了在调试时，可以在终端输入和交互。"]}),"\n",(0,t.jsxs)(n.h2,{id:"3-init-命令行-fn-函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-init-命令行-fn-函数",children:"#"}),"3. init 命令行 fn 函数"]}),"\n",(0,t.jsxs)(n.p,{children:["根据前面两篇 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178",rel:"noopener noreferrer",target:"_blank",children:"1. taro cli init"}),"、",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7380195796208205824",rel:"noopener noreferrer",target:"_blank",children:"2. taro 插件机制"})," 文章，我们可以得知：",(0,t.jsx)(n.code,{children:"taro init"})," 初始化命令，最终调用的是 ",(0,t.jsx)(n.code,{children:"packages/taro-cli/src/presets/commands/init.ts"})," 文件中的 ",(0,t.jsx)(n.code,{children:"ctx.registerCommand"})," 注册的 ",(0,t.jsx)(n.code,{children:"init"})," 命令行的 ",(0,t.jsx)(n.code,{children:"fn"})," 函数。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/presets/commands/init.ts\nimport type { IPluginContext } from '@tarojs/service'\n\nexport default (ctx: IPluginContext) => {\n  ctx.registerCommand({\n    name: 'init',\n    optionsMap: {\n      '--name [name]': '项目名称',\n      '--description [description]': '项目介绍',\n      '--typescript': '使用TypeScript',\n      '--npm [npm]': '包管理工具',\n      '--template-source [templateSource]': '项目模板源',\n      '--clone [clone]': '拉取远程模板时使用git clone',\n      '--template [template]': '项目模板',\n      '--css [css]': 'CSS预处理器(sass/less/stylus/none)',\n      '-h, --help': 'output usage information'\n    },\n    async fn (opts) {\n      // init project\n      const { appPath } = ctx.paths\n      const { options } = opts\n      const { projectName, templateSource, clone, template, description, typescript, css, npm, framework, compiler, hideDefaultTemplate } = options\n      const Project = require('../../create/project').default\n      const project = new Project({\n		// 省略若干参数...\n      })\n\n      project.create()\n    }\n  })\n}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"fn"})," 函数，其中 ",(0,t.jsx)(n.code,{children:"options"})," 参数是 ",(0,t.jsx)(n.code,{children:"init"})," 命令行中的所有参数。\n主要做了如下几件事："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["读取组合各种参数，初始化 ",(0,t.jsx)(n.code,{children:"project"})," 对象，并调用 ",(0,t.jsx)(n.code,{children:"create"})," 方法。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["我们重点来看 ",(0,t.jsx)(n.code,{children:"packages/taro-cli/src/create/project.ts"})," 的 ",(0,t.jsx)(n.code,{children:"Project"})," 类的实现，和 ",(0,t.jsx)(n.code,{children:"create"})," 方法。"]}),"\n",(0,t.jsxs)(n.h2,{id:"4-new-project-构造函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-new-project-构造函数",children:"#"}),"4. new Project 构造函数"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nexport default class Project extends Creator {\n  public rootPath: string\n  public conf: IProjectConfOptions\n\n  constructor (options: IProjectConfOptions) {\n    super(options.sourceRoot)\n    const unSupportedVer = semver.lt(process.version, 'v18.0.0')\n    if (unSupportedVer) {\n      throw new Error('Node.js 版本过低，推荐升级 Node.js 至 v18.0.0+')\n    }\n    this.rootPath = this._rootPath\n\n    this.conf = Object.assign(\n      {\n        projectName: '',\n        projectDir: '',\n        template: '',\n        description: '',\n        npm: ''\n      },\n      options\n    )\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Project"})," 继承了 ",(0,t.jsx)(n.code,{children:"Creator"})," 类。"]}),"\n",(0,t.jsxs)(n.p,{children:["构造函数中，使用 ",(0,t.jsx)(n.code,{children:"semver.lt"})," 判断当前 ",(0,t.jsx)(n.code,{children:"node"})," 版本是否低于 ",(0,t.jsx)(n.code,{children:"v18.0.0"}),"，如果低于则报错。\n",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/semver",rel:"noopener noreferrer",target:"_blank",children:"semver"})," 是一个版本号比较库，可以用来判断 ",(0,t.jsx)(n.code,{children:"node"})," 版本是否符合要求。"]}),"\n",(0,t.jsxs)(n.p,{children:["其次就是初始化 ",(0,t.jsx)(n.code,{children:"this.rootPath"})," 和 ",(0,t.jsx)(n.code,{children:"this.conf"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们继续来看 ",(0,t.jsx)(n.code,{children:"Creator"})," 类，构造函数中调用了 ",(0,t.jsx)(n.code,{children:"init"})," 方法。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/creator.ts\nexport default class Creator {\n  protected _rootPath: string\n  public rootPath: string\n\n  constructor (sourceRoot?: string) {\n    this.rootPath = this.sourceRoot(sourceRoot || path.join(getRootPath()))\n    this.init()\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["所以继续来看 ",(0,t.jsx)(n.code,{children:"init"})," 方法。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\ninit () {\n    clearConsole()\n    console.log(chalk.green('Taro 即将创建一个新项目!'))\n    console.log(`Need help? Go and open issue: ${chalk.blueBright('https://tls.jd.com/taro-issue-helper')}`)\n    console.log()\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["调试截图如下：\n",(0,t.jsx)(n.img,{alt:"调试截图",src:o})]}),"\n",(0,t.jsxs)(n.p,{children:["输出就是这个图：\n",(0,t.jsx)(n.img,{alt:"初始化",src:l})]}),"\n",(0,t.jsxs)(n.p,{children:["其中",(0,t.jsx)(n.code,{children:"\uD83D\uDC7D Taro v4.0.0"})," 输出的是 ",(0,t.jsx)(n.code,{children:"tarojs-cli/package.json"})," 的版本，",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178#heading-6",rel:"noopener noreferrer",target:"_blank",children:"第一篇文章 4. taro-cli/src/utils/index.ts"})," 中有详细讲述，这里就不再赘述了。"]}),"\n",(0,t.jsxs)(n.p,{children:["输出",(0,t.jsx)(n.code,{children:"获取 taro 全局配置成功"}),"是指获取 ",(0,t.jsx)(n.code,{children:"~/.taro-global-config/index.json"})," 文件的插件集 ",(0,t.jsx)(n.code,{children:"presets"})," 和插件 ",(0,t.jsx)(n.code,{children:"plugins"}),"。",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178#heading-12",rel:"noopener noreferrer",target:"_blank",children:"第一篇文章 6.2.2 config.initGlobalConfig 初始化全局配置"}),"中有详细讲述，",(0,t.jsx)(n.code,{children:"spinner.succeed('获取 taro 全局配置成功')"})," 这里就不再赘述了。"]}),"\n",(0,t.jsxs)(n.p,{children:["看完了 ",(0,t.jsx)(n.code,{children:"Project"})," 构造函数，我们来看 ",(0,t.jsx)(n.code,{children:"Project"})," 类的 ",(0,t.jsx)(n.code,{children:"create"})," 方法。"]}),"\n",(0,t.jsxs)(n.h3,{id:"41-projectcreate-创建项目",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-projectcreate-创建项目",children:"#"}),"4.1 project.create 创建项目"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nasync create () {\n	try {\n		const answers = await this.ask()\n		const date = new Date()\n		this.conf = Object.assign(this.conf, answers)\n		this.conf.date = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n		this.write()\n	} catch (error) {\n		console.log(chalk.red('创建项目失败: ', error))\n	}\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"create"})," 函数主要做了以下几件事："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["调用 ",(0,t.jsx)(n.code,{children:"ask"})," 询问用户输入项目名称、描述、CSS预处理器、包管理工具等。"]}),"\n",(0,t.jsxs)(n.li,{children:["把用户反馈的结果和之前的配置合并起来，得到 ",(0,t.jsx)(n.code,{children:"this.conf"}),"。"]}),"\n",(0,t.jsxs)(n.li,{children:["调用 ",(0,t.jsx)(n.code,{children:"write"})," 方法，写入文件，初始化模板项目。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"调试截图如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"create",src:d})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"this.conf"})," 参数结果如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const conf = {\n  projectName: "taro-init-test",\n  projectDir: "/Users/ruochuan/git-source/github/taro",\n  template: "default",\n  description: "taro",\n  npm: "Yarn",\n  templateSource: "direct:https://gitee.com/o2team/taro-project-templates.git#v4.0",\n  clone: false,\n  typescript: true,\n  framework: "React",\n  compiler: "Webpack5",\n  hideDefaultTemplate: undefined,\n  css: "Sass",\n  date: "2024-7-12",\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["我们来看 ",(0,t.jsx)(n.code,{children:"ask"})," 方法。"]}),"\n",(0,t.jsxs)(n.h2,{id:"5-ask-询问用户输入项目名称描述等",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-ask-询问用户输入项目名称描述等",children:"#"}),"5. ask 询问用户输入项目名称、描述等"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nasync ask () {\n    let prompts: Record<string, unknown>[] = []\n    const conf = this.conf\n\n    this.askProjectName(conf, prompts)\n    this.askDescription(conf, prompts)\n    this.askFramework(conf, prompts)\n    this.askTypescript(conf, prompts)\n    this.askCSS(conf, prompts)\n    this.askCompiler(conf, prompts)\n    this.askNpm(conf, prompts)\n    await this.askTemplateSource(conf, prompts)\n\n    const answers = await inquirer.prompt<IProjectConf>(prompts)\n\n    prompts = []\n    const templates = await this.fetchTemplates(answers)\n    await this.askTemplate(conf, prompts, templates)\n    const templateChoiceAnswer = await inquirer.prompt<IProjectConf>(prompts)\n\n    return {\n      ...answers,\n      ...templateChoiceAnswer\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["简单来说 ",(0,t.jsx)(n.code,{children:"ask"})," 方法就是一系列的 ",(0,t.jsx)(n.code,{children:"inquirer"})," 交互。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/inquirer",rel:"noopener noreferrer",target:"_blank",children:(0,t.jsx)(n.code,{children:"inquirer"})})," 是一个命令行交互库，可以用来创建命令行程序。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如果参数中没指定相应参数，那么就询问："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"项目名称"}),"\n",(0,t.jsx)(n.li,{children:"项目介绍"}),"\n",(0,t.jsxs)(n.li,{children:["选择框架（",(0,t.jsx)(n.code,{children:"React、PReact、Vue3、Solid"}),"）"]}),"\n",(0,t.jsx)(n.li,{children:"是否启用TS"}),"\n",(0,t.jsxs)(n.li,{children:["CSS预处理器（",(0,t.jsx)(n.code,{children:"Sass、less、Stylus、无等"}),"）"]}),"\n",(0,t.jsxs)(n.li,{children:["编译工具（",(0,t.jsx)(n.code,{children:"webpack、vite"}),"）"]}),"\n",(0,t.jsxs)(n.li,{children:["包管理工具（",(0,t.jsx)(n.code,{children:"npm、yarn、pnpm"}),"）"]}),"\n",(0,t.jsxs)(n.li,{children:["选择模板源（",(0,t.jsx)(n.code,{children:"gitee最快、github最新、CLI 内置模板等"}),"）"]}),"\n",(0,t.jsxs)(n.li,{children:["选择模板（",(0,t.jsx)(n.code,{children:"默认模板等"}),"）"]}),"\n",(0,t.jsx)(n.li,{children:"等等"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["如图所示：\n",(0,t.jsx)(n.img,{alt:"初始化",src:h})]}),"\n",(0,t.jsx)(n.p,{children:"我们重点讲述以下几个方法"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"askProjectName"})," 询问项目名称"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"askTemplateSource"})," 询问模板源"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fetchTemplates"})," 获取模板列表"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"askTemplate"})," 询问模板"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["我们来看第一个 ",(0,t.jsx)(n.code,{children:"askProjectName"})," 方法。"]}),"\n",(0,t.jsxs)(n.h3,{id:"51-askprojectname-询问项目名称",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-askprojectname-询问项目名称",children:"#"}),"5.1 askProjectName 询问项目名称"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"askProjectName: AskMethods = function (conf, prompts) {\n    if ((typeof conf.projectName) !== 'string') {\n      prompts.push({\n        type: 'input',\n        name: 'projectName',\n        message: '请输入项目名称！',\n        validate (input) {\n          if (!input) {\n            return '项目名不能为空！'\n          }\n          if (fs.existsSync(input)) {\n            return '当前目录已经存在同名项目，请换一个项目名！'\n          }\n          return true\n        }\n      })\n    } else if (fs.existsSync(conf.projectName!)) {\n      prompts.push({\n        type: 'input',\n        name: 'projectName',\n        message: '当前目录已经存在同名项目，请换一个项目名！',\n        validate (input) {\n          if (!input) {\n            return '项目名不能为空！'\n          }\n          if (fs.existsSync(input)) {\n            return '项目名依然重复！'\n          }\n          return true\n        }\n      })\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["后面的 ",(0,t.jsx)(n.code,{children:"askDescription"}),"、",(0,t.jsx)(n.code,{children:"askFramework"}),"、",(0,t.jsx)(n.code,{children:"askFramework"}),"、",(0,t.jsx)(n.code,{children:"askTypescript"}),"、",(0,t.jsx)(n.code,{children:"askCSS"}),"、",(0,t.jsx)(n.code,{children:"askCompiler"}),"、",(0,t.jsx)(n.code,{children:"askNpm"}),"，都是类似方法，就不再赘述了。"]}),"\n",(0,t.jsxs)(n.h3,{id:"52-asktemplatesource-询问模板源",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-asktemplatesource-询问模板源",children:"#"}),"5.2 askTemplateSource 询问模板源"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nimport {\n  chalk,\n  DEFAULT_TEMPLATE_SRC,\n  DEFAULT_TEMPLATE_SRC_GITEE,\n  fs,\n  getUserHomeDir,\n  SOURCE_DIR,\n  TARO_BASE_CONFIG,\n  TARO_CONFIG_FOLDER\n} from '@tarojs/helper'\n"})}),"\n",(0,t.jsx)(n.p,{children:"导出的就是这些常量。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-helper/src/constants.ts\nexport const DEFAULT_TEMPLATE_SRC = 'github:NervJS/taro-project-templates#v4.0'\nexport const DEFAULT_TEMPLATE_SRC_GITEE = 'direct:https://gitee.com/o2team/taro-project-templates.git#v4.0'\nexport const TARO_CONFIG_FOLDER = '.taro3.7'\nexport const TARO_BASE_CONFIG = 'index.json'\nexport const TARO_GLOBAL_CONFIG_DIR = '.taro-global-config'\nexport const TARO_GLOBAL_CONFIG_FILE = 'index.json'\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\naskTemplateSource: AskMethods = async function (conf, prompts) {\n    if (conf.template === 'default' || conf.templateSource) return\n\n    const homedir = getUserHomeDir()\n    const taroConfigPath = path.join(homedir, TARO_CONFIG_FOLDER)\n    const taroConfig = path.join(taroConfigPath, TARO_BASE_CONFIG)\n\n    let localTemplateSource: string\n\n    // 检查本地配置\n    if (fs.existsSync(taroConfig)) {\n      // 存在则把模板源读出来\n      const config = await fs.readJSON(taroConfig)\n      localTemplateSource = config?.templateSource\n    } else {\n      // 不存在则创建配置\n      await fs.createFile(taroConfig)\n      await fs.writeJSON(taroConfig, { templateSource: DEFAULT_TEMPLATE_SRC })\n      localTemplateSource = DEFAULT_TEMPLATE_SRC\n    }\n	const choices = [\n		// 省略，拆分放到下方\n	];\n	if (localTemplateSource && localTemplateSource !== DEFAULT_TEMPLATE_SRC && localTemplateSource !== DEFAULT_TEMPLATE_SRC_GITEE) {\n      choices.unshift({\n        name: `本地模板源：${localTemplateSource}`,\n        value: localTemplateSource\n      })\n    }\n	// 省略部分代码，拆分放到下方\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"简单来说："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["就是判断本地是否存在配置 ",(0,t.jsx)(n.code,{children:"~/.taro3.7/index.json"}),"，如果存在则读取模板源，如果不存在则创建配置。创建配置时，默认模板源为 ",(0,t.jsx)(n.a,{href:"https://github.com/NervJS/taro-project-templates/tree/v4.0",rel:"noopener noreferrer",target:"_blank",children:"github:NervJS/taro-project-templates#v4.0"}),"。"]}),"\n",(0,t.jsx)(n.li,{children:"另外，如果本地模板源不是默认模板源，那么就把本地模板源作为选项，放在最前面，供用户选择。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["其中，",(0,t.jsx)(n.code,{children:"~/.taro3.7/index.json"})," 内容格式如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// ~/.taro3.7/index.json\n{\n    "remoteSchemaUrl": "https://raw.githubusercontent.com/NervJS/taro-doctor/main/assets/config_schema.json",\n    "useRemoteSchema": true\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nconst choices = [\n  {\n    name: 'Gitee（最快）',\n    value: DEFAULT_TEMPLATE_SRC_GITEE\n  },\n  {\n    name: 'Github（最新）',\n    value: DEFAULT_TEMPLATE_SRC\n  },\n  {\n    name: 'CLI 内置默认模板',\n    value: 'default-template'\n  },\n  {\n    name: '自定义',\n    value: 'self-input'\n  },\n  {\n    name: '社区优质模板源',\n    value: 'open-source'\n  }\n]\n\n// 省略部分代码本地模板源的判断，在上方已经展示。\n\nprompts.push({\n  type: 'list',\n  name: 'templateSource',\n  message: '请选择模板源',\n  choices\n}, {\n  type: 'input',\n  name: 'templateSource',\n  message: '请输入模板源！',\n  askAnswered: true,\n  when (answers) {\n    return answers.templateSource === 'self-input'\n  }\n}, {\n  type: 'list',\n  name: 'templateSource',\n  message: '请选择社区模板源',\n  async choices (answers) {\n    const choices = await getOpenSourceTemplates(answers.framework)\n    return choices\n  },\n  askAnswered: true,\n  when (answers) {\n    return answers.templateSource === 'open-source'\n  }\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nasync ask () {\n	// 省略上半部分代码\n	const answers = await inquirer.prompt<IProjectConf>(prompts)\n\n    prompts = []\n    const templates = await this.fetchTemplates(answers)\n    await this.askTemplate(conf, prompts, templates)\n    const templateChoiceAnswer = await inquirer.prompt<IProjectConf>(prompts)\n\n    return {\n      ...answers,\n      ...templateChoiceAnswer\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们继续来看 ",(0,t.jsx)(n.code,{children:"fetchTemplates"})," 函数："]}),"\n",(0,t.jsxs)(n.h3,{id:"53-fetchtemplates-获取模板列表",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-fetchtemplates-获取模板列表",children:"#"}),"5.3 fetchTemplates 获取模板列表"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nasync fetchTemplates (answers: IProjectConf): Promise<ITemplates[]> {\n  const { templateSource, framework, compiler } = answers\n  this.conf.framework = this.conf.framework || framework || ''\n  this.conf.templateSource = this.conf.templateSource || templateSource\n\n  // 使用默认模版\n  if (answers.templateSource === 'default-template') {\n    this.conf.template = 'default'\n    answers.templateSource = DEFAULT_TEMPLATE_SRC_GITEE\n  }\n  if (this.conf.template === 'default' || answers.templateSource === NONE_AVAILABLE_TEMPLATE) return Promise.resolve([])\n\n  // 从模板源下载模板\n  const isClone = /gitee/.test(this.conf.templateSource) || this.conf.clone\n  const templateChoices = await fetchTemplate(this.conf.templateSource, this.templatePath(''), isClone)\n\n  const filterFramework = (_framework) => {\n    const current = this.conf.framework?.toLowerCase()\n\n    if (typeof _framework === 'string' && _framework) {\n      return current === _framework.toLowerCase()\n    } else if (isArray(_framework)) {\n      return _framework?.map(name => name.toLowerCase()).includes(current)\n    } else {\n      return true\n    }\n  }\n\n  const filterCompiler = (_compiler) => {\n    if (_compiler && isArray(_compiler)) {\n      return _compiler?.includes(compiler)\n    }\n    return true\n  }\n\n  // 根据用户选择的框架筛选模板\n  const newTemplateChoices: ITemplates[] = templateChoices\n    .filter(templateChoice => {\n      const { platforms, compiler } = templateChoice\n      return filterFramework(platforms) && filterCompiler(compiler)\n    })\n\n  return newTemplateChoices\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们继续来看 ",(0,t.jsx)(n.code,{children:"fetchTemplate"})," 函数，它主要做了以下几件事情："]}),"\n",(0,t.jsxs)(n.h4,{id:"531-fetchtemplate-获取模板",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#531-fetchtemplate-获取模板",children:"#"}),"5.3.1 fetchTemplate 获取模板"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/fetchTemplate.ts\nimport * as path from 'node:path'\n\nimport { chalk, fs } from '@tarojs/helper'\nimport * as AdmZip from 'adm-zip'\nimport axios from 'axios'\nimport * as download from 'download-git-repo'\nimport * as ora from 'ora'\n\nimport { getTemplateSourceType, readDirWithFileTypes } from '../util'\nimport { TEMPLATE_CREATOR } from './constants'\n\nexport interface ITemplates {\n  name: string\n  value: string\n  platforms?: string | string[]\n  desc?: string\n  compiler?: string[]\n}\n\nconst TEMP_DOWNLOAD_FOLDER = 'taro-temp'\n\nexport default function fetchTemplate (templateSource: string, templateRootPath: string, clone?: boolean): Promise<ITemplates[]> {\n  const type = getTemplateSourceType(templateSource)\n  const tempPath = path.join(templateRootPath, TEMP_DOWNLOAD_FOLDER)\n  let name: string\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise<void>(async (resolve) => {\n    // 下载文件的缓存目录\n    if (fs.existsSync(tempPath)) await fs.remove(tempPath)\n    await fs.mkdir(tempPath)\n\n    const spinner = ora(`正在从 ${templateSource} 拉取远程模板...`).start()\n\n    if (type === 'git') {\n      name = path.basename(templateSource)\n      download(templateSource, path.join(tempPath, name), { clone }, async error => {\n        if (error) {\n          console.log(error)\n          spinner.color = 'red'\n          spinner.fail(chalk.red('拉取远程模板仓库失败！'))\n          await fs.remove(tempPath)\n          return resolve()\n        }\n        spinner.color = 'green'\n        spinner.succeed(`${chalk.grey('拉取远程模板仓库成功！')}`)\n        resolve()\n      })\n    } else if (type === 'url') {\n      // 省略这部分代码...\n	  // 如果是 `url` 则用 `axios` 下载\n    }\n  }).then(async () => {\n    // 拆解到下方讲述\n  })\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"这个方法主要做了以下几件事情："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["判断模板来源地址是 ",(0,t.jsx)(n.code,{children:"git"})," 类型，那么使用 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/download-git-repo",rel:"noopener noreferrer",target:"_blank",children:"download-git-repo"})," 下载远程仓库到本地。"]}),"\n",(0,t.jsxs)(n.li,{children:["判断模板来源地址是 ",(0,t.jsx)(n.code,{children:"git"})," 类型，那么则用 ",(0,t.jsx)(n.code,{children:"axios"})," 下载。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"then 部分"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/fetchTemplate.ts\n// then 部分\nconst templateFolder = name ? path.join(tempPath, name) : ''\n\n// 下载失败，只显示默认模板\nif (!fs.existsSync(templateFolder)) return Promise.resolve([])\n\nconst isTemplateGroup = !(\n  fs.existsSync(path.join(templateFolder, 'package.json')) ||\n  fs.existsSync(path.join(templateFolder, 'package.json.tmpl'))\n)\n\nif (isTemplateGroup) {\n  // 模板组\n  const files = readDirWithFileTypes(templateFolder)\n    .filter(file => !file.name.startsWith('.') && file.isDirectory && file.name !== '__MACOSX')\n    .map(file => file.name)\n  await Promise.all(\n    files.map(file => {\n      const src = path.join(templateFolder, file)\n      const dest = path.join(templateRootPath, file)\n      return fs.move(src, dest, { overwrite: true })\n    })\n  )\n  await fs.remove(tempPath)\n\n  const res: ITemplates[] = files.map(name => {\n    const creatorFile = path.join(templateRootPath, name, TEMPLATE_CREATOR)\n\n    if (!fs.existsSync(creatorFile)) return { name, value: name }\n    const { name: displayName, platforms = '', desc = '', compiler } = require(creatorFile)\n\n    return {\n      name: displayName || name,\n      value: name,\n      platforms,\n      compiler,\n      desc\n    }\n  })\n  return Promise.resolve(res)\n} else {\n  // 单模板\n  // 省略这部分代码，单模版和模板组逻辑基本一致，只是一个是多个一个是单个\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这段代码主要做了以下几件事情："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["判断是否是模板组，如果是模板组，则遍历 ",(0,t.jsx)(n.code,{children:"packages/taro-cli/templates/taro-temp"})," 文件夹下的所有文件夹，并移动到 ",(0,t.jsx)(n.code,{children:"packages/taro-cli"})," 目录下的 ",(0,t.jsx)(n.code,{children:"templates"})," 文件夹。"]}),"\n",(0,t.jsxs)(n.li,{children:["不是模板组，则直接移动到 ",(0,t.jsx)(n.code,{children:"packages/taro-cli/templates/taro-temp"})," 目录下单个模板到 ",(0,t.jsx)(n.code,{children:"templates"})," 文件夹。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"用一张图来展示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"合并",src:p})}),"\n",(0,t.jsxs)(n.h3,{id:"54-asktemplate-询问用户选择模板",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-asktemplate-询问用户选择模板",children:"#"}),"5.4 askTemplate 询问用户选择模板"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"askTemplate: AskMethods = function (conf, prompts, list = []) {\n    const choices = list.map(item => ({\n      name: item.desc ? `${item.name}（${item.desc}）` : item.name,\n      value: item.value || item.name\n    }))\n\n    if (!conf.hideDefaultTemplate) {\n      choices.unshift({\n        name: '默认模板',\n        value: 'default'\n      })\n    }\n\n    if ((typeof conf.template as 'string' | undefined) !== 'string') {\n      prompts.push({\n        type: 'list',\n        name: 'template',\n        message: '请选择模板',\n        choices\n      })\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"6-write-写入项目",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-write-写入项目",children:"#"}),"6. write 写入项目"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nwrite (cb?: () => void) {\n    this.conf.src = SOURCE_DIR\n    const { projectName, projectDir, template, autoInstall = true, framework, npm } = this.conf as IProjectConf\n    // 引入模板编写者的自定义逻辑\n	// taro/packages/taro-cli/templates/default\n    const templatePath = this.templatePath(template)\n	// taro/packages/taro-cli/templates/default/template_creator.js\n    const handlerPath = path.join(templatePath, TEMPLATE_CREATOR)\n    const handler = fs.existsSync(handlerPath) ? require(handlerPath).handler : {}\n    createProject({\n      projectRoot: projectDir,\n      projectName,\n      template,\n      npm,\n      framework,\n      css: this.conf.css || CSSType.None,\n      autoInstall: autoInstall,\n      templateRoot: getRootPath(),\n      version: getPkgVersion(),\n      typescript: this.conf.typescript,\n      date: this.conf.date,\n      description: this.conf.description,\n      compiler: this.conf.compiler,\n      period: PeriodType.CreateAPP,\n    }, handler).then(() => {\n      cb && cb()\n    })\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"write"})," 函数主要做了以下几件事情："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"获取用户输入的参数，包括项目名称、项目目录、模板名称等。"}),"\n",(0,t.jsx)(n.li,{children:"引入模板编写者的自定义逻辑。"}),"\n",(0,t.jsxs)(n.li,{children:["调用 ",(0,t.jsx)(n.code,{children:"createProject"})," 函数，传入用户输入的参数和模板编写者的自定义逻辑。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"调试截图"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"write",src:j})}),"\n",(0,t.jsxs)(n.h3,{id:"61-template_creatorjs-默认模板中创建模板的自定义逻辑",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-template_creatorjs-默认模板中创建模板的自定义逻辑",children:"#"}),"6.1 template_creator.js 默认模板中创建模板的自定义逻辑"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/templates/default/template_creator.js\nconst path = require('path')\n\nfunction createWhenTs (err, params) {\n  return !!params.typescript\n}\n\nfunction normalizePath (path) {\n  return path.replace(/\\\\/g, '/').replace(/\\/{2,}/g, '/')\n}\n\nconst SOURCE_ENTRY = '/src'\nconst PAGES_ENTRY = '/src/pages'\n\nconst handler = {\n  '/tsconfig.json': createWhenTs,\n  '/types/global.d.ts': createWhenTs,\n  '/types/vue.d.ts' (err, { framework, typescript }) {\n    return ['Vue3'].includes(framework) && !!typescript\n  },\n  '/src/pages/index/index.jsx' (err, { pageDir = '', pageName = '', subPkg = '' }) {\n    return {\n      setPageName: normalizePath(path.join(PAGES_ENTRY, pageDir, pageName, 'index.jsx')),\n      setSubPkgName: normalizePath(path.join(SOURCE_ENTRY, subPkg, pageDir, pageName, 'index.jsx'))\n    }\n  },\n  // 省略部分代码\n  '/_editorconfig' () {\n    return { setPageName: `/.editorconfig` }\n  },\n  '/_env.development' () {\n    return { setPageName: `/.env.development` }\n  },\n  '/_env.production' () {\n    return { setPageName: `/.env.production` }\n  },\n  '/_env.test' () {\n    return { setPageName: `/.env.test` }\n  },\n  '/_eslintrc' () {\n    return { setPageName: `/.eslintrc` }\n  },\n  '/_gitignore' () {\n    return { setPageName: `/.gitignore` }\n  }\n}\n\nconst basePageFiles = [\n  '/src/pages/index/index.jsx',\n  '/src/pages/index/index.vue',\n  '/src/pages/index/index.css',\n  '/src/pages/index/index.config.js'\n]\n\nmodule.exports = {\n  handler,\n  basePageFiles\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"template_creator.js"})," 文件中的 ",(0,t.jsx)(n.code,{children:"handler"})," 对象，定义了模板中创建的文件和自定义逻辑。\n比如当 ",(0,t.jsx)(n.code,{children:"!!params.typescript"})," 的时候，创建 ",(0,t.jsx)(n.code,{children:"/tsconfig.json"}),"、",(0,t.jsx)(n.code,{children:"types/global.d.ts"})," 文件。\n当 ",(0,t.jsx)(n.code,{children:"\\['Vue3'].includes(framework) && !!typescript"})," 的时候，创建 ",(0,t.jsx)(n.code,{children:"types/vue.d.ts"})," 文件。\n根据 ",(0,t.jsx)(n.code,{children:"/\\_env.development"})," 文件创建 ",(0,t.jsx)(n.code,{children:".env.development"}),"\n等等"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["因为在一些场景下，",(0,t.jsx)(n.code,{children:"."})," 开头文件会出现问题，所以改用 ",(0,t.jsx)(n.code,{children:"_"})," 开头命名文件，创建时做一次替换。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"7-调试-rust-代码",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-调试-rust-代码",children:"#"}),"7. 调试 rust 代码"]}),"\n",(0,t.jsxs)(n.p,{children:["我们从 ",(0,t.jsx)(n.code,{children:"write"})," 函数调用 ",(0,t.jsx)(n.code,{children:"createProject"})," 函数，可以看到 ",(0,t.jsx)(n.code,{children:"createProject"})," 等是从  ",(0,t.jsx)(n.code,{children:"@tarojs/binding"})," 引入的。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { CompilerType, createProject, CSSType, FrameworkType, NpmType, PeriodType } from '@tarojs/binding'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["简单来说就是：通过 ",(0,t.jsx)(n.a,{href:"https://napi.rs/docs/introduction/getting-started",rel:"noopener noreferrer",target:"_blank",children:"napi-rs"})," 把 ",(0,t.jsx)(n.code,{children:"create_project"})," 函数暴露给 ",(0,t.jsx)(n.code,{children:"nodejs"})," ，然后通过 ",(0,t.jsx)(n.code,{children:"nodejs"})," 调用 ",(0,t.jsx)(n.code,{children:"rust"})," 的 ",(0,t.jsx)(n.code,{children:"create_project"})," 函数。"]}),"\n",(0,t.jsxs)(n.p,{children:["关于具体细节，用 ",(0,t.jsx)(n.code,{children:"rust"})," 改造 ",(0,t.jsx)(n.code,{children:"taro init"})," 这部分代码的作者 ",(0,t.jsx)(n.code,{children:"@luckyadam"}),"，写了一篇文章。可以参考学习",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7321410906426998810",rel:"noopener noreferrer",target:"_blank",children:"解锁前端新潜能：如何使用 Rust 锈化前端工具链"}),"，我在这里就不赘述了。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["安装 ",(0,t.jsx)(n.code,{children:"VSCode"})," 插件 ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer",rel:"noopener noreferrer",target:"_blank",children:"rust-analyzer"})," (方便跳转代码定义等) 和调试代码的插件 ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.lldb-dap",rel:"noopener noreferrer",target:"_blank",children:"CodeLLDB"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["更多 ",(0,t.jsx)(n.code,{children:"rust"})," 学习，可参考 ",(0,t.jsx)(n.a,{href:"https://www.rust-lang.org/zh-CN/",rel:"noopener noreferrer",target:"_blank",children:"rust 官网：rust-lang.org"})]}),"\n",(0,t.jsxs)(n.p,{children:["我们在 ",(0,t.jsx)(n.code,{children:".vscode/launch.json"})," 中的原有的 ",(0,t.jsx)(n.code,{children:"debug-init"})," 命令行调试配置，修改 ",(0,t.jsx)(n.code,{children:'"type": "lldb",'})," 配置如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",meta:"diff",children:'// .vscode/launch.json\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n-     "type": "node",\n+     "type": "lldb",\n      "request": "launch",\n      "name": "debug-init",\n      "sourceLanguages": ["rust"],\n      "program": "node",\n      "args": ["${workspaceFolder}/packages/taro-cli/bin/taro", "init", "test_pro"],\n      "cwd": "${workspaceFolder}",\n      "preLaunchTask": "build binding debug",\n      "postDebugTask": "remove test_pro"\n    }]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["这样我们就可以在 ",(0,t.jsx)(n.code,{children:"crates/native_binding/src/lib.rs"})," 文件中打断点调试了。"]}),"\n",(0,t.jsxs)(n.p,{children:["调试截图如下：\n",(0,t.jsx)(n.img,{alt:"调试 rust createProject",src:m})]}),"\n",(0,t.jsxs)(n.p,{children:["我们继续来看 ",(0,t.jsx)(n.code,{children:"crates/native_binding/src/lib.rs"})," 文件中的 ",(0,t.jsx)(n.code,{children:"create_project"})," （ ",(0,t.jsx)(n.code,{children:"nodejs"})," 中调用则是 ",(0,t.jsx)(n.code,{children:"createProject"})," ）函数："]}),"\n",(0,t.jsxs)(n.h2,{id:"8-rust-create_project-创建项目",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-rust-create_project-创建项目",children:"#"}),"8. rust create_project 创建项目"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rs",children:'// crates/native_binding/src/lib.rs\n#[napi]\npub async fn create_project(\n  conf: Project,\n  handlers: HashMap<String, ThreadsafeFunction<CreateOptions>>,\n) -> Result<()> {\n  let project: Project = Project::new(\n    conf.project_root,\n    conf.project_name,\n    conf.npm,\n    conf.description,\n    conf.typescript,\n    conf.template,\n    conf.css,\n    conf.framework,\n    conf.auto_install,\n    conf.template_root,\n    conf.version,\n    conf.date,\n    conf.compiler,\n    conf.period,\n  );\n  let mut thread_safe_functions = HashMap::new();\n  for (key, callback) in handlers {\n    thread_safe_functions.insert(key, callback);\n  }\n  if let Err(e) = project.create(thread_safe_functions).await {\n    println!("创建项目错误，原因如下：");\n    println!("{:?}", e);\n    return Err(napi::Error::from_reason(format!("{:?}", e)));\n  }\n  Ok(())\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["我们重点来看一下 ",(0,t.jsx)(n.code,{children:"project.create"})," 函数："]}),"\n",(0,t.jsxs)(n.h3,{id:"81-create-创建文件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#81-create-创建文件",children:"#"}),"8.1 create 创建文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rs",children:'// crates/taro_init/src/project.rs\npub async fn create(\n    &self,\n    js_handlers: HashMap<String, ThreadsafeFunction<CreateOptions>>,\n  ) -> anyhow::Result<()> {\n    // 省略若干代码\n    let all_files = get_all_files_in_folder(template_path.clone(), filter, None)?;\n    let mut create_options = CreateOptions {\n      // 省略若干代码\n    };\n    let all_files = all_files.iter().filter_map(|f| f.to_str()).collect::<Vec<_>>();\n    println!();\n    println!(\n      "{} {}",\n      style("✔").green(),\n      format!(\n        "{}{}",\n        style("创建项目: ").color256(238),\n        style(self.project_name.as_str()).color256(238).bold()\n      )\n    );\n    creator\n      .create_files(\n        all_files.as_slice(),\n        template_path.as_str(),\n        &mut create_options,\n        &js_handlers,\n      )\n      .await?;\n    // 当选择 rn 模板时，替换默认项目名\n    if self.template.eq("react-native") {\n      change_default_name_in_template(\n        &self.project_name,\n        template_path.as_str(),\n        project_path_str.as_str(),\n      )\n      .await?;\n    }\n    println!();\n    init_git(&self.project_name, project_path_str.as_str())?;\n    let auto_install = self.auto_install.unwrap_or(true);\n    if auto_install {\n      install_deps(&self.npm, || self.call_success()).await?;\n    } else {\n      self.call_success();\n    }\n    Ok(())\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"create"})," 主要做了以下几件事情："]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"创建项目目录"}),"\n",(0,t.jsxs)(n.li,{children:["创建项目文件 ",(0,t.jsx)(n.code,{children:"creator.create_files"})]}),"\n",(0,t.jsxs)(n.li,{children:["初始化 ",(0,t.jsx)(n.code,{children:"git init_git"})]}),"\n",(0,t.jsxs)(n.li,{children:["安装依赖 ",(0,t.jsx)(n.code,{children:"install_deps"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"初始化2，创建项目",src:x})}),"\n",(0,t.jsxs)(n.p,{children:["接着我们重点来看一下 ",(0,t.jsx)(n.code,{children:"creator.create_files"})," 函数："]}),"\n",(0,t.jsxs)(n.h3,{id:"82-creatorcreate_files",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#82-creatorcreate_files",children:"#"}),"8.2 creator.create_files"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rs",children:'// crates/taro_init/src/creator.rs\npub async fn create_files(\n    &self,\n    files: &[&str],\n    template_path: &str,\n    options: &mut CreateOptions,\n    js_handlers: &HashMap<String, ThreadsafeFunction<CreateOptions>>,\n  ) -> anyhow::Result<()> {\n    let current_style_ext = STYLE_EXT_MAP\n      .get(&options.css.unwrap_or(CSSType::None))\n      .unwrap_or(&"css");\n    options.css_ext = Some(current_style_ext.to_string());\n    for file in files {\n      // 省略若干代码...\n      if need_create_file {\n        // 省略若干代码...\n        let dest_path = self.get_destination_path(&[&dest_re_path]);\n        let from_path: String = PathBuf::from(file_relative_path)\n          .to_string_lossy()\n          .to_string();\n        self\n          .tempate(from_path.as_str(), dest_path.as_str(), &options.clone())\n          .await?;\n        println!(\n          "{} {}",\n          style("✔").green(),\n          style("创建文件: ".to_owned() + dest_path.as_str()).color256(238)\n        );\n      }\n    }\n    Ok(())\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["我们重点来看一下 ",(0,t.jsx)(n.code,{children:"creator.tempate"})," 函数："]}),"\n",(0,t.jsxs)(n.h3,{id:"83-creatortempate-模板",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#83-creatortempate-模板",children:"#"}),"8.3 creator.tempate 模板"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rs",children:'// crates/taro_init/src/creator.rs\n\npub async fn tempate(\n    &self,\n    from_path: &str,\n    dest_path: &str,\n    options: &CreateOptions,\n  ) -> anyhow::Result<()> {\n    if MEDIA_REGEX.is_match(from_path) {\n      let dir_name = PathBuf::from(dest_path)\n        .parent()\n        .unwrap()\n        .to_string_lossy()\n        .to_string();\n      async_fs::create_dir_all(&dir_name)\n        .await\n        .with_context(|| format!("文件夹创建失败: {}", dir_name))?;\n      async_fs::copy(from_path, dest_path)\n        .await\n        .with_context(|| format!("文件复制失败: {}", from_path))?;\n      return Ok(());\n    }\n    generate_with_template(from_path, dest_path, options).await?;\n    Ok(())\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["我们重点来看一下 ",(0,t.jsx)(n.code,{children:"generate_with_template"})," 函数："]}),"\n",(0,t.jsxs)(n.h3,{id:"84-generate_with_template-根据数据渲染模板生成文件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#84-generate_with_template-根据数据渲染模板生成文件",children:"#"}),"8.4 generate_with_template 根据数据渲染模板，生成文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rs",children:'// crates/taro_init/src/utils.rs\npub async fn generate_with_template(from_path: &str, dest_path: &str, data: &impl serde::Serialize) -> anyhow::Result<()> {\n  let form_template = async_fs::read(from_path).await.with_context(|| format!("文件读取失败: {}", from_path))?;\n  let from_template = String::from_utf8_lossy(&form_template);\n  let template = if from_template == "" {\n    "".to_string()\n  } else {\n    HANDLEBARS.render_template(&from_template, data).with_context(|| format!("模板渲染失败: {}", from_path))?\n  };\n  let dir_name = Path::new(dest_path).parent().unwrap().to_string_lossy().to_string();\n  async_fs::create_dir_all(&dir_name).await.with_context(|| format!("文件夹创建失败: {}", dir_name))?;\n  let metadata = async_fs::metadata(from_path).await.with_context(|| format!("文件读取失败: {}", from_path))?;\n  async_fs::write(dest_path, template).await.with_context(|| format!("文件写入失败: {}", dest_path))?;\n  #[cfg(unix)]\n  async_fs::set_permissions(dest_path, metadata.permissions()).await.with_context(|| format!("文件权限设置失败: {}", dest_path))?;\n  Ok(())\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["taro init 的 rust代码中，安装依赖引入了",(0,t.jsx)(n.a,{href:"https://crates.io/crates/handlebars",rel:"noopener noreferrer",target:"_blank",children:"crates/handlebars rust包"}),"，类似 ",(0,t.jsx)(n.a,{href:"/npmjs.com",children:"npm 包管理官网"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["经过 ",(0,t.jsx)(n.code,{children:"HANDLEBARS.render_template(&from_template, data)"})," ",(0,t.jsx)(n.a,{href:"https://github.com/sunng87/handlebars-rust",rel:"noopener noreferrer",target:"_blank",children:"handlebars-rust"})," 根据数据渲染模板，生成文件。"]}),"\n",(0,t.jsxs)(n.p,{children:["比如：",(0,t.jsx)(n.code,{children:"handlebars"})," 模板中的 ",(0,t.jsx)(n.code,{children:"app.config.js => app.config.ts"})]}),"\n",(0,t.jsx)(n.p,{children:"如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"handlebars-render",src:u})}),"\n",(0,t.jsxs)(n.p,{children:["更多 ",(0,t.jsx)(n.code,{children:"handlebars"})," 用法，参考",(0,t.jsx)(n.a,{href:"https://handlebarsjs.com/zh/installation/#%E7%94%A8%E6%B3%95",rel:"noopener noreferrer",target:"_blank",children:"handlebars官网"}),"。"]}),"\n",(0,t.jsxs)(n.h2,{id:"9-总结",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-总结",children:"#"}),"9. 总结"]}),"\n",(0,t.jsxs)(n.p,{children:["我们再来看下开头初始化项目的 ",(0,t.jsx)(n.code,{children:"gif"})," 回顾下整个 ",(0,t.jsx)(n.code,{children:"taro init"})," 过程："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"gif",src:i})}),"\n",(0,t.jsxs)(n.p,{children:["根据前面两篇 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7378363694939783178",rel:"noopener noreferrer",target:"_blank",children:"1. taro cli init"}),"、",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7380195796208205824",rel:"noopener noreferrer",target:"_blank",children:"2. taro 插件机制"})," 文章，我们可以得知：",(0,t.jsx)(n.code,{children:"taro init"})," 初始化命令，最终调用的是 ",(0,t.jsx)(n.code,{children:"packages/taro-cli/src/presets/commands/init.ts"})," 文件中的 ",(0,t.jsx)(n.code,{children:"ctx.registerCommand"})," 注册的 ",(0,t.jsx)(n.code,{children:"init"})," 命令行的 ",(0,t.jsx)(n.code,{children:"fn"})," 函数。"]}),"\n",(0,t.jsxs)(n.p,{children:["可以根据配置 ",(0,t.jsx)(n.code,{children:".vscode/launch.json"})," 文件调试 ",(0,t.jsx)(n.code,{children:"taro init"})," ",(0,t.jsx)(n.code,{children:"node"})," 部分代码和 ",(0,t.jsx)(n.code,{children:"rust"})," 配置 ",(0,t.jsx)(n.code,{children:"type:lldb"})," 代码。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export default (ctx: IPluginContext) => {\n  ctx.registerCommand({\n    name: 'init',\n    optionsMap: {\n		// 省略若干代码...\n    },\n    async fn (opts) {\n      const Project = require('../../create/project').default\n      const project = new Project({\n		// 省略若干参数...\n      })\n      project.create()\n    }\n  })\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nasync create () {\n	try {\n		const answers = await this.ask()\n		const date = new Date()\n		this.conf = Object.assign(this.conf, answers)\n		this.conf.date = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n		this.write()\n	} catch (error) {\n		console.log(chalk.red('创建项目失败: ', error))\n	}\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ask"})," 命令行交互式选择使用的是 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/inquirer",rel:"noopener noreferrer",target:"_blank",children:"inquirer"})," ",(0,t.jsx)(n.code,{children:"inquirer.prompt"})," 实现。使用 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/download-git-repo",rel:"noopener noreferrer",target:"_blank",children:"download-git-repo"})," 包（如果是 ",(0,t.jsx)(n.code,{children:"url"})," 则用 ",(0,t.jsx)(n.code,{children:"axios"})," 下载）把远程仓库下载到本地移动到",(0,t.jsx)(n.code,{children:"packages/taro-cli/templates"}),"。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { createProject } from '@tarojs/binding'\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// packages/taro-cli/src/create/project.ts\nwrite (cb?: () => void) {\n    createProject({\n    }, handler).then(() => {\n      cb && cb()\n    })\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"write"})," 函数中的 ",(0,t.jsx)(n.code,{children:"createProject"})," 创建文件部分是使用 ",(0,t.jsx)(n.a,{href:"https://www.rust-lang.org/zh-CN/",rel:"noopener noreferrer",target:"_blank",children:"rust"})," 实现的。使用 ",(0,t.jsx)(n.a,{href:"https://napi.rs/docs/introduction/getting-started",rel:"noopener noreferrer",target:"_blank",children:"napi-rs"})," 包绑定 ",(0,t.jsx)(n.code,{children:"rust"})," 代码，给 ",(0,t.jsx)(n.code,{children:"nodejs"})," 调用。"]}),"\n",(0,t.jsxs)(n.p,{children:["模板部分使用的是 ",(0,t.jsx)(n.a,{href:"https://handlebarsjs.com/zh/installation/#%E7%94%A8%E6%B3%95",rel:"noopener noreferrer",target:"_blank",children:"handlebars"}),"，",(0,t.jsx)(n.code,{children:"rust"})," 使用的 ",(0,t.jsx)(n.a,{href:"https://crates.io/crates/handlebars",rel:"noopener noreferrer",target:"_blank",children:"handlebars rust 包 crates/handlebars"})," ",(0,t.jsx)(n.a,{href:"https://www.rust-lang.org/zh-CN/",rel:"noopener noreferrer",target:"_blank",children:"rust"})," 实现。"]}),"\n",(0,t.jsxs)(n.p,{children:["根据数据渲染 ",(0,t.jsx)(n.code,{children:"handlebars"})," 模板，创建项目，生成文件。"]}),"\n",(0,t.jsx)(n.p,{children:"再根据包管理器安装依赖。最后打印创建项目成功，请进入项目目录工作。"}),"\n",(0,t.jsxs)(n.p,{children:["整个 ",(0,t.jsx)(n.code,{children:"taro init"})," 创建新项目流程用一张图表示如图所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"taro init 创建新项目流程",src:f})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"如果看完有收获，欢迎点赞、评论、分享、收藏支持。你的支持和肯定，是我写作的动力。也欢迎提建议和交流讨论"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["作者：常以",(0,t.jsx)(n.strong,{children:"若川"}),"为名混迹于江湖。所知甚少，唯善学。",(0,t.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川的博客"}),"，",(0,t.jsx)(n.a,{href:"https://github.com/ruochuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"github blog"}),"，可以点个 ",(0,t.jsx)(n.code,{children:"star"})," 鼓励下持续创作。"]}),"\n",(0,t.jsxs)(n.p,{children:["最后可以持续关注我",(0,t.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"，欢迎关注我的",(0,t.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/MacNfeTPODNMLLFdzrULow",rel:"noopener noreferrer",target:"_blank",children:"公众号：若川视野"}),"。从 2021 年 8 月起，我持续组织了好几年的",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习 200 行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（6k+人）第一的专栏，写有几十篇源码文章。"]})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(g,e)})):g(e)}let k=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["taro%2Fcli-init-2%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-调试-taro-init",text:"2. 调试 taro init",depth:2},{id:"3-init-命令行-fn-函数",text:"3. init 命令行 fn 函数",depth:2},{id:"4-new-project-构造函数",text:"4. new Project 构造函数",depth:2},{id:"41-projectcreate-创建项目",text:"4.1 project.create 创建项目",depth:3},{id:"5-ask-询问用户输入项目名称描述等",text:"5. ask 询问用户输入项目名称、描述等",depth:2},{id:"51-askprojectname-询问项目名称",text:"5.1 askProjectName 询问项目名称",depth:3},{id:"52-asktemplatesource-询问模板源",text:"5.2 askTemplateSource 询问模板源",depth:3},{id:"53-fetchtemplates-获取模板列表",text:"5.3 fetchTemplates 获取模板列表",depth:3},{id:"531-fetchtemplate-获取模板",text:"5.3.1 fetchTemplate 获取模板",depth:4},{id:"54-asktemplate-询问用户选择模板",text:"5.4 askTemplate 询问用户选择模板",depth:3},{id:"6-write-写入项目",text:"6. write 写入项目",depth:2},{id:"61-template_creatorjs-默认模板中创建模板的自定义逻辑",text:"6.1 template_creator.js 默认模板中创建模板的自定义逻辑",depth:3},{id:"7-调试-rust-代码",text:"7. 调试 rust 代码",depth:2},{id:"8-rust-create_project-创建项目",text:"8. rust create_project 创建项目",depth:2},{id:"81-create-创建文件",text:"8.1 create 创建文件",depth:3},{id:"82-creatorcreate_files",text:"8.2 creator.create_files",depth:3},{id:"83-creatortempate-模板",text:"8.3 creator.tempate 模板",depth:3},{id:"84-generate_with_template-根据数据渲染模板生成文件",text:"8.4 generate_with_template 根据数据渲染模板，生成文件",depth:3},{id:"9-总结",text:"9. 总结",depth:2}],title:"Taro 源码揭秘：3. 每次创建新的 taro 项目（taro init）的背后原理是什么",headingTitle:"Taro 源码揭秘：3. 每次创建新的 taro 项目（taro init）的背后原理是什么",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(e,n,r){r.d(n,{Z:()=>o});var t=r(52676),s=r(75271),a=r(92815);r(18544);let c={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function i(e,n,r){let t=Object.keys(c).includes(n)?n:r;return c[t](e)}let o=e=>{let{defaultLocale:n="en-US"}=e,r=(0,a.Vi)().page.readingTimeData,c=(0,a.Jr)(),o=(0,a.e7)(),[l,d]=(0,s.useState)(i(r,c,n));return(0,s.useEffect)(()=>{d(i(r,c,n))},[c,r]),(0,t.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:l})}}}]);