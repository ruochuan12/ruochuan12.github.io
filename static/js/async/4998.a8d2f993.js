"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["4998"],{31071:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var s=r(52676),d=r(40453),c=r(20713);let t=r.p+"static/image/redux-workflow.b3cc6845.png",i=r.p+"static/image/redux-debugger.ecdbdf75.png",a=r.p+"static/image/redux-middlewares.6e4ea23f.png",l=r.p+"static/image/middleware.246d4a8c.png",o=r.p+"static/image/redux.middleware.drawio.835ecfcc.png",h=r.p+"static/image/redux-workflow-gif.8206c2ff.png";function x(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",code:"code",strong:"strong",ol:"ol",li:"li",h3:"h3",pre:"pre",img:"img",ul:"ul",h4:"h4"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"学习-redux-源码整体架构深入理解-redux-及其中间件原理",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#学习-redux-源码整体架构深入理解-redux-及其中间件原理",children:"#"}),"学习 redux 源码整体架构，深入理解 redux 及其中间件原理"]}),"\n",(0,s.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h2,{id:"1-前言",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["大家好，我是",(0,s.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,s.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,s.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,s.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["你好，我是",(0,s.jsx)(n.a,{href:"http://ruochuan12.github.io/",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。这是",(0,s.jsx)(n.code,{children:"学习源码整体架构系列"}),"第八篇。整体架构这词语好像有点大，姑且就算是源码整体结构吧，主要就是学习是代码整体结构，不深究其他不是主线的具体函数的实现。本篇文章学习的是实际仓库的代码。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"要是有人说到怎么读源码，正在读文章的你能推荐我的源码系列文章，那真是太好了"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"学习源码整体架构系列"}),"文章如下："]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["1.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5d39d2cbf265da1bc23fbd42",rel:"noopener noreferrer",target:"_blank",children:"学习 jQuery 源码整体架构，打造属于自己的 js 类库"}),"\n2.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5d4bf94de51d453bb13b65dc",rel:"noopener noreferrer",target:"_blank",children:"学习 underscore 源码整体架构，打造属于自己的函数式编程类库"}),"\n3.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5d767e1d6fb9a06b032025ea",rel:"noopener noreferrer",target:"_blank",children:"学习 lodash 源码整体架构，打造属于自己的函数式编程类库"}),"\n4.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5dba5a39e51d452a2378348a",rel:"noopener noreferrer",target:"_blank",children:"学习 sentry 源码整体架构，打造属于自己的前端异常监控SDK"}),"\n5.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5dd4e61a6fb9a05a5c010af0",rel:"noopener noreferrer",target:"_blank",children:"学习 vuex 源码整体架构，打造属于自己的状态管理库"}),"\n6.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5df349b5518825123751ba66",rel:"noopener noreferrer",target:"_blank",children:"学习 axios 源码整体架构，打造属于自己的请求库"}),"\n7.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5e69925cf265da571e262fe6",rel:"noopener noreferrer",target:"_blank",children:"学习 koa 源码的整体架构，浅析koa洋葱模型原理和co原理"}),"\n8.",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5ee63b7d51882542fc6265ad",rel:"noopener noreferrer",target:"_blank",children:"学习 redux 源码整体架构，深入理解 redux 及其中间件原理"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["感兴趣的读者可以点击阅读。","\n其他源码计划中的有：",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/express-analysis",rel:"noopener noreferrer",target:"_blank",children:(0,s.jsx)(n.code,{children:"express"})}),"、",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/vue-router-analysis",rel:"noopener noreferrer",target:"_blank",children:(0,s.jsx)(n.code,{children:"vue-rotuer"})}),"、",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/react-redux-analysis",rel:"noopener noreferrer",target:"_blank",children:(0,s.jsx)(n.code,{children:"react-redux"})})," 等源码，不知何时能写完（哭泣），欢迎持续关注我（若川）。"]}),"\n",(0,s.jsxs)(n.p,{children:["源码类文章，一般阅读量不高。已经有能力看懂的，自己就看了。不想看，不敢看的就不会去看源码。","\n所以我的文章，尽量写得让想看源码又不知道怎么看的读者能看懂。"]}),"\n",(0,s.jsx)(n.p,{children:"阅读本文你将学到："}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"git subtree"})," 管理子仓库"]}),"\n",(0,s.jsxs)(n.li,{children:["如何学习 ",(0,s.jsx)(n.code,{children:"redux"})," 源码"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"redux"})," 中间件原理"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"redux"})," 各个",(0,s.jsx)(n.code,{children:"API"}),"的实现"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vuex"})," 和 ",(0,s.jsx)(n.code,{children:"redux"}),"  的对比"]}),"\n",(0,s.jsx)(n.li,{children:"等等"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"11-本文阅读最佳方式",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-本文阅读最佳方式",children:"#"}),"1.1 本文阅读最佳方式"]}),"\n",(0,s.jsxs)(n.p,{children:["把我的",(0,s.jsx)(n.code,{children:"redux"}),"源码仓库 ",(0,s.jsx)(n.code,{children:"git clone https://github.com/ruochuan12/redux-analysis.git"}),"克隆下来，顺便",(0,s.jsx)(n.code,{children:"star"}),"一下",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/redux-analysis",rel:"noopener noreferrer",target:"_blank",children:"我的redux源码学习仓库"}),"^_^。",(0,s.jsxs)(n.strong,{children:["跟着文章节奏调试和示例代码调试，用",(0,s.jsx)(n.code,{children:"chrome"}),"动手调试印象更加深刻"]}),"。文章长段代码不用细看，可以调试时再细看。看这类源码文章百遍，可能不如自己多调试几遍。也欢迎加我微信交流",(0,s.jsx)(n.code,{children:"ruochuan12"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"2-git-subtree-管理子仓库",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-git-subtree-管理子仓库",children:"#"}),"2. git subtree 管理子仓库"]}),"\n",(0,s.jsxs)(n.p,{children:["写了很多源码文章，",(0,s.jsx)(n.code,{children:"vuex"}),"、",(0,s.jsx)(n.code,{children:"axios"}),"、",(0,s.jsx)(n.code,{children:"koa"}),"等都是使用新的仓库克隆一份源码在自己仓库中。\n虽然电脑可以拉取最新代码，看到原作者的git信息。但上传到",(0,s.jsx)(n.code,{children:"github"}),"后。读者却看不到原仓库作者的",(0,s.jsx)(n.code,{children:"git"}),"信息了。于是我找到了",(0,s.jsx)(n.code,{children:"git submodules"})," 方案，但并不是很适合。再后来发现了",(0,s.jsx)(n.code,{children:"git subtree"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["简单说下 ",(0,s.jsx)(n.code,{children:"npm package"}),"和",(0,s.jsx)(n.code,{children:"git subtree"}),"的区别。\n",(0,s.jsx)(n.code,{children:"npm package"}),"是单向的。",(0,s.jsx)(n.code,{children:"git subtree"}),"则是双向的。"]}),"\n",(0,s.jsxs)(n.p,{children:["具体可以查看这篇文章",(0,s.jsx)(n.a,{href:"https://segmentfault.com/a/1190000003969060",rel:"noopener noreferrer",target:"_blank",children:"@德来（原有赞大佬）：用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册"})]}),"\n",(0,s.jsxs)(n.p,{children:["学会了",(0,s.jsx)(n.code,{children:"git subtree"}),"后，我新建了",(0,s.jsx)(n.code,{children:"redux-analysis"}),"项目后，把",(0,s.jsx)(n.code,{children:"redux"}),"源码",(0,s.jsx)(n.code,{children:"4.x"}),"（截止至2020年06月13日，",(0,s.jsx)(n.code,{children:"4.x"}),"分支最新版本是",(0,s.jsx)(n.code,{children:"4.0.5"}),"，",(0,s.jsx)(n.code,{children:"master"}),"分支是",(0,s.jsx)(n.code,{children:"ts"}),"，文章中暂不想让一些不熟悉",(0,s.jsx)(n.code,{children:"ts"}),"的读者看不懂）分支克隆到了我的项目里的一个子项目，得以保留",(0,s.jsx)(n.code,{children:"git"}),"信息。"]}),"\n",(0,s.jsx)(n.p,{children:"对应命令则是："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git subtree add --prefix=redux https://github.com/reduxjs/redux.git 4.x\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"3-调试-redux-源码准备工作",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-调试-redux-源码准备工作",children:"#"}),"3. 调试 redux 源码准备工作"]}),"\n",(0,s.jsxs)(n.p,{children:["之前，我在知乎回答了一个问题",(0,s.jsx)(n.a,{href:"https://www.zhihu.com/question/350289336/answer/910970733",rel:"noopener noreferrer",target:"_blank",children:"若川：一年内的前端看不懂前端框架源码怎么办？"}),"\n推荐了一些资料，阅读量还不错，大家有兴趣可以看看。主要有四点："]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["1.借助调试","\n2.搜索查阅相关高赞文章","\n3.把不懂的地方记录下来，查阅相关文档","\n4.总结"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"看源码调试很重要，所以我的每篇源码文章都详细描述（也许有人看来是比较啰嗦...）如何调试源码。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"断点调试要领："}),"\n",(0,s.jsxs)(n.strong,{children:["赋值语句可以一步按",(0,s.jsx)(n.code,{children:"F10"}),"跳过，看返回值即可，后续详细再看。"]}),"\n",(0,s.jsxs)(n.strong,{children:["函数执行需要断点按",(0,s.jsx)(n.code,{children:"F11"}),"跟着看，也可以结合注释和上下文倒推这个函数做了什么。"]}),"\n",(0,s.jsxs)(n.strong,{children:["有些不需要细看的，直接按",(0,s.jsx)(n.code,{children:"F8"}),"走向下一个断点"]}),"\n",(0,s.jsxs)(n.strong,{children:["刷新重新调试按",(0,s.jsx)(n.code,{children:"F5"})]})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["调试源码前，先简单看看 ",(0,s.jsx)(n.code,{children:"redux"})," 的工作流程，有个大概印象。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"redux 工作流程",src:t})}),"\n",(0,s.jsxs)(n.h3,{id:"31-rollup-生成-sourcemap-便于调试",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-rollup-生成-sourcemap-便于调试",children:"#"}),"3.1 rollup 生成 sourcemap 便于调试"]}),"\n",(0,s.jsxs)(n.p,{children:["修改",(0,s.jsx)(n.code,{children:"rollup.config.js"}),"文件，",(0,s.jsx)(n.code,{children:"output"}),"输出的配置生成",(0,s.jsx)(n.code,{children:"sourcemap"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// redux/rollup.config.js 有些省略\nconst sourcemap = {\n  sourcemap: true,\n};\n\noutput: {\n    // ...\n    ...sourcemap,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"安装依赖"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone http://github.com/ruochuan12/redux-analysis.git\ncd redux-analysi/redux\nnpm i\nnpm run build\n# 编译结束后会生成 sourcemap .map格式的文件到 dist、es、lib 目录下。\n"})}),"\n",(0,s.jsxs)(n.p,{children:["仔细看看",(0,s.jsx)(n.code,{children:"redux/examples"}),"目录和",(0,s.jsx)(n.code,{children:"redux/README"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["这时我在根路径下，新建文件夹",(0,s.jsx)(n.code,{children:"examples"}),"，把原生",(0,s.jsx)(n.code,{children:"js"}),"写的计数器",(0,s.jsx)(n.code,{children:"redux/examples/counter-vanilla/index.html"}),"，复制到",(0,s.jsx)(n.code,{children:"examples/index.html"}),"。同时把打包后的包含",(0,s.jsx)(n.code,{children:"sourcemap"}),"的",(0,s.jsx)(n.code,{children:"redux/dist"}),"目录，复制到",(0,s.jsx)(n.code,{children:"examples/dist"}),"目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["修改",(0,s.jsx)(n.code,{children:"index.html"}),"的",(0,s.jsx)(n.code,{children:"script"}),"的",(0,s.jsx)(n.code,{children:"redux.js"}),"文件为",(0,s.jsx)(n.code,{children:"dist中的路径"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["为了便于区分和调试后续",(0,s.jsx)(n.code,{children:"html"}),"文件，我把",(0,s.jsx)(n.code,{children:"index.html"}),"重命名为",(0,s.jsx)(n.code,{children:"index.1.redux.getState.dispatch.html"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# redux-analysis 根目录\n# 安装启动服务的npm包\nnpm i -g http-server\ncd examples\nhs -p 5000\n"})}),"\n",(0,s.jsxs)(n.p,{children:["就可以开心的调试啦。可以直接克隆我的项目",(0,s.jsx)(n.code,{children:"git clone http://github.com/ruochuan12/redux-analysis.git"}),"。本地调试，动手实践，容易消化吸收。"]}),"\n",(0,s.jsxs)(n.h2,{id:"4-通过调试计数器例子的学习-redux-源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-通过调试计数器例子的学习-redux-源码",children:"#"}),"4. 通过调试计数器例子的学习 redux 源码"]}),"\n",(0,s.jsxs)(n.p,{children:["接着我们来看",(0,s.jsx)(n.code,{children:"examples/index.1.redux.getState.dispatch.html"}),"文件。先看",(0,s.jsx)(n.code,{children:"html"}),"部分。只是写了几个 ",(0,s.jsx)(n.code,{children:"button"}),"，比较简单。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div>\n    <p>\n    Clicked: <span id="value">0</span> times\n    <button id="increment">+</button>\n    <button id="decrement">-</button>\n    <button id="incrementIfOdd">Increment if odd</button>\n    <button id="incrementAsync">Increment async</button>\n    </p>\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js部分"}),"，也比较简单。声明了一个",(0,s.jsx)(n.code,{children:"counter"}),"函数，传递给",(0,s.jsx)(n.code,{children:"Redux.createStore(counter)"}),"，得到结果",(0,s.jsx)(n.code,{children:"store"}),"，而",(0,s.jsx)(n.code,{children:"store"}),"是个对象。",(0,s.jsx)(n.code,{children:"render"}),"方法渲染数字到页面。用",(0,s.jsx)(n.code,{children:"store.subscribe(render)"}),"订阅的",(0,s.jsx)(n.code,{children:"render"}),"方法。还有",(0,s.jsx)(n.code,{children:"store.dispatch({type: 'INCREMENT' })"}),"方法，调用",(0,s.jsx)(n.code,{children:"store.dispatch"}),"时会触发",(0,s.jsx)(n.code,{children:"render"}),"方法。这样就实现了一个计数器。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function counter(state, action) {\n    if (typeof state === 'undefined') {\n        return 0\n    }\n\n    switch (action.type) {\n        case 'INCREMENT':\n        return state + 1\n        case 'DECREMENT':\n        return state - 1\n        default:\n        return state\n    }\n}\n\nvar store = Redux.createStore(counter)\nvar valueEl = document.getElementById('value')\n\nfunction render() {\n    valueEl.innerHTML = store.getState().toString()\n}\nrender()\nstore.subscribe(render)\n\ndocument.getElementById('increment')\n.addEventListener('click', function () {\n    store.dispatch({ type: 'INCREMENT' })\n})\n\n// 省略部分暂时无效代码...\n"})}),"\n",(0,s.jsx)(n.p,{children:"思考：看了这段代码，你会在哪打断点来调试呢。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 四处可以断点来看\n// 1.\nvar store = Redux.createStore(counter)\n// 2.\nfunction render() {\nvalueEl.innerHTML = store.getState().toString()\n}\nrender()\n// 3.\nstore.subscribe(render)\n// 4.\nstore.dispatch({ type: 'INCREMENT' })\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"redux debugger图",src:i})}),"\n",(0,s.jsxs)(n.p,{children:["图中的右边",(0,s.jsx)(n.code,{children:"Scope"}),"，有时需要关注下，会显示闭包、全局环境、当前环境等变量，还可以显示函数等具体代码位置，能帮助自己理解代码。"]}),"\n",(0,s.jsxs)(n.p,{children:["断点调试，按",(0,s.jsx)(n.code,{children:"F5"}),"刷新页面后，按",(0,s.jsx)(n.code,{children:"F8"}),"，把鼠标放在",(0,s.jsx)(n.code,{children:"Redux"}),"和",(0,s.jsx)(n.code,{children:"store"}),"上。"]}),"\n",(0,s.jsxs)(n.p,{children:["可以看到",(0,s.jsx)(n.code,{children:"Redux"}),"上有好几个方法。分别是："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'__DO_NOT_USE__ActionTypes: {INIT: "@@redux/INITu.v.d.u.6.r", REPLACE: "@@redux/REPLACEg.u.u.7.c", PROBE_UNKNOWN_ACTION: ƒ}'}),"\n",(0,s.jsxs)(n.li,{children:["applyMiddleware: ƒ applyMiddleware() 函数是一个增强器，组合多个中间件，最终增强",(0,s.jsx)(n.code,{children:"store.dispatch"}),"函数，",(0,s.jsx)(n.code,{children:"dispatch"}),"时，可以串联执行所有中间件。"]}),"\n",(0,s.jsxs)(n.li,{children:["bindActionCreators: ƒ bindActionCreators(actionCreators, dispatch) 生成actions，主要用于其他库，比如",(0,s.jsx)(n.code,{children:"react-redux"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["combineReducers: ƒ combineReducers(reducers) 组合多个",(0,s.jsx)(n.code,{children:"reducers"}),"，返回一个总的",(0,s.jsx)(n.code,{children:"reducer"}),"函数。"]}),"\n",(0,s.jsx)(n.li,{children:"compose: ƒ compose() 组合多个函数，从右到左，比如：compose(f, g, h) 最终得到这个结果 (...args) => f(g(h(...args)))."}),"\n",(0,s.jsxs)(n.li,{children:["createStore: ƒ createStore(reducer, preloadedState, enhancer) 生成 ",(0,s.jsx)(n.code,{children:"store"})," 对象"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["再看",(0,s.jsx)(n.code,{children:"store"}),"也有几个方法。分别是："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["dispatch: ƒ dispatch(action)  派发动作，也就是把",(0,s.jsx)(n.code,{children:"subscribe"}),"收集的函数，依次遍历执行"]}),"\n",(0,s.jsxs)(n.li,{children:["subscribe: ƒ subscribe(listener) 订阅收集函数存在数组中，等待触发",(0,s.jsx)(n.code,{children:"dispatch"}),"依次执行。返回一个取消订阅的函数，可以取消订阅监听。"]}),"\n",(0,s.jsxs)(n.li,{children:["getState: ƒ getState() 获取存在",(0,s.jsx)(n.code,{children:"createStore"}),"函数内部闭包的对象。"]}),"\n",(0,s.jsxs)(n.li,{children:["replaceReducer: ƒ replaceReducer(nextReducer) 主要用于",(0,s.jsx)(n.code,{children:"redux"}),"开发者工具，对比当前和上一次操作的异同。有点类似时间穿梭功能。"]}),"\n",(0,s.jsx)(n.li,{children:"Symbol(observable): ƒ observable()"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是",(0,s.jsx)(n.a,{href:"https://redux.org.js",rel:"noopener noreferrer",target:"_blank",children:"官方文档redux.org.js"}),"上的 ",(0,s.jsx)(n.code,{children:"API"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["暂时不去深究每一个",(0,s.jsx)(n.code,{children:"API"}),"的实现。重新按",(0,s.jsx)(n.code,{children:"F5"}),"刷新页面，断点到",(0,s.jsx)(n.code,{children:"var store = Redux.createStore(counter)"}),"。一直按",(0,s.jsx)(n.code,{children:"F11"}),"，先走一遍主流程。"]}),"\n",(0,s.jsxs)(n.h3,{id:"41-reduxcreatesotre",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-reduxcreatesotre",children:"#"}),"4.1 Redux.createSotre"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createStore"})," 函数结构是这样的，是不是看起来很简单，最终返回对象",(0,s.jsx)(n.code,{children:"store"}),"，包含",(0,s.jsx)(n.code,{children:"dispatch"}),"、",(0,s.jsx)(n.code,{children:"subscribe"}),"、",(0,s.jsx)(n.code,{children:"getState"}),"、",(0,s.jsx)(n.code,{children:"replaceReducer"}),"等方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 省略了若干代码\nexport default function createStore(reducer, preloadedState, enhancer) {\n    // 省略参数校验和替换\n    // 当前的 reducer 函数\n    let currentReducer = reducer\n    // 当前state\n    let currentState = preloadedState\n    // 当前的监听数组函数\n    let currentListeners = []\n    // 下一个监听数组函数\n    let nextListeners = currentListeners\n    // 是否正在dispatch中\n    let isDispatching = false\n    function ensureCanMutateNextListeners() {\n        if (nextListeners === currentListeners) {\n        nextListeners = currentListeners.slice()\n        }\n    }\n    function getState() {\n        return currentState\n    }\n    function subscribe(listener) {}\n    function dispatch(action) {}\n    function replaceReducer(nextReducer) {}\n    function observable() {}\n    // ActionTypes.INIT @@redux/INITu.v.d.u.6.r\n    dispatch({ type: ActionTypes.INIT })\n    return {\n        dispatch,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"42-storedispatchaction",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-storedispatchaction",children:"#"}),"4.2 store.dispatch(action)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function dispatch(action) {\n    // 判断action是否是对象，不是则报错\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n    // 判断action.type 是否存在，没有则报错\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n    // 不是则报错\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n        // 调用完后置为 false\n      isDispatching = false\n    }\n    //  把 收集的函数拿出来依次调用\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n    // 最终返回 action\n    return action\n  }\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var store = Redux.createStore(counter)\n"})}),"\n",(0,s.jsx)(n.p,{children:"上文调试完了这句。"}),"\n",(0,s.jsxs)(n.p,{children:["继续按",(0,s.jsx)(n.code,{children:"F11"}),"调试。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function render() {\n    valueEl.innerHTML = store.getState().toString()\n}\nrender()\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"43-storegetstate",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-storegetstate",children:"#"}),"4.3 store.getState()"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getState"}),"函数实现比较简单。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function getState() {\n    // 判断正在dispatch中，则报错\n    if (isDispatching) {\n        throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n            'The reducer has already received the state as an argument. ' +\n            'Pass it down from the top reducer instead of reading it from the store.'\n        )\n    }\n    // 返回当前的state\n    return currentState\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"44-storesubscribelistener",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-storesubscribelistener",children:"#"}),"4.4 store.subscribe(listener)"]}),"\n",(0,s.jsxs)(n.p,{children:["订阅监听函数，存放在数组中，",(0,s.jsx)(n.code,{children:"store.dispatch(action)"}),"时遍历执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function subscribe(listener) {\n    // 订阅参数校验不是函数报错\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n    // 正在dispatch中，报错\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribelistener for more details.'\n      )\n    }\n    // 订阅为 true\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    // 返回一个取消订阅的函数\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n      // 正在dispatch中，则报错\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribelistener for more details.'\n        )\n      }\n      // 订阅为 false\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n    //   找到当前监听函数\n      const index = nextListeners.indexOf(listener)\n    //   在数组中删除\n      nextListeners.splice(index, 1)\n      currentListeners = null\n    }\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["到这里，我们就调试学习完了",(0,s.jsx)(n.code,{children:"Redux.createSotre"}),"、",(0,s.jsx)(n.code,{children:"store.dispatch"}),"、",(0,s.jsx)(n.code,{children:"store.getState"}),"、",(0,s.jsx)(n.code,{children:"store.subscribe"}),"的源码。"]}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们写个中间件例子，来调试中间件相关源码。"}),"\n",(0,s.jsxs)(n.h2,{id:"5-redux-中间件相关源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-redux-中间件相关源码",children:"#"}),"5. Redux 中间件相关源码"]}),"\n",(0,s.jsx)(n.p,{children:"中间件是重点，面试官也经常问这类问题。"}),"\n",(0,s.jsxs)(n.h3,{id:"51-reduxapplymiddlewaremiddlewares",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-reduxapplymiddlewaremiddlewares",children:"#"}),"5.1 Redux.applyMiddleware(...middlewares)"]}),"\n",(0,s.jsxs)(n.h4,{id:"511-准备-logger-例子调试",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#511-准备-logger-例子调试",children:"#"}),"5.1.1 准备 logger 例子调试"]}),"\n",(0,s.jsxs)(n.p,{children:["为了调试",(0,s.jsx)(n.code,{children:"Redux.applyMiddleware(...middlewares)"}),"，我在",(0,s.jsx)(n.code,{children:"examples/js/middlewares.logger.example.js"}),"写一个简单的",(0,s.jsx)(n.code,{children:"logger"}),"例子。分别有三个",(0,s.jsx)(n.code,{children:"logger1"}),"，",(0,s.jsx)(n.code,{children:"logger2"}),"，",(0,s.jsx)(n.code,{children:"logger3"}),"函数。由于都是类似，所以我在这里只展示",(0,s.jsx)(n.code,{children:"logger1"}),"函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// examples/js/middlewares.logger.example.js\nfunction logger1({ getState }) {\n  return next => action => {\n      console.log('will dispatch--1--next, action:', next, action)\n\n      // Call the next dispatch method in the middleware chain.\n      const returnValue = next(action)\n\n      console.log('state after dispatch--1', getState())\n\n      // This will likely be the action itself, unless\n      // a middleware further in chain changed it.\n      return returnValue\n  }\n}\n// 省略 logger2、logger3\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"logger"}),"中间件函数做的事情也比较简单，返回两层函数，",(0,s.jsx)(n.code,{children:"next"}),"就是下一个中间件函数，调用返回结果。为了让读者能看懂，我把",(0,s.jsx)(n.code,{children:"logger1"}),"用箭头函数、",(0,s.jsx)(n.code,{children:"logger2"}),"则用普通函数。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"写好例子后"}),"，我们接着来看怎么调试",(0,s.jsx)(n.code,{children:"Redux.applyMiddleware(...middlewares))"}),"源码。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd redux-analysis && hs -p 5000\n# 上文说过npm i -g http-server\n"})}),"\n",(0,s.jsxs)(n.p,{children:["打开",(0,s.jsx)(n.code,{children:"http://localhost:5000/examples/index.2.redux.applyMiddleware.compose.html"}),"，按",(0,s.jsx)(n.code,{children:"F12"}),"打开控制台，"]}),"\n",(0,s.jsxs)(n.p,{children:["先点击加号操作+1，把结果展示出来。\n",(0,s.jsx)(n.img,{alt:"redux 中间件调试图",src:a}),"\n从图中可以看出，",(0,s.jsx)(n.code,{children:"next"}),"则是下一个函数。先1-2-3，再3-2-1这样的顺序。"]}),"\n",(0,s.jsxs)(n.p,{children:["这种也就是我们常说的中间件，面向切面编程（AOP）。\n",(0,s.jsx)(n.img,{alt:"中间件图解",src:l})]}),"\n",(0,s.jsx)(n.p,{children:"接下来调试，在以下语句打上断点和一些你觉得重要的地方打上断点。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// examples/index.2.redux.applyMiddleware.compose.html\nvar store = Redux.createStore(counter, Redux.applyMiddleware(logger1, logger2,  logger3))\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"512-reduxapplymiddlewaremiddlewares-源码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#512-reduxapplymiddlewaremiddlewares-源码",children:"#"}),"5.1.2 Redux.applyMiddleware(...middlewares) 源码"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// redux/src/applyMiddleware.js\n/**\n * ...\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// redux/src/createStore.js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 省略参数校验\n  // 如果第二个参数`preloadedState`是函数，并且第三个参数`enhancer`是undefined，把它们互换一下。\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    // enhancer 也就是`Redux.applyMiddleware`返回的函数\n    // createStore 的 args 则是 `reducer, preloadedState`\n    /**\n     * createStore => (...args) => {\n            const store = createStore(...args)\n            return {\n              ...store,\n               dispatch,\n            }\n        }\n     ** /\n    // 最终返回增强的store对象。\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  // 省略后续代码\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["把接收的中间件函数",(0,s.jsx)(n.code,{children:"logger1"}),", ",(0,s.jsx)(n.code,{children:"logger2"}),", ",(0,s.jsx)(n.code,{children:"logger3"}),"放入到 了",(0,s.jsx)(n.code,{children:"middlewares"}),"数组中。",(0,s.jsx)(n.code,{children:"Redux.applyMiddleware"}),"最后返回两层函数。\n把中间件函数都混入了参数",(0,s.jsx)(n.code,{children:"getState"}),"和",(0,s.jsx)(n.code,{children:"dispatch"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// examples/index.2.redux.applyMiddleware.compose.html\nvar store = Redux.createStore(counter, Redux.applyMiddleware(logger1, logger2,  logger3))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最后这句其实是返回一个增强了",(0,s.jsx)(n.code,{children:"dispatch"}),"的",(0,s.jsx)(n.code,{children:"store"}),"对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["而增强的",(0,s.jsx)(n.code,{children:"dispatch"}),"函数，则是用",(0,s.jsx)(n.code,{children:"Redux.compose(...functions)"}),"进行串联起来执行的。"]}),"\n",(0,s.jsxs)(n.h3,{id:"52-reduxcomposefunctions",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-reduxcomposefunctions",children:"#"}),"5.2 Redux.compose(...functions)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// applyMiddleware.js\ndispatch = compose(...chain)(store.dispatch)\n// compose\nfuncs.reduce((a, b) => (...args) => a(b(...args)))\n"})}),"\n",(0,s.jsx)(n.p,{children:"这两句可能不是那么好理解，可以断点多调试几次。我把箭头函数转换成普通函数。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"funcs.reduce(function(a, b){\n  return function(...args){\n    return a(b(...args));\n  };\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其实",(0,s.jsx)(n.code,{children:"redux"}),"源码中注释很清晰了，这个",(0,s.jsx)(n.code,{children:"compose"}),"函数上方有一堆注释，其中有一句：组合多个函数，从右到左，比如：",(0,s.jsx)(n.code,{children:"compose(f, g, h)"})," 最终得到这个结果 ",(0,s.jsx)(n.code,{children:"(...args) => f(g(h(...args)))"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"521-compose-函数演化",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#521-compose-函数演化",children:"#"}),"5.2.1 compose 函数演化"]}),"\n",(0,s.jsxs)(n.p,{children:["看",(0,s.jsx)(n.code,{children:"Redux.compose(...functions)"}),"函数源码后，还是不明白，不要急不要慌，吃完鸡蛋还有汤。仔细来看如何演化而来，先来简单看下如下需求。"]}),"\n",(0,s.jsx)(n.p,{children:"传入一个数值，计算数值乘以10再加上10，再减去2。"}),"\n",(0,s.jsx)(n.p,{children:"实现起来很简单。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const calc = (num) => num * 10 + 10 - 2;\ncalc(10); // 108\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但这样写有个问题，不好扩展，比如我想乘以",(0,s.jsx)(n.code,{children:"10"}),"时就打印出结果。\n为了便于扩展，我们分开写成三个函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const multiply = (x) => {\n   const result = x * 10;\n   console.log(result);\n   return result;\n};\nconst add = (y) => y + 10;\nconst minus = (z) => z - 2;\n\n// 计算结果\nconsole.log(minus(add(multiply(10))));\n// 100\n// 108\n// 这样我们就把三个函数计算结果出来了。\n"})}),"\n",(0,s.jsx)(n.p,{children:"再来实现一个相对通用的函数，计算这三个函数的结果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const compose = (f, g, h) => {\n  return function(x){\n    return f(g(h(x)));\n  }\n}\nconst calc = compose(minus, add, multiply);\nconsole.log(calc(10));\n// 100\n// 108\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这样还是有问题，只支持三个函数。我想支持多个函数。\n我们了解到数组的",(0,s.jsx)(n.code,{children:"reduce"}),"方法就能实现这样的功能。\n前一个函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 我们常用reduce来计算数值数组的总和\n[1,2,3,4,5].reduce((pre, item, index, arr) => {\n  console.log('(pre, item, index, arr)', pre, item, index, arr);\n  // (pre, item, index, arr) 1 2 1 (5)\xa0[1, 2, 3, 4, 5]\n  // (pre, item, index, arr) 3 3 2 (5)\xa0[1, 2, 3, 4, 5]\n  // (pre, item, index, arr) 6 4 3 (5)\xa0[1, 2, 3, 4, 5]\n  // (pre, item, index, arr) 10 5 4 (5)\xa0[1, 2, 3, 4, 5]\n  return pre + item;\n});\n// 15\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pre"})," 是上一次返回值，在这里是数值",(0,s.jsx)(n.code,{children:"1,3,6,10"}),"。在下一个例子中则是匿名函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function(x){\n  return a(b(x));\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"item"}),"是",(0,s.jsx)(n.code,{children:"2,3,4,5"}),"，在下一个例子中是",(0,s.jsx)(n.code,{children:"minus、add、multiply"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const compose = (...funcs) => {\n  return funcs.reduce((a, b) => {\n    return function(x){\n      return a(b(x));\n    }\n  })\n}\nconst calc = compose(minus, add, multiply);\nconsole.log(calc(10));\n// 100\n// 108\n"})}),"\n",(0,s.jsxs)(n.p,{children:["而",(0,s.jsx)(n.code,{children:"Redux.compose(...functions)"}),"其实就是这样，只不过中间件是返回双层函数罢了。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以返回的是",(0,s.jsx)(n.code,{children:"next函数"}),"，他们串起来执行了，形成了中间件的洋葱模型。\n人们都说一图胜千言。我画了一个相对简单的",(0,s.jsx)(n.code,{children:"redux"}),"中间件原理图。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"redux中间件原理图",src:o})}),"\n",(0,s.jsx)(n.p,{children:"如果还不是很明白，建议按照我给出的例子，多调试。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd redux-analysis && hs -p 5000\n# 上文说过npm i -g http-server\n"})}),"\n",(0,s.jsxs)(n.p,{children:["打开",(0,s.jsx)(n.code,{children:"http://localhost:5000/examples/index.3.html"}),"，按",(0,s.jsx)(n.code,{children:"F12"}),"打开控制台调试。"]}),"\n",(0,s.jsxs)(n.h4,{id:"522-前端框架的-compose-函数的实现",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#522-前端框架的-compose-函数的实现",children:"#"}),"5.2.2 前端框架的 compose 函数的实现"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"lodash"}),"源码中 ",(0,s.jsx)(n.code,{children:"compose"}),"函数的实现，也是类似于数组的",(0,s.jsx)(n.code,{children:"reduce"}),"，只不过是内部实现的",(0,s.jsx)(n.code,{children:"arrayReduce"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://juejin.im/post/5d767e1d6fb9a06b032025ea#heading-20",rel:"noopener noreferrer",target:"_blank",children:"引用自我的文章：学习lodash源码整体架构"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// lodash源码\nfunction baseWrapperValue(value, actions) {\n	var result = value;\n	// 如果是lazyWrapper的实例，则调用LazyWrapper.prototype.value 方法，也就是 lazyValue 方法\n	if (result instanceof LazyWrapper) {\n		result = result.value();\n	}\n	// 类似 [].reduce()，把上一个函数返回结果作为参数传递给下一个函数\n	return arrayReduce(actions, function(result, action) {\n		return action.func.apply(action.thisArg, arrayPush([result], action.args));\n	}, result);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"koa-compose"}),"源码也有",(0,s.jsx)(n.code,{children:"compose"}),"函数的实现。实现是循环加",(0,s.jsx)(n.code,{children:"promise"}),"。\n由于代码比较长我就省略了，具体看链接",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5e69925cf265da571e262fe6#heading-7",rel:"noopener noreferrer",target:"_blank",children:"若川：学习 koa 源码的整体架构，浅析koa洋葱模型原理和co原理"}),"小节 ",(0,s.jsx)(n.code,{children:"koa-compose 源码"}),"（洋葱模型实现）"]}),"\n",(0,s.jsxs)(n.h2,{id:"6-reduxcombinereducersreducers",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-reduxcombinereducersreducers",children:"#"}),"6. Redux.combineReducers(reducers)"]}),"\n",(0,s.jsxs)(n.p,{children:["打开",(0,s.jsx)(n.code,{children:"http://localhost:5000/examples/index.4.html"}),"，按",(0,s.jsx)(n.code,{children:"F12"}),"打开控制台，按照给出的例子，调试接下来的",(0,s.jsx)(n.code,{children:"Redux.combineReducers(reducers)"}),"和",(0,s.jsx)(n.code,{children:"Redux.bindActionCreators(actionCreators, dispatch)"}),"具体实现。由于文章已经很长了，这两个函数就不那么详细解释了。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"combineReducers"}),"函数简单来说就是合并多个",(0,s.jsx)(n.code,{children:"reducer"}),"为一个函数",(0,s.jsx)(n.code,{children:"combination"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    // 省略一些开发环境判断的代码...\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n\n  // 经过一些处理后得到最后的finalReducerKeys\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  // 省略一些开发环境判断的代码...\n\n  return function combination(state = {}, action) {\n    // ... 省略开发环境的一些判断\n\n   // 用 hasChanged变量 记录前后 state 是否已经修改\n    let hasChanged = false\n    // 声明对象来存储下一次的state\n    const nextState = {}\n    //遍历 finalReducerKeys\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      // 执行 reducer\n      const nextStateForKey = reducer(previousStateForKey, action)\n\n      // 省略容错代码 ...\n\n      nextState[key] = nextStateForKey\n      // 两次 key 对比 不相等则发生改变\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 最后的 keys 数组对比 不相等则发生改变\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"7-reduxbindactioncreatorsactioncreators-dispatch",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-reduxbindactioncreatorsactioncreators-dispatch",children:"#"}),"7. Redux.bindActionCreators(actionCreators, dispatch)"]}),"\n",(0,s.jsxs)(n.p,{children:["如果第一个参数是一个函数，那就直接返回一个函数。如果是一个对象，则遍历赋值，最终生成",(0,s.jsx)(n.code,{children:"boundActionCreators"}),"对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function bindActionCreator(actionCreator, dispatch) {\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  // ... 省略一些容错判断\n\n  const boundActionCreators = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"redux"}),"所提供的的",(0,s.jsx)(n.code,{children:"API"})," 除了",(0,s.jsx)(n.code,{children:"store.replaceReducer(nextReducer)"}),"没分析，其他都分析了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"8-vuex-和-redux-简单对比",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-vuex-和-redux-简单对比",children:"#"}),"8. vuex 和 redux 简单对比"]}),"\n",(0,s.jsxs)(n.h3,{id:"81-源码实现形式",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#81-源码实现形式",children:"#"}),"8.1 源码实现形式"]}),"\n",(0,s.jsxs)(n.p,{children:["从源码实现上来看，",(0,s.jsx)(n.code,{children:"vuex"}),"源码主要使用了构造函数，而",(0,s.jsx)(n.code,{children:"redux"}),"则是多用函数式编程、闭包。"]}),"\n",(0,s.jsxs)(n.h3,{id:"82-耦合度",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#82-耦合度",children:"#"}),"8.2 耦合度"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"vuex"})," 与 ",(0,s.jsx)(n.code,{children:"vue"})," 强耦合，脱离了",(0,s.jsx)(n.code,{children:"vue"}),"则无法使用。而",(0,s.jsx)(n.code,{children:"redux"}),"跟",(0,s.jsx)(n.code,{children:"react"}),"没有关系，所以它可以使用于小程序或者",(0,s.jsx)(n.code,{children:"jQuery"}),"等。如果需要和",(0,s.jsx)(n.code,{children:"react"}),"使用，还需要结合",(0,s.jsx)(n.code,{children:"react-redux"}),"库。"]}),"\n",(0,s.jsxs)(n.h3,{id:"83-扩展",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#83-扩展",children:"#"}),"8.3 扩展"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// logger 插件，具体实现省略\nfunction logger (store) {\n  console.log('store', store);\n}\n// 作为数组传入\nnew Vuex.Store({\n  state,\n  getters,\n  actions,\n  mutations,\n  plugins: process.env.NODE_ENV !== 'production'\n    ? [logger]\n    : []\n})\n// vuex 源码 插件执行部分\nclass Store{\n  constructor(){\n    // 把vuex的实例对象 store整个对象传递给插件使用\n    plugins.forEach(plugin => plugin(this))\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"vuex"}),"实现扩展则是使用插件形式，而",(0,s.jsx)(n.code,{children:"redux"}),"是中间件的形式。",(0,s.jsx)(n.code,{children:"redux"}),"的中间件则是AOP（面向切面编程），",(0,s.jsx)(n.code,{children:"redux"}),"中",(0,s.jsx)(n.code,{children:"Redux.applyMiddleware()"}),"其实也是一个增强函数，所以也可以用户来实现增强器，所以",(0,s.jsxs)(n.a,{href:"https://www.redux.org.cn/docs/introduction/Ecosystem.html",rel:"noopener noreferrer",target:"_blank",children:[(0,s.jsx)(n.code,{children:"redux"}),"生态"]}),"比较繁荣。"]}),"\n",(0,s.jsxs)(n.h3,{id:"84-上手难易度",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#84-上手难易度",children:"#"}),"8.4 上手难易度"]}),"\n",(0,s.jsxs)(n.p,{children:["相对来说，",(0,s.jsx)(n.code,{children:"vuex"}),"上手相对简单，",(0,s.jsx)(n.code,{children:"redux"}),"相对难一些，",(0,s.jsx)(n.code,{children:"redux"}),"涉及到一些函数式编程、高阶函数、纯函数等概念。"]}),"\n",(0,s.jsxs)(n.h2,{id:"9-总结",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-总结",children:"#"}),"9. 总结"]}),"\n",(0,s.jsxs)(n.p,{children:["文章主要通过一步步调试的方式循序渐进地讲述",(0,s.jsx)(n.code,{children:"redux"}),"源码的具体实现。旨在教会读者调试源码，不惧怕源码。"]}),"\n",(0,s.jsxs)(n.p,{children:["面试官经常喜欢考写一个",(0,s.jsx)(n.code,{children:"redux"}),"中间件，说说",(0,s.jsx)(n.code,{children:"redux"}),"中间件的原理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function logger1({ getState }) {\n  return next => action => {\n      const returnValue = next(action)\n      return returnValue\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const compose = (...funcs) => {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  // 箭头函数\n  // return funcs.reduce((a, b) => (...args) => a(b(...args)))\n  return funcs.reduce((a, b) => {\n    return function(x){\n      return a(b(x));\n    }\n  })\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const enhancerStore = Redux.create(reducer, Redux.applyMiddleware(logger1, ...))\nenhancerStore.dispatch(action)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["用户触发",(0,s.jsx)(n.code,{children:"enhancerStore.dispatch(action)"}),"是增强后的，其实就是第一个中间件函数，中间的",(0,s.jsx)(n.code,{children:"next"}),"是下一个中间件函数，最后",(0,s.jsx)(n.code,{children:"next"}),"是没有增强的",(0,s.jsx)(n.code,{children:"store.dispatch(action)"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["最后再来看张",(0,s.jsx)(n.code,{children:"redux"}),"工作流程图 ",(0,s.jsx)(n.img,{alt:"redux工作流程图",src:h}),"是不是就更理解些了呢。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果读者发现有不妥或可改善之处，再或者哪里没写明白的地方，欢迎评论指出。另外觉得写得不错，对你有些许帮助，可以点赞、评论、转发分享，也是对我的一种支持，非常感谢呀。",(0,s.jsx)(n.strong,{children:"要是有人说到怎么读源码，正在读文章的你能推荐我的源码系列文章，那真是太好了"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"推荐阅读",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#推荐阅读",children:"#"}),"推荐阅读"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"http://huziketang.mangojuice.top/books/react/lesson30",rel:"noopener noreferrer",target:"_blank",children:"@胡子大哈：动手实现 Redux（一）：优雅地修改共享状态"}),"，总共6小节，非常推荐，虽然我很早前就看完了《react小书》，现在再看一遍又有收获","\n",(0,s.jsx)(n.a,{href:"https://tech.meituan.com/2017/07/14/redux-design-code.html",rel:"noopener noreferrer",target:"_blank",children:"美团@莹莹 Redux从设计到源码"}),"，美团这篇是我基本写完文章后看到的，感觉写得很好，非常推荐","\n",(0,s.jsx)(n.a,{href:"https://www.redux.org.cn/",rel:"noopener noreferrer",target:"_blank",children:"redux 中文文档"}),"\n",(0,s.jsx)(n.a,{href:"https://redux.js.org",rel:"noopener noreferrer",target:"_blank",children:"redux 英文文档"}),"\n",(0,s.jsx)(n.a,{href:"http://github.com/ruochuan12/redux-analysis.git",rel:"noopener noreferrer",target:"_blank",children:"若川的学习redux源码仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"另一个系列",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#另一个系列",children:"#"}),"另一个系列"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://juejin.im/post/5c433e216fb9a049c15f841b",rel:"noopener noreferrer",target:"_blank",children:"面试官问：JS的继承"}),"\n",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5c0c87b35188252e8966c78a",rel:"noopener noreferrer",target:"_blank",children:"面试官问：JS的this指向"}),"\n",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5bf6c79bf265da6142738b29",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的call和apply方法"}),"\n",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5bec4183f265da616b1044d7",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的bind方法"}),"\n",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5bde7c926fb9a049f66b8b52",rel:"noopener noreferrer",target:"_blank",children:"面试官问：能否模拟实现JS的new操作符"})]}),"\n",(0,s.jsxs)(n.h2,{id:"关于",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关于",children:"#"}),"关于"]}),"\n",(0,s.jsxs)(n.p,{children:["作者：常以",(0,s.jsx)(n.strong,{children:"若川"}),"为名混迹于江湖。前端路上 | PPT爱好者 | 所知甚少，唯善学。","\n",(0,s.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川的博客"}),"，使用",(0,s.jsx)(n.code,{children:"vuepress"}),"重构了，阅读体验可能更好些","\n",(0,s.jsx)(n.a,{href:"https://juejin.im/user/57974dc55bbb500063f522fd/posts",rel:"noopener noreferrer",target:"_blank",children:"掘金专栏"}),"，欢迎关注~","\n",(0,s.jsxs)(n.a,{href:"https://segmentfault.com/blog/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:[(0,s.jsx)(n.code,{children:"segmentfault"}),"前端视野专栏"]}),"，欢迎关注~","\n",(0,s.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/lxchuan12",rel:"noopener noreferrer",target:"_blank",children:"知乎前端视野专栏"}),"，欢迎关注~","\n",(0,s.jsx)(n.a,{href:"https://www.yuque.com/lxchuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"语雀前端视野专栏"}),"，新增语雀专栏，欢迎关注~","\n",(0,s.jsx)(n.a,{href:"https://github.com/ruochuan12/blog",rel:"noopener noreferrer",target:"_blank",children:"github blog"}),"，相关源码和资源都放在这里，求个",(0,s.jsx)(n.code,{children:"star"}),"^_^~"]}),"\n",(0,s.jsxs)(n.h2,{id:"欢迎加微信交流-微信公众号",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#欢迎加微信交流-微信公众号",children:"#"}),"欢迎加微信交流 微信公众号"]}),"\n",(0,s.jsxs)(n.p,{children:["可能比较有趣的微信公众号，长按扫码关注（",(0,s.jsx)(n.strong,{children:"回复pdf获取前端优质书籍pdf"}),"）。欢迎加我微信",(0,s.jsx)(n.code,{children:"ruochuan12"}),"（注明来源，基本来者不拒），拉你进【前端视野交流群】，长期交流学习~"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/ruochuan12/blog/raw/master/docs/about/wechat-official-accounts-mini.jpg",alt:"若川视野"})})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(x,e)})):x(e)}let j=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["redux%2Findex.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"11-本文阅读最佳方式",text:"1.1 本文阅读最佳方式",depth:3},{id:"2-git-subtree-管理子仓库",text:"2. git subtree 管理子仓库",depth:2},{id:"3-调试-redux-源码准备工作",text:"3. 调试 redux 源码准备工作",depth:2},{id:"31-rollup-生成-sourcemap-便于调试",text:"3.1 rollup 生成 sourcemap 便于调试",depth:3},{id:"4-通过调试计数器例子的学习-redux-源码",text:"4. 通过调试计数器例子的学习 redux 源码",depth:2},{id:"41-reduxcreatesotre",text:"4.1 Redux.createSotre",depth:3},{id:"42-storedispatchaction",text:"4.2 store.dispatch(action)",depth:3},{id:"43-storegetstate",text:"4.3 store.getState()",depth:3},{id:"44-storesubscribelistener",text:"4.4 store.subscribe(listener)",depth:3},{id:"5-redux-中间件相关源码",text:"5. Redux 中间件相关源码",depth:2},{id:"51-reduxapplymiddlewaremiddlewares",text:"5.1 Redux.applyMiddleware(...middlewares)",depth:3},{id:"511-准备-logger-例子调试",text:"5.1.1 准备 logger 例子调试",depth:4},{id:"512-reduxapplymiddlewaremiddlewares-源码",text:"5.1.2 Redux.applyMiddleware(...middlewares) 源码",depth:4},{id:"52-reduxcomposefunctions",text:"5.2 Redux.compose(...functions)",depth:3},{id:"521-compose-函数演化",text:"5.2.1 compose 函数演化",depth:4},{id:"522-前端框架的-compose-函数的实现",text:"5.2.2 前端框架的 compose 函数的实现",depth:4},{id:"6-reduxcombinereducersreducers",text:"6. Redux.combineReducers(reducers)",depth:2},{id:"7-reduxbindactioncreatorsactioncreators-dispatch",text:"7. Redux.bindActionCreators(actionCreators, dispatch)",depth:2},{id:"8-vuex-和-redux-简单对比",text:"8. vuex 和 redux 简单对比",depth:2},{id:"81-源码实现形式",text:"8.1 源码实现形式",depth:3},{id:"82-耦合度",text:"8.2 耦合度",depth:3},{id:"83-扩展",text:"8.3 扩展",depth:3},{id:"84-上手难易度",text:"8.4 上手难易度",depth:3},{id:"9-总结",text:"9. 总结",depth:2},{id:"推荐阅读",text:"推荐阅读",depth:2},{id:"另一个系列",text:"另一个系列",depth:2},{id:"关于",text:"关于",depth:2},{id:"欢迎加微信交流-微信公众号",text:"欢迎加微信交流 微信公众号",depth:2}],title:"学习 redux 源码整体架构，深入理解 redux 及其中间件原理",headingTitle:"学习 redux 源码整体架构，深入理解 redux 及其中间件原理",frontmatter:{}}},20713:function(e,n,r){r.d(n,{Z:()=>a});var s=r(52676),d=r(75271),c=r(92815);r(18544);let t={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function i(e,n,r){let s=Object.keys(t).includes(n)?n:r;return t[s](e)}let a=e=>{let{defaultLocale:n="en-US"}=e,r=(0,c.Vi)().page.readingTimeData,t=(0,c.Jr)(),a=(0,c.e7)(),[l,o]=(0,d.useState)(i(r,t,n));return(0,d.useEffect)(()=>{o(i(r,t,n))},[t,r]),(0,s.jsx)("span",{"data-dark":String(a),className:"rp-reading-time",children:l})}}}]);