"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["6529"],{51699:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var t=r(52676),s=r(40453),i=r(20713);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",strong:"strong",ul:"ul",li:"li",pre:"pre",h3:"h3",blockquote:"blockquote",img:"img"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"分析-vant4-源码如何用-vue3--ts-开发一个瀑布流滚动加载的列表组件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分析-vant4-源码如何用-vue3--ts-开发一个瀑布流滚动加载的列表组件",children:"#"}),"分析 vant4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？"]}),"\n",(0,t.jsx)(i.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsx)(n.p,{children:"本文为稀土掘金技术社区首发签约文章，14天内禁止转载，14天后未获授权禁止转载，侵权必究！"}),"\n",(0,t.jsxs)(n.h2,{id:"1-前言",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"}),"1. 前言"]}),"\n",(0,t.jsxs)(n.p,{children:["大家好，我是",(0,t.jsx)(n.a,{href:"https://ruochuan12.github.io",rel:"noopener noreferrer",target:"_blank",children:"若川"}),"。我倾力持续组织了一年",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]}),"\n",(0,t.jsx)(n.p,{children:"我们开发业务时经常会使用到组件库，一般来说，很多时候我们不需要关心内部实现。但是如果希望学习和深究里面的原理，这时我们可以分析自己使用的组件库实现。有哪些优雅实现、最佳实践、前沿技术等都可以值得我们借鉴。"}),"\n",(0,t.jsxs)(n.p,{children:["相比于原生 ",(0,t.jsx)(n.code,{children:"JS"})," 等源码。我们或许更应该学习，正在使用的组件库的源码，因为有助于帮助我们写业务和写自己的组件。"]}),"\n",(0,t.jsxs)(n.p,{children:["如果是 ",(0,t.jsx)(n.code,{children:"Vue"})," 技术栈，开发移动端的项目，大多会选用 ",(0,t.jsx)(n.code,{children:"vant"})," 组件库，目前（2022-11-13） ",(0,t.jsx)(n.code,{children:"star"})," 多达 ",(0,t.jsx)(n.code,{children:"20.4k"}),"。我们可以挑选 ",(0,t.jsx)(n.code,{children:"vant"})," 组件库学习，我会写一个",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"vant 组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"vant 组件库源码分析系列："})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["1.",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7158239404484460574",rel:"noopener noreferrer",target:"_blank",children:"vant 4 即将正式发布，支持暗黑主题，那么是如何实现的呢"})]}),"\n",(0,t.jsxs)(n.li,{children:["2.",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7160465286036979748",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant 4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"})]}),"\n",(0,t.jsxs)(n.li,{children:["3.",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7165661072785932296",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？"})]}),"\n",(0,t.jsxs)(n.li,{children:["4.",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7169003604303413278",rel:"noopener noreferrer",target:"_blank",children:"分析 vant 4 源码，学会用 vue3 + ts 开发毫秒级渲染的倒计时组件，真是妙啊"})]}),"\n",(0,t.jsxs)(n.li,{children:["5.",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7171227417246171149",rel:"noopener noreferrer",target:"_blank",children:"vant 4.0 正式发布了，分析其源码学会用 vue3 写一个图片懒加载组件！"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"学完本文，你将学到："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"1. 学会如何用 vue3 + ts 开发一个 List 组件\n2. 学会封装各种组合式 `API`\n3. 等等\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"2-准备工作",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-准备工作",children:"#"}),"2. 准备工作"]}),"\n",(0,t.jsxs)(n.p,{children:["看一个开源项目，第一步应该是先看 ",(0,t.jsx)(n.a,{href:"https://github.com/youzan/vant",rel:"noopener noreferrer",target:"_blank",children:"README.md"})," 再看贡献文档 ",(0,t.jsx)(n.a,{href:"https://github.com/youzan/vant/blob/main/.github/CONTRIBUTING.md",rel:"noopener noreferrer",target:"_blank",children:"github/CONTRIBUTING.md"}),"。"]}),"\n",(0,t.jsxs)(n.h3,{id:"21-克隆源码--跑起来",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-克隆源码--跑起来",children:"#"}),"2.1 克隆源码 && 跑起来"]}),"\n",(0,t.jsxs)(n.p,{children:["You will need ",(0,t.jsx)(n.a,{href:"https://nodejs.org",rel:"noopener noreferrer",target:"_blank",children:"Node.js >= 14"})," and ",(0,t.jsx)(n.a,{href:"https://pnpm.io",rel:"noopener noreferrer",target:"_blank",children:"pnpm"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 推荐克隆我的项目\ngit clone https://github.com/ruochuan12/vant-analysis\ncd vant-analysis/vant\n\n# 或者克隆官方仓库\ngit clone git@github.com:vant-ui/vant.git\ncd vant\n\n# 安装依赖，会运行所有 packages 下仓库的 pnpm i 钩子 pnpm prepare 和 pnpm i\npnpm i\n\n# Start development\npnpm dev\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们先来看 ",(0,t.jsx)(n.code,{children:"pnpm dev"})," 最终执行的什么命令。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"vant"})," 项目使用的是 ",(0,t.jsx)(n.code,{children:"monorepo"})," 结构。查看根路径下的 ",(0,t.jsx)(n.code,{children:"package.json"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'vant/package.json => "dev": "pnpm --dir ./packages/vant dev"'}),"\n",(0,t.jsx)(n.code,{children:"vant/packages/vant/package.json"})," => ",(0,t.jsx)(n.code,{children:'"dev": "vant-cli dev"'})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"pnpm dev"})," 最终执行的是：",(0,t.jsx)(n.code,{children:"vant-cli dev"})," 执行测试用例。本文主要是学习 ",(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/list",rel:"noopener noreferrer",target:"_blank",children:"List 组件"})," 的实现，所以我们就不深入 ",(0,t.jsx)(n.code,{children:"vant-cli dev"})," 命令了。"]}),"\n",(0,t.jsxs)(n.h2,{id:"3-list-组件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-list-组件",children:"#"}),"3. List 组件"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/list",rel:"noopener noreferrer",target:"_blank",children:"List 组件文档"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"瀑布流滚动加载，用于展示长列表，当列表即将滚动到底部时，会触发事件并加载更多列表项。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["从这个描述和我们自己体验 ",(0,t.jsx)(n.code,{children:"demo"})," 来。\n至少有以下三个问题值得去了解学习。"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"如何监听滚动"}),"\n",(0,t.jsx)(n.li,{children:"如何计算滚动到了底部"}),"\n",(0,t.jsx)(n.li,{children:"如何触发事件加载更多"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["带着问题我们直接找到 list demo 文件：",(0,t.jsx)(n.code,{children:"vant/packages/vant/src/list/demo/index.vue"}),"。为什么是这个文件，我在上篇文章",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7160465286036979748#heading-3",rel:"noopener noreferrer",target:"_blank",children:"跟着 vant4 源码学习如何用 vue3+ts 开发一个 loading 组件，仅88行代码"}),"分析了其原理，感兴趣的小伙伴点击查看。这里就不赘述了。"]}),"\n",(0,t.jsxs)(n.h3,{id:"31-利用-demo-调试",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-利用-demo-调试",children:"#"}),"3.1 利用 demo 调试"]}),"\n",(0,t.jsxs)(n.p,{children:["组件源码中的 ",(0,t.jsx)(n.code,{children:"TS"})," 代码我不会过多解释。没学过 ",(0,t.jsx)(n.code,{children:"TS"})," 的小伙伴，推荐学这个",(0,t.jsx)(n.a,{href:"http://ts.xcatliu.com/",rel:"noopener noreferrer",target:"_blank",children:"TypeScript 入门教程"}),"。\n另外，",(0,t.jsx)(n.code,{children:"vant"})," 使用了 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@vue/babel-plugin-jsx",rel:"noopener noreferrer",target:"_blank",children:"@vue/babel-plugin-jsx"})," 插件来支持 ",(0,t.jsx)(n.code,{children:"JSX、TSX"}),"。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/list/demo/index.vue\n// 代码有删减\n<script setup lang=\"ts\">\nimport VanList from '..';\nimport { ref } from 'vue';\n\nconst t = useTranslate({\n  'zh-CN': {\n    errorInfo: '错误提示',\n    errorText: '请求失败，点击重新加载',\n    pullRefresh: '下拉刷新',\n    finishedText: '没有更多了',\n  },\n  'en-US': {\n    errorInfo: 'Error Info',\n    errorText: 'Request failed. Click to reload',\n    pullRefresh: 'PullRefresh',\n    finishedText: 'Finished',\n  },\n});\n\nconst list = ref([\n  {\n    items: [] as string[],\n    refreshing: false,\n    loading: false,\n    error: false,\n    finished: false,\n  },\n]);\n\n// 加载数据\nconst onLoad = (index: number) => {\n  const currentList = list.value[index];\n  currentList.loading = true;\n\n  setTimeout(() => {\n    if (currentList.refreshing) {\n      currentList.items = [];\n      currentList.refreshing = false;\n    }\n\n    for (let i = 0; i < 10; i++) {\n      const text = currentList.items.length + 1;\n      currentList.items.push(text < 10 ? '0' + text : String(text));\n    }\n\n    currentList.loading = false;\n    currentList.refreshing = false;\n\n    // show error info in second demo\n    if (index === 1 && currentList.items.length === 10 && !currentList.error) {\n      currentList.error = true;\n    } else {\n      currentList.error = false;\n    }\n\n    if (currentList.items.length >= 40) {\n      currentList.finished = true;\n    }\n  }, 1000);\n};\n<\/script>\n<template>\n  <van-tabs>\n    <van-tab :title=\"t('basicUsage')\">\n      <van-list\n        v-model:loading=\"list[0].loading\"\n        :finished=\"list[0].finished\"\n        :finished-text=\"t('finishedText')\"\n        @load=\"onLoad(0)\"\n      >\n        <van-cell v-for=\"item in list[0].items\" :key=\"item\" :title=\"item\" />\n      </van-list>\n    </van-tab>\n<template>\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"4-入口文件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-入口文件",children:"#"}),"4. 入口文件"]}),"\n",(0,t.jsx)(n.p,{children:"主要就是导出一下类型和变量等。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/list/index.ts\nimport { withInstall } from '../utils';\nimport _List, { ListProps } from './List';\n\nexport const List = withInstall(_List);\nexport default List;\nexport { listProps } from './List';\nexport type { ListProps };\nexport type { ListInstance, ListDirection, ListThemeVars } from './types';\n\ndeclare module 'vue' {\n  export interface GlobalComponents {\n    VanList: typeof List;\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"withInstall"})," 函数在上篇文章",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7160465286036979748#heading-10",rel:"noopener noreferrer",target:"_blank",children:"5.1 withInstall 给组件对象添加 install 方法"})," 也有分析，这里就不赘述了。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们可以在这些文件，任意位置加上 ",(0,t.jsx)(n.code,{children:"debugger"})," 调试源码。"]}),"\n",(0,t.jsxs)(n.h2,{id:"5-主文件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-主文件",children:"#"}),"5. 主文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {\n  ref,\n  watch,\n  nextTick,\n  onUpdated,\n  onMounted,\n  defineComponent,\n  type ExtractPropTypes,\n} from 'vue';\n\n// Utils\nimport {\n  isHidden,\n  truthProp,\n  makeStringProp,\n  makeNumericProp,\n  createNamespace,\n} from '../utils';\n\n// Composables\nimport { useRect, useScrollParent, useEventListener } from '@vant/use';\nimport { useExpose } from '../composables/use-expose';\nimport { useTabStatus } from '../composables/use-tab-status';\n\n// Components\nimport { Loading } from '../loading';\n\n// Types\nimport type { ListExpose, ListDirection } from './types';\n\nconst [name, bem, t] = createNamespace('list');\n\nexport const listProps = {\n  error: Boolean,\n  offset: makeNumericProp(300),\n  loading: Boolean,\n  finished: Boolean,\n  errorText: String,\n  direction: makeStringProp<ListDirection>('down'),\n  loadingText: String,\n  finishedText: String,\n  immediateCheck: truthProp,\n};\n\nexport type ListProps = ExtractPropTypes<typeof listProps>;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/v4/#/zh-CN/list",rel:"noopener noreferrer",target:"_blank",children:"List 组件 api"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default defineComponent({\n  name,\n  props: listProps,\n\n  emits: ['load', 'update:error', 'update:loading'],\n\n  setup(props, { emit, slots }) {\n    // TODODEL: 可以在这里打上断点调试，或者其他地方。\n    debugger;\n    // 省略若干代码\n    const loading = ref(false);\n    const root = ref<HTMLElement>();\n    const placeholder = ref<HTMLElement>();\n    const tabStatus = useTabStatus();\n    const scrollParent = useScrollParent(root);\n    // 省略若干代码\n    return () => {\n      const Content = slots.default?.();\n      const Placeholder = <div ref={placeholder} class={bem('placeholder')} />;\n\n      return (\n        <div ref={root} role=\"feed\" class={bem()} aria-busy={loading.value}>\n          {props.direction === 'down' ? Content : Placeholder}\n          //   比如：加载中\n          {renderLoading()}\n          //   结束文字 比如：没有更多了\n          {renderFinishedText()}\n          //   加载错误文字：比如加载失败\n          {renderErrorText()}\n          {props.direction === 'up' ? Content : Placeholder}\n        </div>\n      );\n    };\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"debugger"})," 调试截图。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83459b2f84f04199a4ee174d52a2482d~tplv-k3u1fbpfcp-watermark.image?",alt:"debugger 调试截图"})}),"\n",(0,t.jsx)(n.p,{children:"接着我们来看其他一些事件。"}),"\n",(0,t.jsxs)(n.h3,{id:"51-一些事件-useexposeuseeventlistener",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-一些事件-useexposeuseeventlistener",children:"#"}),"5.1 一些事件 useExpose、useEventListener"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// 省略若干代码\nsetup(props, { emit, slots }) {\n    // 省略 check 函数，后文讲述\n    const check = () => {}\n\n    // 监听参数变更，执行 check\n    watch(() => [props.loading, props.finished, props.error], check);\n\n    // van-tabs tab 切换状态变更时 执行 check\n    if (tabStatus) {\n      watch(tabStatus, (tabActive) => {\n        if (tabActive) {\n          check();\n        }\n      });\n    }\n\n    onUpdated(() => {\n    // ！是 ts中的非空断言，很多人问过\n      loading.value = props.loading!;\n    });\n\n    // 如果参数是立即检测，执行 check 函数\n    onMounted(() => {\n      if (props.immediateCheck) {\n        check();\n      }\n    });\n\n    // 导出 check 函数，让 refs.xxx 可以使用\n    useExpose<ListExpose>({ check });\n\n    // 监听滚动事件，执行 check 函数\n    useEventListener('scroll', check, {\n      target: scrollParent,\n      passive: true,\n    });\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["由上面代码可以看出，",(0,t.jsx)(n.code,{children:"check"})," 函数非常重要，我们在下文分析它。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们先分析上面代码用到的 ",(0,t.jsx)(n.code,{children:"useExpose"}),"、",(0,t.jsx)(n.code,{children:"useEventListener"})," 组合式 ",(0,t.jsx)(n.code,{children:"API"}),"。"]}),"\n",(0,t.jsxs)(n.h3,{id:"52-useexpose-暴露",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-useexpose-暴露",children:"#"}),"5.2 useExpose 暴露"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { getCurrentInstance } from 'vue';\nimport { extend } from '../utils';\n\n// expose public api\nexport function useExpose<T = Record<string, any>>(apis: T) {\n  const instance = getCurrentInstance();\n  if (instance) {\n    extend(instance.proxy as object, apis);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["通过 ",(0,t.jsx)(n.code,{children:"ref"})," 可以获取到 ",(0,t.jsx)(n.code,{children:"List"})," 实例并调用实例方法，详见",(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/v4/#/zh-CN/advanced-usage",rel:"noopener noreferrer",target:"_blank",children:"组件实例方法"}),"。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Vant"})," 中的许多组件提供了实例方法，调用实例方法时，我们需要通过 ",(0,t.jsx)(n.code,{children:"ref"})," 来注册组件引用信息，引用信息将会注册在父组件的 ",(0,t.jsx)(n.code,{children:"$refs"})," 对象上。注册完成后，我们可以通过 ",(0,t.jsx)(n.code,{children:"this.$refs.xxx"})," 访问到对应的组件实例，并调用上面的实例方法。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"53-useeventlistener-绑定事件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-useeventlistener-绑定事件",children:"#"}),"5.3 useEventListener 绑定事件"]}),"\n",(0,t.jsxs)(n.p,{children:["方便地进行事件绑定，在组件 ",(0,t.jsx)(n.code,{children:"mounted"})," 和 ",(0,t.jsx)(n.code,{children:"activated"})," 时绑定事件，",(0,t.jsx)(n.code,{children:"unmounted"})," 和 ",(0,t.jsx)(n.code,{children:"deactivated"})," 时解绑事件。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/181d4f0d678a4d8bb74b866577c39d72~tplv-k3u1fbpfcp-watermark.image?",alt:"useEventListener"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Ref, watch, isRef, unref, onUnmounted, onDeactivated } from 'vue';\nimport { onMountedOrActivated } from '../onMountedOrActivated';\nimport { inBrowser } from '../utils';\n\ntype TargetRef = EventTarget | Ref<EventTarget | undefined>;\n\nexport type UseEventListenerOptions = {\n  target?: TargetRef;\n  capture?: boolean;\n  passive?: boolean;\n};\n\n// TS 函数重载\n// 重载 可以参考这里：http://ts.xcatliu.com/basics/type-of-function.html#%E9%87%8D%E8%BD%BD\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  type: K,\n  listener: (event: DocumentEventMap[K]) => void,\n  options?: UseEventListenerOptions\n): void;\nexport function useEventListener(\n  type: string,\n  listener: EventListener,\n  options?: UseEventListenerOptions\n): void;\nexport function useEventListener(\n  type: string,\n  listener: EventListener,\n  options: UseEventListenerOptions = {}\n) {\n    // 如果不是浏览器环境，直接返回，比如 SSR\n  if (!inBrowser) {\n    return;\n  }\n\n  const { target = window, passive = false, capture = false } = options;\n\n  let attached: boolean;\n\n  // 添加事件\n  const add = (target?: TargetRef) => {\n    const element = unref(target);\n\n    if (element && !attached) {\n      element.addEventListener(type, listener, {\n        capture,\n        passive,\n      });\n      attached = true;\n    }\n  };\n\n  // 移除事件\n  const remove = (target?: TargetRef) => {\n    const element = unref(target);\n\n    if (element && attached) {\n      element.removeEventListener(type, listener, capture);\n      attached = false;\n    }\n  };\n\n  // 移除事件\n  onUnmounted(() => remove(target));\n  onDeactivated(() => remove(target));\n  onMountedOrActivated(() => add(target));\n\n  if (isRef(target)) {\n    watch(target, (val, oldVal) => {\n      remove(oldVal);\n      add(val);\n    });\n  }\n}\n\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"6-steup-check-函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-steup-check-函数",children:"#"}),"6. steup check 函数"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const check = () => {\n    nextTick(() => {\n        // 正在 loading 或者已经完成加载\n        // 或者加载失败，或者tab的状态不是激活时，返回。\n        if (\n            loading.value ||\n            props.finished ||\n            props.error ||\n            // skip check when inside an inactive tab\n            tabStatus?.value === false\n        ) {\n            return;\n        }\n\n        // offset 默认 300\n        const { offset, direction } = props;\n        // 滚动的父级元素的位置\n        const scrollParentRect = useRect(scrollParent);\n\n        if (!scrollParentRect.height || isHidden(root)) {\n            return;\n        }\n\n        // 触底计算\n        // 滚动父元素 和 占位元素\n        let isReachEdge = false;\n        const placeholderRect = useRect(placeholder);\n\n        if (direction === 'up') {\n            isReachEdge = scrollParentRect.top - placeholderRect.top <= offset;\n        } else {\n            isReachEdge =\n            placeholderRect.bottom - scrollParentRect.bottom <= offset;\n        }\n\n        // 触底了\n        if (isReachEdge) {\n            loading.value = true;\n            emit('update:loading', true);\n            emit('load');\n        }\n    });\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["从 ",(0,t.jsx)(n.code,{children:"check"})," 函数可以看出，主要就是利用滚动高度，接下来我们看这个函数中，使用到的组合式 ",(0,t.jsx)(n.code,{children:"API"}),"，",(0,t.jsx)(n.code,{children:"useTabStatus"}),"、",(0,t.jsx)(n.code,{children:"useScrollParent"}),"、",(0,t.jsx)(n.code,{children:"useRect"}),"。"]}),"\n",(0,t.jsxs)(n.h3,{id:"61-usetabstatus-tab-组件的状态",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-usetabstatus-tab-组件的状态",children:"#"}),"6.1 useTabStatus tab 组件的状态"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { inject, ComputedRef, InjectionKey } from 'vue';\n\n// eslint-disable-next-line\nexport const TAB_STATUS_KEY: InjectionKey<ComputedRef<boolean>> = Symbol();\n\nexport const useTabStatus = () => inject(TAB_STATUS_KEY, null);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["代码根据 ",(0,t.jsx)(n.code,{children:"commit"})," 可以发现 ",(0,t.jsx)(n.code,{children:"useTabStatus"})," 有这样一次提交。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/youzan/vant/pull/8741/files",rel:"noopener noreferrer",target:"_blank",children:"fix(List): skip check when inside an inactive tab"})}),"\n",(0,t.jsxs)(n.p,{children:["主要是在 ",(0,t.jsx)(n.code,{children:"van-tabs"})," 组件中，",(0,t.jsx)(n.code,{children:"provide(TAB_STATUS_KEY, active);"})," 提供了一个状态。",(0,t.jsx)(n.code,{children:"tab"})," 不活跃时，跳过 ",(0,t.jsx)(n.code,{children:"check"})," 函数，不执行。"]}),"\n",(0,t.jsxs)(n.h3,{id:"62-usescrollparent-获取元素最近的可滚动父元素",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#62-usescrollparent-获取元素最近的可滚动父元素",children:"#"}),"6.2 useScrollParent 获取元素最近的可滚动父元素"]}),"\n",(0,t.jsx)(n.p,{children:"获取元素最近的可滚动父元素。"}),"\n",(0,t.jsxs)(n.p,{children:["给定参数 ",(0,t.jsx)(n.code,{children:"el, root"})," 节点，遍历父级节点查找 ",(0,t.jsx)(n.code,{children:"style"})," 包含 ",(0,t.jsx)(n.code,{children:"scroll|auto|overlay"})," 的元素，如果没找到，返回第二个 ",(0,t.jsx)(n.code,{children:"root"})," 参数（没有第二个参数则是 ",(0,t.jsx)(n.code,{children:"window"}),"）。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/v4/#/zh-CN/use-scroll-parent",rel:"noopener noreferrer",target:"_blank",children:"useScrollParent 文档"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { ref, Ref, onMounted } from 'vue';\nimport { inBrowser } from '../utils';\n\ntype ScrollElement = HTMLElement | Window;\n\nconst overflowScrollReg = /scroll|auto|overlay/i;\nconst defaultRoot = inBrowser ? window : undefined;\n\n// 元素节点\nfunction isElement(node: Element) {\n  const ELEMENT_NODE_TYPE = 1;\n  return (\n    node.tagName !== 'HTML' &&\n    node.tagName !== 'BODY' &&\n    node.nodeType === ELEMENT_NODE_TYPE\n  );\n}\n\n// https://github.com/vant-ui/vant/issues/3823\nexport function getScrollParent(\n  el: Element,\n  root: ScrollElement | undefined = defaultRoot\n) {\n  let node = el;\n\n  // 遍历得到父级滚动的元素，style 样式包含 scroll|auto|overlay 的节点\n  while (node && node !== root && isElement(node)) {\n    const { overflowY } = window.getComputedStyle(node);\n    if (overflowScrollReg.test(overflowY)) {\n      return node;\n    }\n    node = node.parentNode as Element;\n  }\n\n  // 没找到返回参数 root，如果没传参，默认是 window\n  return root;\n}\n\nexport function useScrollParent(\n  el: Ref<Element | undefined>,\n  root: ScrollElement | undefined = defaultRoot\n) {\n  const scrollParent = ref<Element | Window>();\n\n  onMounted(() => {\n    if (el.value) {\n      scrollParent.value = getScrollParent(el.value, root);\n    }\n  });\n\n  return scrollParent;\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"63-userect-获取元素的大小及其相对于视口的位置",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#63-userect-获取元素的大小及其相对于视口的位置",children:"#"}),"6.3 useRect 获取元素的大小及其相对于视口的位置"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/use-rect",rel:"noopener noreferrer",target:"_blank",children:"https://vant-contrib.gitee.io/vant/#/zh-CN/use-rect"})}),"\n",(0,t.jsxs)(n.p,{children:["获取元素的大小及其相对于视口的位置，等价于 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect",rel:"noopener noreferrer",target:"_blank",children:"Element.getBoundingClientRect"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98bc708a7ebf4eb89ab141d818f2ae20~tplv-k3u1fbpfcp-watermark.image?",alt:"getBoundingClientRect"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant-use/src/useRect/index.ts\nimport { Ref, unref } from 'vue';\n\nconst isWindow = (val: unknown): val is Window => val === window;\n\nconst makeDOMRect = (width: number, height: number) =>\n  ({\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height,\n  } as DOMRect);\n\nexport const useRect = (\n  elementOrRef: Element | Window | Ref<Element | Window | undefined>\n) => {\n    // unref()：如果参数是 ref，则返回内部值，否则返回参数本身。这是 val = isRef(val) ? val.value : val 计算的一个语法糖。\n  const element = unref(elementOrRef);\n\n  // 如果是 window 直接返回 innerWidth 和 innerHeight\n  if (isWindow(element)) {\n    const width = element.innerWidth;\n    const height = element.innerHeight;\n    return makeDOMRect(width, height);\n  }\n\n  // 否则用 getBoundingClientRect api\n  if (element?.getBoundingClientRect) {\n    return element.getBoundingClientRect();\n  }\n\n  // 不支持的情况下返回 0 0\n  return makeDOMRect(0, 0);\n};\n\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"64-ishidden-是否隐藏",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#64-ishidden-是否隐藏",children:"#"}),"6.4 isHidden 是否隐藏"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// vant/packages/vant/src/utils/dom.ts\nexport function isHidden(\n  elementRef: HTMLElement | Ref<HTMLElement | undefined>\n) {\n  const el = unref(elementRef);\n  if (!el) {\n    return false;\n  }\n\n  const style = window.getComputedStyle(el);\n  const hidden = style.display === 'none';\n\n  // offsetParent returns null in the following situations:\n  // 1. The element or its parent element has the display property set to none.\n  // 2. The element has the position property set to fixed\n  const parentHidden = el.offsetParent === null && style.position !== 'fixed';\n\n  return hidden || parentHidden;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"接着我们来分析开头的插槽部分。"}),"\n",(0,t.jsxs)(n.h2,{id:"7-插槽",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-插槽",children:"#"}),"7. 插槽"]}),"\n",(0,t.jsx)(n.p,{children:"插槽部分基本都是有插槽用插槽没有则用默认的。"}),"\n",(0,t.jsxs)(n.p,{children:["插槽是函数，比如 ",(0,t.jsx)(n.code,{children:"slots.default()"}),"。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// setup 函数\nreturn () => {\n    const Content = slots.default?.();\n    const Placeholder = <div ref={placeholder} class={bem('placeholder')} />;\n\n    return (\n        <div ref={root} role=\"feed\" class={bem()} aria-busy={loading.value}>\n            {props.direction === 'down' ? Content : Placeholder}\n            //   比如：加载中\n            {renderLoading()}\n            //   结束文字 比如：没有更多了\n            {renderFinishedText()}\n            //   加载错误文字：比如加载失败\n            {renderErrorText()}\n            {props.direction === 'up' ? Content : Placeholder}\n        </div>\n    );\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"71-renderfinishedtext-渲染加载完成文字",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-renderfinishedtext-渲染加载完成文字",children:"#"}),"7.1 renderFinishedText 渲染加载完成文字"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const renderFinishedText = () => {\n    if (props.finished) {\n        const text = slots.finished ? slots.finished() : props.finishedText;\n        if (text) {\n            return <div class={bem('finished-text')}>{text}</div>;\n        }\n    }\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"72-rendererrortext-渲染加载失败文字",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#72-rendererrortext-渲染加载失败文字",children:"#"}),"7.2 renderErrorText 渲染加载失败文字"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const clickErrorText = () => {\n    emit('update:error', false);\n    check();\n};\n\nconst renderErrorText = () => {\n    if (props.error) {\n        const text = slots.error ? slots.error() : props.errorText;\n        if (text) {\n            return (\n                <div\n                    role=\"button\"\n                    class={bem('error-text')}\n                    tabindex={0}\n                    onClick={clickErrorText}\n                >\n                    {text}\n                </div>\n            );\n        }\n    }\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"73-renderloading--渲染-loading",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73-renderloading--渲染-loading",children:"#"}),"7.3 renderLoading  渲染 loading"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const renderLoading = () => {\n    if (loading.value && !props.finished) {\n        return (\n            <div class={bem('loading')}>\n            {slots.loading ? (\n                slots.loading()\n            ) : (\n                <Loading class={bem('loading-icon')}>\n                {props.loadingText || t('loading')}\n                </Loading>\n            )}\n            </div>\n        );\n    }\n};\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"8-总结",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-总结",children:"#"}),"8. 总结"]}),"\n",(0,t.jsxs)(n.p,{children:["我们主要分析了 ",(0,t.jsxs)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/list",rel:"noopener noreferrer",target:"_blank",children:[(0,t.jsx)(n.code,{children:"List"})," 组件"]})," 实现原理。"]}),"\n",(0,t.jsxs)(n.p,{children:["原理：使用 ",(0,t.jsx)(n.code,{children:"addEventListener"})," 监听父级元素的 ",(0,t.jsx)(n.code,{children:"sroll"})," 事件，用 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect",rel:"noopener noreferrer",target:"_blank",children:"Element.getBoundingClientRect"})," 获取元素的大小及其相对于视口的位置，（滚动父级元素和占位元素计算和组件属性 ",(0,t.jsx)(n.code,{children:"offset（默认300）"})," 属性比较），检测是否触底，触底则加载更多。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"emit('update:loading', true);\nemit('load');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["同时分析了一些相关组合式 ",(0,t.jsx)(n.code,{children:"API"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useExpose"})," 暴露接口供 ",(0,t.jsx)(n.code,{children:"this.$refs.xxx"})," 使用"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useEventListener"})," 绑定事件"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useTabStatus"})," 当前 ",(0,t.jsx)(n.code,{children:"tab"})," 是否激活的状态"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useScrollParent"})," 获取元素最近的可滚动父元素"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useRect"})," 获取元素的大小及其相对于视口的位置"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"组件留有四个插槽，分别是："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"default"}),"  列表内容"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"loading"}),"  自定义底部加载中提示"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"finished"}),"  自定义加载完成后的提示文案"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"error"}),"  自定义加载失败后的提示文案"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["至此，我们就分析完了 ",(0,t.jsx)(n.code,{children:"List"})," 组件，主要与 ",(0,t.jsx)(n.code,{children:"DOM"})," 操作会比较多。",(0,t.jsx)(n.code,{children:"List 组件"})," 主文件的代码仅有 ",(0,t.jsx)(n.code,{children:"100"})," 多行，但封装了很多组合式 ",(0,t.jsx)(n.code,{children:"API"})," 。看完这篇源码文章，再去看 ",(0,t.jsx)(n.a,{href:"https://vant-contrib.gitee.io/vant/#/zh-CN/list",rel:"noopener noreferrer",target:"_blank",children:"List 组件文档"}),"，可能就会有豁然开朗的感觉。再看其他组件，可能就可以猜测出大概实现的代码了。"]}),"\n",(0,t.jsxs)(n.p,{children:["如果是使用 ",(0,t.jsx)(n.code,{children:"react"}),"、",(0,t.jsx)(n.code,{children:"Taro"})," 技术栈，感兴趣也可以看看 ",(0,t.jsx)(n.code,{children:"taroify"})," ",(0,t.jsx)(n.code,{children:"List"})," 组件的实现 ",(0,t.jsx)(n.a,{href:"https://taroify.gitee.io/taroify.com/components/list",rel:"noopener noreferrer",target:"_blank",children:"文档"}),"，",(0,t.jsx)(n.a,{href:"https://github.com/mallfoundry/taroify/tree/main/packages/core/src/list",rel:"noopener noreferrer",target:"_blank",children:"源码"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"如果看完有收获，欢迎点赞、评论、分享支持。你的支持和肯定，是我写作的动力"}),"。"]}),"\n",(0,t.jsxs)(n.h2,{id:"9-加源码共读群交流",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-加源码共读群交流",children:"#"}),"9. 加源码共读群交流"]}),"\n",(0,t.jsxs)(n.p,{children:["最后可以持续关注我",(0,t.jsx)(n.a,{href:"https://juejin.cn/user/1415826704971918",rel:"noopener noreferrer",target:"_blank",children:"@若川"}),"。我会写一个",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/7140264842954276871",rel:"noopener noreferrer",target:"_blank",children:"组件库源码系列专栏"}),"，欢迎大家关注。"]}),"\n",(0,t.jsxs)(n.p,{children:["我倾力持续组织了一年",(0,t.jsx)(n.a,{href:"https://juejin.cn/post/7079706017579139102",rel:"noopener noreferrer",target:"_blank",children:"每周大家一起学习200行左右的源码共读活动"}),"，感兴趣的可以",(0,t.jsxs)(n.a,{href:"https://juejin.cn/pin/7217386885793595453",rel:"noopener noreferrer",target:"_blank",children:["点此扫码加我微信 ",(0,t.jsx)(n.code,{children:"ruochuan02"})," 参与"]}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["另外，想学源码，极力推荐关注我写的专栏",(0,t.jsx)(n.a,{href:"https://juejin.cn/column/6960551178908205093",rel:"noopener noreferrer",target:"_blank",children:"《学习源码整体架构系列》"}),"，目前是掘金关注人数（4.1k+人）第一的专栏，写有20余篇源码文章。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["vant%2Flist%2FREADME.juejin.md"]={toc:[{id:"1-前言",text:"1. 前言",depth:2},{id:"2-准备工作",text:"2. 准备工作",depth:2},{id:"21-克隆源码--跑起来",text:"2.1 克隆源码 && 跑起来",depth:3},{id:"3-list-组件",text:"3. List 组件",depth:2},{id:"31-利用-demo-调试",text:"3.1 利用 demo 调试",depth:3},{id:"4-入口文件",text:"4. 入口文件",depth:2},{id:"5-主文件",text:"5. 主文件",depth:2},{id:"51-一些事件-useexposeuseeventlistener",text:"5.1 一些事件 useExpose、useEventListener",depth:3},{id:"52-useexpose-暴露",text:"5.2 useExpose 暴露",depth:3},{id:"53-useeventlistener-绑定事件",text:"5.3 useEventListener 绑定事件",depth:3},{id:"6-steup-check-函数",text:"6. steup check 函数",depth:2},{id:"61-usetabstatus-tab-组件的状态",text:"6.1 useTabStatus tab 组件的状态",depth:3},{id:"62-usescrollparent-获取元素最近的可滚动父元素",text:"6.2 useScrollParent 获取元素最近的可滚动父元素",depth:3},{id:"63-userect-获取元素的大小及其相对于视口的位置",text:"6.3 useRect 获取元素的大小及其相对于视口的位置",depth:3},{id:"64-ishidden-是否隐藏",text:"6.4 isHidden 是否隐藏",depth:3},{id:"7-插槽",text:"7. 插槽",depth:2},{id:"71-renderfinishedtext-渲染加载完成文字",text:"7.1 renderFinishedText 渲染加载完成文字",depth:3},{id:"72-rendererrortext-渲染加载失败文字",text:"7.2 renderErrorText 渲染加载失败文字",depth:3},{id:"73-renderloading--渲染-loading",text:"7.3 renderLoading  渲染 loading",depth:3},{id:"8-总结",text:"8. 总结",depth:2},{id:"9-加源码共读群交流",text:"9. 加源码共读群交流",depth:2}],title:"分析 vant4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？",headingTitle:"分析 vant4 源码，如何用 vue3 + ts 开发一个瀑布流滚动加载的列表组件？",frontmatter:{highlight:"darcula",theme:"smartblue"}}},20713:function(e,n,r){r.d(n,{Z:()=>d});var t=r(52676),s=r(75271),i=r(92815);r(18544);let o={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function l(e,n,r){let t=Object.keys(o).includes(n)?n:r;return o[t](e)}let d=e=>{let{defaultLocale:n="en-US"}=e,r=(0,i.Vi)().page.readingTimeData,o=(0,i.Jr)(),d=(0,i.e7)(),[a,c]=(0,s.useState)(l(r,o,n));return(0,s.useEffect)(()=>{c(l(r,o,n))},[o,r]),(0,t.jsx)("span",{"data-dark":String(d),className:"rp-reading-time",children:a})}}}]);